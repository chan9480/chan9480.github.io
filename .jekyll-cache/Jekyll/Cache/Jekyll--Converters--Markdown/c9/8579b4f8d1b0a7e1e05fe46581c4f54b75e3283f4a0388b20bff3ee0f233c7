I"%<p class="notice--warning">공부하면서 알게된 <u>C++ 관련 언리얼4 기능들 정리</u></p>

<ul>
  <li>3 가지 문자열 클래스
    <ul>
      <li><code class="language-plaintext highlighter-rouge">FString</code></li>
      <li><code class="language-plaintext highlighter-rouge">FText</code></li>
      <li><code class="language-plaintext highlighter-rouge">FName</code></li>
    </ul>
  </li>
  <li>그리고 <code class="language-plaintext highlighter-rouge">TEXT()</code> 매크로</li>
</ul>

<p><br /></p>

<h2 id="-text-매크로">🌷 TEXT 매크로</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>언리얼에서는 문자열 리터럴을 TEXT 매크로 안에 넣어서 <code class="language-plaintext highlighter-rouge">TEXT("Hello World")</code> 이런식으로 넘기는게 좋다.
    <ul>
      <li>어떤 플랫폼에서든 동작할 수 있도록 언리얼이 인코딩을 해주기 때문이다.
        <ul>
          <li>모든 플랫폼에서 2 바이트 문자열로 동작하게끔 해준다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-fstring">🌼 FString</h2>

<blockquote>
  <p>C++ 에서의 <code class="language-plaintext highlighter-rouge">string</code>처럼 문자열 처리와 관련된 메서드들 사용 가능</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FString</span> <span class="n">str</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="printf-함수">printf 함수</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FString</span><span class="o">::</span><span class="n">printf</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"Actor Name: %s, ID : %d, Location X : %.3f"</span><span class="p">,</span> <span class="o">*</span><span class="n">GetName</span><span class="p">(),</span> <span class="n">ID</span><span class="p">,</span> <span class="n">GetActorLocation</span><span class="p">().</span><span class="n">X</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>C언어의 printf와 비슷하다. 형식 문자열을 출력함.</li>
  <li>언리얼에서는 <code class="language-plaintext highlighter-rouge">%s</code> 부분에 함수를 사용한다면 함수앞에 꼭 <code class="language-plaintext highlighter-rouge">*</code>를 붙여주어야 한다.
    <ul>
      <li>*GetName()</li>
    </ul>
  </li>
  <li>TEXT 매크로로 인수를 넘긴다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PrintLine</span><span class="p">(</span><span class="n">FString</span><span class="o">::</span><span class="n">Printf</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"The HiddenWord is: %s. </span><span class="se">\n</span><span class="s">It is %i characters long"</span><span class="p">),</span> <span class="o">*</span><span class="n">HiddenWord</span><span class="p">,</span> <span class="n">HiddenWord</span><span class="p">.</span><span class="n">Len</span><span class="p">()));</span> 

<span class="n">PrintLine</span><span class="p">(</span><span class="n">FString</span><span class="o">::</span><span class="n">Printf</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"The HiddenWord is: %s."</span><span class="p">),</span> <span class="o">*</span><span class="n">HiddenWord</span><span class="p">));</span>
</code></pre></div></div>

<ul>
  <li>참고로 PrintLine 은 그냥 📜Catridge.cpp로부터 상속 받은 사용자 지정 멤버 함수다. 언리얼 자체 함수 아님.</li>
  <li><code class="language-plaintext highlighter-rouge">FString</code> 클래스의 <code class="language-plaintext highlighter-rouge">Printf</code> 함수는
    <ul>
      <li>형식 지정자로 새롭게 조립한 <code class="language-plaintext highlighter-rouge">FString</code>을 리턴하는 것 뿐만 아니라
        <ul>
          <li><code class="language-plaintext highlighter-rouge">%s</code>, <code class="language-plaintext highlighter-rouge">%i</code>, <code class="language-plaintext highlighter-rouge">%.3i</code> 등등..</li>
        </ul>
      </li>
      <li>C언어의 printf 처럼 화면에 출력시킬 수도 있다.</li>
    </ul>
  </li>
  <li><u>Printf 에 FString 을 넘길 땐 %s로 받는 경우 반드시 * 를 붙여 주소로 넘겨야 한다.</u>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">*</code>을 붙여주지 않으면 컴파일 에러가 발생한다.</li>
      <li><code class="language-plaintext highlighter-rouge">%s</code>는 <code class="language-plaintext highlighter-rouge">TCHAR *</code> 포인터 타입을 받기 때문이다. (TCHAR 타입의 배열의 첫번째 원소의 주소. C에서 <code class="language-plaintext highlighter-rouge">char *</code>를 받는 것과 같은 이치인 것 같다.)
        <ul>
          <li>⭐<code class="language-plaintext highlighter-rouge">FString</code> 클래스는 <code class="language-plaintext highlighter-rouge">TArray&lt;TCHAR&gt;</code> 타입의 멤버 변수에 문자열을 저장하기 때문에, <code class="language-plaintext highlighter-rouge">FString</code> 클래스는 <code class="language-plaintext highlighter-rouge">*</code> 사용시 <code class="language-plaintext highlighter-rouge">TArray&lt;TCHAR&gt;</code> 즉, <code class="language-plaintext highlighter-rouge">TCHAR *</code> 배열의 주소를 리턴하도록 <code class="language-plaintext highlighter-rouge">*</code> 연산자를 오버로딩이 되어 있다.
            <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// FString 클래스 내부</span>

  <span class="k">typedef</span> <span class="n">TArray</span><span class="o">&lt;</span><span class="n">TCHAR</span><span class="o">&gt;</span> <span class="n">DataType</span><span class="p">;</span>
    <span class="n">DataType</span> <span class="n">Data</span><span class="p">;</span> <span class="c1">// TArray&lt;TCHAR&gt; Data 와 같다. 생성자를 통해 여기에 문자열을 저장한다.</span>

  <span class="c1">//...</span>
	<span class="n">FORCEINLINE</span> <span class="k">const</span> <span class="n">TCHAR</span><span class="o">*</span> <span class="k">operator</span><span class="o">*</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">Data</span><span class="p">.</span><span class="n">Num</span><span class="p">()</span> <span class="o">?</span> <span class="n">Data</span><span class="p">.</span><span class="n">GetData</span><span class="p">()</span> <span class="o">:</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">FString</code>도 내부적으론(멤버 변수로) 문자열을 <code class="language-plaintext highlighter-rouge">TCHAR</code> 원소들로 이루어진 배열로서 저장하고 있고 마찬가지로 마지막 원소 다음에 null character <code class="language-plaintext highlighter-rouge">\0</code>를 붙여 저장한다.</li>
</ul>

<p><br /></p>

<h3 id="len-함수">Len 함수</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FString</span> <span class="n">HiddenWord</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">"cake"</span><span class="p">);</span>
<span class="n">PrintLine</span><span class="p">(</span><span class="n">FString</span><span class="o">::</span><span class="n">Printf</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"It is %i characters long"</span><span class="p">),</span> <span class="n">HiddenWord</span><span class="p">.</span><span class="n">Len</span><span class="p">()));</span> <span class="c1">// 4 출력</span>
</code></pre></div></div>

<p>문자열의 길이를 리턴</p>

<p><br /></p>

<h2 id="-ftext">🌼 FText</h2>

<blockquote>
  <p>언리얼의 자동 현지화(번역)를 지원한다. 문자열 처리와 관련된 메소드들도 있다.</p>
</blockquote>

<p><br /></p>

<h2 id="-fname">🌼 FName</h2>

<blockquote>
  <p>대소문자를 구분하지 않는다.</p>
</blockquote>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET