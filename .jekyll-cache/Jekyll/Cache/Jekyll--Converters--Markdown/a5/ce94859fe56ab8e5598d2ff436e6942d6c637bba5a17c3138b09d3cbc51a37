I""<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-8-객체-지향의-기초--소멸자">chapter 8. 객체 지향의 기초 : 소멸자</h1>

<h2 id="-생성자와의-차이점">🔔 생성자와의 차이점</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">소멸자</code> : <u>객체가 영역을 벗어나서 메모리에서 해제될 떄</u> <strong>자동으로 호출</strong>되는 함수
    <ul>
      <li><code class="language-plaintext highlighter-rouge">생성자</code>는 객체가 메모리를 차지할 때, 즉 객체가 생성될 때 프로그래머가 직접 호출하는 함수라는 점에서 다르다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-소멸자가-호출되는-과정">🔔 소멸자가 호출되는 과정</h2>

<ul>
  <li>소멸자는 <code class="language-plaintext highlighter-rouge">~ 클래스이름()</code> 으로 정의한다.
    <ul>
      <li>소멸자는 인수를 받지 않는다. 매개 변수 없음.</li>
    </ul>
  </li>
  <li>소멸자는 <strong>자동으로 호출되는 함수</strong>이며 프로그래머가 직접 호출하는건 권장하지 않는다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Simple</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_id</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">Simple</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">id_in</span><span class="p">)</span>
		<span class="o">:</span> <span class="n">m_id</span><span class="p">(</span><span class="n">id_in</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"constructor"</span> <span class="o">&lt;&lt;</span> <span class="n">m_id</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="o">~</span><span class="n">Simple</span><span class="p">()</span>  <span class="c1">// ✨소멸자✨ </span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Destructor"</span> <span class="o">&lt;&lt;</span> <span class="n">m_id</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Simple</span> <span class="n">s1</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// 생성자 호출, m_id = 0</span>
	<span class="n">Simple</span> <span class="n">s2</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>  <span class="c1">// 생성자 호출, m_id = 1</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 영역을 벗어나면서 두 객체 모두 소멸자 호출 </span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>✨출력✨

Constructor 0
Constructor 1
Destructor 1
Destructor 0
</code></pre></div></div>

<ul>
  <li>객체가 s1, s2 이렇게 두 개 있는 상황에서 이들이 속한 영역인 main 함수가 종료될 때
    <ul>
      <li>객체 s1, s2가 <u>메모리가 반납 되면서 이들의 소멸자가 자동으로 호출된다.</u></li>
      <li><strong>가장 나중에 만들어진 객체가 먼저 사라지므로</strong> s2의 소멸자가 호출되어 “Destructor 1”가 먼저 출력된다.
        <ul>
          <li>스택 메모리를 사용하니까 가장 나중에 만들어진게 가장 먼저 삭제된다. <a href="https://ansohxxn.github.io/cpp/chapter7-8/#-stack-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%8A%B9%EC%A7%95">해당 포스트에 있는 그림 참고</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-소멸자-활용-방법">🔔 소멸자 활용 방법</h2>

<blockquote>
  <p>메모리를 동적 할당 받는 멤버가 있을 때 소멸자 안에서 이 멤버를 <code class="language-plaintext highlighter-rouge">delete</code> 해주면 메모리 누수를 방지할 수 있다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">IntArray</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="o">*</span><span class="n">m_arr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	
<span class="nl">public:</span>
	<span class="n">IntArray</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">length_in</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">m_length</span> <span class="o">=</span> <span class="n">length_in</span><span class="p">;</span>
		<span class="n">m_arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">m_length</span><span class="p">];</span>  <span class="c1">// m_arr 멤버는 동적할당 받고 있다.</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"constructor"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

    <span class="o">~</span><span class="n">IntArray</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">delete</span> <span class="p">[]</span> <span class="n">m_arr</span><span class="p">;</span>  <span class="c1">// 객체 소멸시 m_arr 멤버는 해제해주기!</span>
    <span class="p">}</span>

	<span class="kt">int</span> <span class="n">getLength</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">m_length</span><span class="p">;}</span>
	
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="n">IntArray</span> <span class="n">my_int_arr</span><span class="p">(</span><span class="mi">10000</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>객체 생성시 <em>m_arr</em> 멤버는 메모리를 동적으로 할당 받는다. 이런 상황에서 만약 프로그래머가 실수로 <code class="language-plaintext highlighter-rouge">delete</code>를 해주지 않는다면 객체를 무한으로 생성하는 중인 무한 루프문에서 메모리 누수가 생긴다. 소멸자에 <em>m_arr</em> 멤버를 <code class="language-plaintext highlighter-rouge">delete</code>시키는 내용을 넣어준다면 while문 안에서 다음 반복으로 넘어갈 때마다 객체가 소멸되면서 소멸자가 호출되고 <em>m_arr</em> 멤버도 무사히 메모리를 해제될 것이다.</p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>

<p><br /></p>
:ET