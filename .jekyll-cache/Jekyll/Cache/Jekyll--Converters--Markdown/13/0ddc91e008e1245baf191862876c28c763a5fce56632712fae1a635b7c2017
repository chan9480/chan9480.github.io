I"N<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-8-객체-지향의-기초--생성자">chapter 8. 객체 지향의 기초 : 생성자</h1>

<h2 id="-생성자란">🔔 생성자란?</h2>

<blockquote>
  <p><strong>생성자</strong> : 객체가 메모리에 잡히자마자 실행되는 함수. 즉 <u>객체가 생성되자마자 실행되는 함수다.</u></p>
</blockquote>

<ul>
  <li>객체가 생성되자마자 호출되기 때문에 <u>주로 멤버들을 초기화하 하는 내용이 들어간다.</u>
    <ul>
      <li>꼭 멤버들을 초기화하는 내용이 아니더라도 객체가 생성되자마자 실행되야 할 함수라던가 그런게 있으면 생성자에 넣어주면 된다!</li>
    </ul>
  </li>
  <li>이름이 클래스의 이름과 같다.</li>
  <li>객체가 생성되자마자 실행되야 하므로 <code class="language-plaintext highlighter-rouge">public</code> 이어야 한다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Fraction</span>
<span class="p">{</span>
<span class="nl">private:</span>  <span class="c1">// 캡슐화 </span>
	<span class="kt">int</span> <span class="n">m_numerator</span><span class="p">;</span> <span class="c1">// 분자 </span>
	<span class="kt">int</span> <span class="n">m_denominator</span><span class="p">;</span> <span class="c1">// 분모 </span>

<span class="nl">public:</span>
	<span class="n">Fraction</span><span class="p">()</span>  <span class="c1">// ✨생성자✨</span>
	<span class="p">{</span>
		<span class="n">m_numerator</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  
		<span class="n">m_denominator</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_numerator</span> <span class="o">&lt;&lt;</span> <span class="s">" / "</span> <span class="o">&lt;&lt;</span> <span class="n">m_denominator</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Fraction</span> <span class="n">frac</span><span class="p">;</span>  <span class="c1">// 객체가 생성되면서 생성자가 호출된다.</span>

	<span class="n">frac</span><span class="p">.</span><span class="n">print</span><span class="p">();</span> <span class="c1">//    "0 / 1" 출력</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li><em>Fraction frac;</em>
    <ul>
      <li>객체가 생성되면서 생성자가 호출된다.</li>
      <li><em>m_numerator</em> = 0 으로 초기화 됨</li>
      <li><em>m_denominator</em> = 1 으로 초기화 됨</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-생성자의-매개변수">🔔 생성자의 매개변수</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Fraction</span>
<span class="p">{</span>
<span class="nl">private:</span>  
	<span class="kt">int</span> <span class="n">m_numerator</span><span class="p">;</span> 
	<span class="kt">int</span> <span class="n">m_denominator</span><span class="p">;</span> 

<span class="nl">public:</span>
	<span class="n">Fraction</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">num_in</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">den_in</span><span class="p">)</span>  <span class="c1">// ✨생성자✨</span>
	<span class="p">{</span>
		<span class="n">m_numerator</span> <span class="o">=</span> <span class="n">num_in</span><span class="p">;</span>  
		<span class="n">m_denominator</span> <span class="o">=</span> <span class="n">den_in</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Fraction() constructors, frac"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_numerator</span> <span class="o">&lt;&lt;</span> <span class="s">" / "</span> <span class="o">&lt;&lt;</span> <span class="n">m_denominator</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Fraction</span> <span class="n">one_thirds</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// 객체가 생성되면서 생성자가 호출된다.</span>
    <span class="n">one_thirds</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>  <span class="c1">//      "1 / 3" 출력</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><em>Fraction one_thirds(1, 3);</em>
    <ul>
      <li>Fraction 타입의 one_thirds 객체 생성</li>
      <li>생성자에 인수 2개를 넘겨준다.
        <ul>
          <li>매개변수 2개 가진 생성자 호출
            <ul>
              <li><em>Fraction(const int &amp; num_in, const int &amp; den_in)</em></li>
              <li>인수로 각 멤버를 초기화 해준다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="매개-변수에-기본-값-설정-하면">매개 변수에 기본 값 설정 하면</h3>

<p><a href="https://ansohxxn.github.io/cpp/chapter7-6/">7.6 매개변수 기본 값 설정</a> 해당 포스트 내용처럼 생성자 또한 매개 변수에 기본 값을 설정할 수 있다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Fraction</span>
<span class="p">{</span>
<span class="nl">private:</span>  
	<span class="kt">int</span> <span class="n">m_numerator</span><span class="p">;</span> 
	<span class="kt">int</span> <span class="n">m_denominator</span><span class="p">;</span> 

<span class="nl">public:</span>
	<span class="n">Fraction</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">num_in</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">den_in</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1">// ✨생성자✨</span>
	<span class="p">{</span>
		<span class="n">m_numerator</span> <span class="o">=</span> <span class="n">num_in</span><span class="p">;</span>  
		<span class="n">m_denominator</span> <span class="o">=</span> <span class="n">den_in</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Fraction() constructors, frac"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_numerator</span> <span class="o">&lt;&lt;</span> <span class="s">" / "</span> <span class="o">&lt;&lt;</span> <span class="n">m_denominator</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Fraction</span> <span class="n">one_thirds</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 이렇게 인수 1개만 넘겨도 매개변수 다른 하나는 디폴트 값이 있으므로 괜찮다. </span>
    <span class="n">one_thirds</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>  <span class="c1">//      "2 / 5" 출력</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Fraction(const int &amp; num_in, const int &amp; den_in <code class="language-plaintext highlighter-rouge">= 5</code>)
    <ul>
      <li><strong><em>Fraction frc(3);</em></strong> 객체 생성시 이렇게 매개변수 1개의 생성자를 호출해도, 매개변수 <em>num_in</em>에는 3이, 매개변수 <em>den_in</em> 에는 기본 값인 5가 들어오게 된다.
        <ul>
          <li>단, 매개 변수 1 개짜리 생성자가 없을 때라는 전제 하에!</li>
          <li>매개 변수 1개짜리 생성자 또한 있을 때 <strong><em>Fraction frc(3);</em></strong>를 호출하면 매개 변수 1개짜리 생성자를 호출해야 하는지,  매개 변수 하나는 기본 값이 설정 되어 있는 매개변수 2개짜리 생성자를 호출해야 하는지 애매 모호 하기 때문에 에러가 난다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="첫-번째-주의-사항">첫 번째 주의 사항</h3>

<p>매개변수가 없는 생성자를 호출할 땐 반드시 <code class="language-plaintext highlighter-rouge">()</code>을 빼야 한다. <code class="language-plaintext highlighter-rouge">Fraction f();</code>로 호출하는 것이 아니라 <code class="language-plaintext highlighter-rouge">Fraction f;</code>로 호출해야 한다. <code class="language-plaintext highlighter-rouge">()</code> 괄호는 매개변수 있는 생성자를 호출할 때만.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Fraction</span> <span class="n">f</span><span class="p">;</span>  <span class="c1">// 매개 변수 없는 생성자 호출</span>
<span class="n">Fraction</span> <span class="nf">f</span><span class="p">();</span> <span class="c1">// 에러!✨ C++에선 없는 표현이다.</span>
</code></pre></div></div>

<h3 id="두-번째-주의-사항">두 번째 주의 사항</h3>

<blockquote>
  <p>클래스 안에 <u>생성자 정의가 아예 없을 때</u></p>
</blockquote>

<p>사실 아무 일도 안하는 <code class="language-plaintext highlighter-rouge">Fraction() {}</code> 매개변수 없는 기본 생성자가 숨어 있다. 그래서 Fraction 클래스가 생성자가 없다 하더라도 <code class="language-plaintext highlighter-rouge">Fraction frac;</code> 객체를 생성하면 숨어있던 기본 생성자가 호출된다</p>

<blockquote>
  <p>클래스 안에 매개변수 있는 생성자 정의가 하나라도 있을 땐 매개변수 없는 기본 생성자를 호출할 수 없다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Fraction</span>
<span class="p">{</span>
<span class="nl">private:</span>  
	<span class="kt">int</span> <span class="n">m_numerator</span><span class="p">;</span> 
	<span class="kt">int</span> <span class="n">m_denominator</span><span class="p">;</span> 

<span class="nl">public:</span>
	<span class="n">Fraction</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">num_in</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">den_in</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1">// ✨생성자✨</span>
	<span class="p">{</span>
		<span class="n">m_numerator</span> <span class="o">=</span> <span class="n">num_in</span><span class="p">;</span>  
		<span class="n">m_denominator</span> <span class="o">=</span> <span class="n">den_in</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Fraction() constructors, frac"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_numerator</span> <span class="o">&lt;&lt;</span> <span class="s">" / "</span> <span class="o">&lt;&lt;</span> <span class="n">m_denominator</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Fraction</span> <span class="n">frac</span><span class="p">;</span> <span class="c1">// 에러 ⭐⭐⭐ </span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>생성자 정의가 아예 없을 땐 아무 일도 하지 않는 기본 생성자를 만들어주어 호출이 가능했지만</li>
  <li>매개 변수를 가지고 있는 생성자가 하나라도 있을 땐 매개변수가 없는 생성자는 없으므로 기본 생성자는 호출이 불가능해진다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Fraction</span>
<span class="p">{</span>
<span class="nl">private:</span>  
	<span class="kt">int</span> <span class="n">m_numerator</span><span class="p">;</span> 
	<span class="kt">int</span> <span class="n">m_denominator</span><span class="p">;</span> 

<span class="nl">public:</span>

    <span class="n">Fraction</span><span class="p">()</span>   <span class="c1">// 기본 생성자</span>
    <span class="p">{}</span>

	<span class="n">Fraction</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">num_in</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">den_in</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1">// 매개변수 1개 생성자✨</span>
	<span class="p">{</span>
		<span class="n">m_numerator</span> <span class="o">=</span> <span class="n">num_in</span><span class="p">;</span>  
		<span class="n">m_denominator</span> <span class="o">=</span> <span class="n">den_in</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Fraction() constructors, frac"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_numerator</span> <span class="o">&lt;&lt;</span> <span class="s">" / "</span> <span class="o">&lt;&lt;</span> <span class="n">m_denominator</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Fraction</span> <span class="n">frac</span><span class="p">;</span> <span class="c1">// 기본 생성자 호출  </span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>기본 생성자 또한 정의해주니 이제는 <code class="language-plaintext highlighter-rouge">Fraction frac;</code> 에서 에러가 나지 않는다.</li>
</ul>

<p><br /></p>

<h2 id="-생성자-호출시-와-의-차이">🔔 생성자 호출시 ()와 {}의 차이</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Fraction</span> <span class="n">frac</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
<span class="n">Fraction</span> <span class="nf">frac</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">{}</code>을 사용하여 호출하는게 더 엄격하다. 자동으로 형변환 해주지 않음!</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Fraction</span> <span class="n">frac</span><span class="p">{</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">};</span> <span class="c1">// 에러 O</span>
<span class="n">Fraction</span> <span class="nf">frac</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">);</span> <span class="c1">// 에러 X</span>
</code></pre></div></div>
<p>Fraction 생성자에서 인수를 int 로 받는다고 가정해보자. 인수를 double 타입으로 넘길 시, <code class="language-plaintext highlighter-rouge">{}</code>로 호출할 땐 자동 형변환을 해주지 않으므로 에러가 나지만 <code class="language-plaintext highlighter-rouge">()</code>로 호출할 땐 자동 형변환을 해주기 때문에 에러가 나지 않고 인수를 int로 형변환해준다.</p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>

<p><br /></p>
:ET