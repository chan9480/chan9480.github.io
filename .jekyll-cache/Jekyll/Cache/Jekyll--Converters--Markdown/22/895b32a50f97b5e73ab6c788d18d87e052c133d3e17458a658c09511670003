I"~1<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 게임 만들기 연습 문제 패키지</strong> 강의를 듣고 정리한 필기입니다.😀 <br />
<a href="https://github.com/jmhong-simulation/GameDevPracticePackage">🌜 공부에 사용된 홍정모 교수님의 코드들 보러가기</a> <br />
<a href="https://www.inflearn.com/course/c-2">🌜 [홍정모의 게임 만들기 연습 문제 패키지] 강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="32-연습문제">3.2 연습문제</h1>

<p class="notice--warning"><strong>연습 문제</strong>는 스스로 풀이했습니다. 😀     <br />
해당 챕터 보러가기 🖐 <a href="https://ansohxxn.github.io/c++%20games/chapter3-3/">3.3 질량-용수철 시스템</a> <br />
연습 문제 출처 : <a href="https://blog.naver.com/atelierjpro/221413483005">홍정모 교수님 블로그</a></p>

<p><br /></p>

<h2 id="-q1-스프링과-물체-하나-더-추가해보기">🙋 Q1. 스프링과 물체 하나 더 추가해보기</h2>

<blockquote>
  <p>🟡<em>rb0</em>은 고정이며 🔵<em>rb1</em>,🔵<em>rb1</em> 질점이 2개 있는 형태</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/42318591/85251341-1218dc00-b494-11ea-9243-84b01896a85b.png" alt="image" width="30%" height="40%" class="align-center" /></p>

<h3 id="전체-코드">전체 코드</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "Game2D.h"
#include "Examples/PrimitivesGallery.h"
#include "RandomNumberGenerator.h"
#include "RigidCircle.h"
#include &lt;vector&gt;
#include &lt;memory&gt;
</span>
<span class="k">namespace</span> <span class="n">jm</span>
<span class="p">{</span>
	<span class="k">class</span> <span class="nc">Example</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Game2D</span>
	<span class="p">{</span>
	<span class="nl">public:</span>
		<span class="n">RigidCircle</span> <span class="n">rb0</span><span class="p">,</span> <span class="n">rb1</span><span class="p">,</span> <span class="n">rb2</span><span class="p">;</span>

		<span class="n">Example</span><span class="p">()</span>
			<span class="o">:</span> <span class="n">Game2D</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">reset</span><span class="p">();</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">reset</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="c1">// Initial position and velocity</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">vel</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">::</span><span class="n">hotpink</span><span class="p">;</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">radius</span> <span class="o">=</span> <span class="mf">0.03</span><span class="n">f</span><span class="p">;</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">mass</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">;</span>

			<span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">::</span><span class="n">yellow</span><span class="p">;</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">radius</span> <span class="o">=</span> <span class="mf">0.03</span><span class="n">f</span><span class="p">;</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">mass</span> <span class="o">=</span> <span class="n">rb0</span><span class="p">.</span><span class="n">mass</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">radius</span> <span class="o">/</span> <span class="n">rb0</span><span class="p">.</span><span class="n">radius</span><span class="p">,</span> <span class="mf">2.0</span><span class="n">f</span><span class="p">);</span>

			<span class="n">rb2</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.8</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb2</span><span class="p">.</span><span class="n">vel</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb2</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">::</span><span class="n">green</span><span class="p">;</span>
			<span class="n">rb2</span><span class="p">.</span><span class="n">radius</span> <span class="o">=</span> <span class="mf">0.03</span><span class="n">f</span><span class="p">;</span>
			<span class="n">rb2</span><span class="p">.</span><span class="n">mass</span> <span class="o">=</span> <span class="n">rb0</span><span class="p">.</span><span class="n">mass</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">radius</span> <span class="o">/</span> <span class="n">rb0</span><span class="p">.</span><span class="n">radius</span><span class="p">,</span> <span class="mf">2.0</span><span class="n">f</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">drawWall</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">setLineWidth</span><span class="p">(</span><span class="mf">5.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">update</span><span class="p">()</span> <span class="k">override</span>
		<span class="p">{</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">getTimeStep</span><span class="p">()</span> <span class="o">*</span> <span class="mf">0.4</span><span class="n">f</span><span class="p">;</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">epsilon</span> <span class="o">=</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">;</span>

			<span class="c1">// physics update (Temporarily disabled)</span>
			<span class="c1">//rb0.update(dt);</span>
			<span class="c1">//rb1.update(dt);</span>

			<span class="c1">// coefficients</span>
			<span class="k">const</span> <span class="n">vec2</span> <span class="n">gravity</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">9.8</span><span class="n">f</span><span class="p">);</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">coeff_k</span> <span class="o">=</span> <span class="mf">50.0</span><span class="n">f</span><span class="p">;</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">coeff_d</span> <span class="o">=</span> <span class="mf">10.0</span><span class="n">f</span><span class="p">;</span>

			<span class="c1">// update rb1 (Note: rb0 is fixed)</span>
			<span class="p">{</span>
				<span class="k">const</span> <span class="kt">float</span> <span class="n">l0</span> <span class="o">=</span> <span class="mf">0.3</span><span class="n">f</span><span class="p">;</span>

				<span class="c1">// rb0-rb1 spring</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span><span class="c1">// unit vector</span>

				<span class="c1">// compute stiffness force</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span> <span class="o">+</span>
					<span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">vel</span><span class="p">).</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span><span class="p">;</span>

				<span class="c1">// compute damping force</span>

				<span class="k">const</span> <span class="k">auto</span> <span class="n">accel</span> <span class="o">=</span> <span class="n">gravity</span> <span class="o">+</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb1</span><span class="p">.</span><span class="n">mass</span><span class="p">;</span>

				<span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">+=</span> <span class="n">accel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>

				<span class="c1">// to 'reaction' to rb0 because rb0 is fixed.</span>
			<span class="p">}</span>

			<span class="c1">// update rb2</span>
			<span class="p">{</span>
				<span class="k">const</span> <span class="kt">float</span> <span class="n">l0</span> <span class="o">=</span> <span class="mf">0.2</span><span class="n">f</span><span class="p">;</span>

				<span class="c1">// rb1-rb2 spring</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb2</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb1</span><span class="p">.</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb2</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb1</span><span class="p">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span> <span class="c1">// unit vector</span>

				<span class="c1">// compute stiffness force</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span> <span class="o">+</span>
					<span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">rb2</span><span class="p">.</span><span class="n">vel</span> <span class="o">-</span> <span class="n">rb1</span><span class="p">.</span><span class="n">vel</span><span class="p">).</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span><span class="p">;</span>

				<span class="c1">// compute damping force</span>

				<span class="k">const</span> <span class="k">auto</span> <span class="n">accel</span> <span class="o">=</span> <span class="n">gravity</span> <span class="o">+</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb2</span><span class="p">.</span><span class="n">mass</span><span class="p">;</span>

				<span class="n">rb2</span><span class="p">.</span><span class="n">vel</span> <span class="o">+=</span> <span class="n">accel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
				<span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">-=</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb1</span><span class="p">.</span><span class="n">mass</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span> <span class="c1">// reaction</span>
			<span class="p">}</span>

			<span class="c1">// update positions</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
			<span class="n">rb2</span><span class="p">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">rb2</span><span class="p">.</span><span class="n">vel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>

			<span class="c1">// draw</span>
			<span class="n">drawWall</span><span class="p">();</span>

			<span class="c1">// spring</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">red</span><span class="p">,</span> <span class="n">rb0</span><span class="p">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">Colors</span><span class="o">::</span><span class="n">red</span><span class="p">,</span> <span class="n">rb1</span><span class="p">.</span><span class="n">pos</span><span class="p">);</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">red</span><span class="p">,</span> <span class="n">rb1</span><span class="p">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">Colors</span><span class="o">::</span><span class="n">red</span><span class="p">,</span> <span class="n">rb2</span><span class="p">.</span><span class="n">pos</span><span class="p">);</span>

			<span class="c1">// mass points</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">draw</span><span class="p">();</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">draw</span><span class="p">();</span>
			<span class="n">rb2</span><span class="p">.</span><span class="n">draw</span><span class="p">();</span>

			<span class="c1">// reset button</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">isKeyPressedAndReleased</span><span class="p">(</span><span class="n">GLFW_KEY_R</span><span class="p">))</span> <span class="n">reset</span><span class="p">();</span>
		<span class="p">}</span>

	<span class="p">};</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">jm</span><span class="o">::</span><span class="n">Example</span><span class="p">().</span><span class="n">run</span><span class="p">();</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="rb0--rb1-속도-업데이트-가속도">🟡<em>rb0</em> 👉🏻 🔵<em>rb1</em> 속도 업데이트 (가속도)</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
	<span class="k">const</span> <span class="kt">float</span> <span class="n">l0</span> <span class="o">=</span> <span class="mf">0.3</span><span class="n">f</span><span class="p">;</span>

	<span class="c1">// rb0-rb1 spring</span>
	<span class="k">const</span> <span class="k">auto</span> <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
	<span class="k">const</span> <span class="k">auto</span> <span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span><span class="c1">// unit vector</span>

	<span class="c1">// compute stiffness force</span>
	<span class="k">const</span> <span class="k">auto</span> <span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span> <span class="o">+</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">vel</span><span class="p">).</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span><span class="p">;</span>

	<span class="c1">// compute damping force</span>

	<span class="k">const</span> <span class="k">auto</span> <span class="n">accel</span> <span class="o">=</span> <span class="n">gravity</span> <span class="o">+</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb1</span><span class="p">.</span><span class="n">mass</span><span class="p">;</span>

	<span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">+=</span> <span class="n">accel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>

	<span class="c1">// to 'reaction' to rb0 because rb0 is fixed.</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>🟡<em>rb0</em>은 고정이므로 속도를 업데이트 하지 않는다.</li>
  <li>가속도 = 중력가속도 + 스프링의총힘/질량</li>
  <li><em>const float l0 = 0.3f;</em>
    <ul>
      <li>🟡<em>rb0</em> 👉🏻 🔵<em>rb1</em> 의 고정 길이</li>
    </ul>
  </li>
  <li>distance :  l rb1.pos - rb0.pos l</li>
  <li>direction : <strong><em>rb0 → rb1</em></strong></li>
  <li><code class="language-plaintext highlighter-rouge">rb1의 가속도</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">accel</code> = gravity + spring_force / rb1.mass;
        <ol>
          <li>중력가속도</li>
          <li>spring_force / rb1의 질량
            <ul>
              <li>rb1이 spring_force로부터 받을 가속도</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<h3 id="rb1--rb2-속도-업데이트-가속도">🔵<em>rb1</em> 👉🏻 🔵<em>rb2</em> 속도 업데이트 (가속도)</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
	<span class="k">const</span> <span class="kt">float</span> <span class="n">l0</span> <span class="o">=</span> <span class="mf">0.2</span><span class="n">f</span><span class="p">;</span> <span class="c1">// 원래 길이</span>

	<span class="c1">// rb1-rb2 spring</span>
	<span class="k">const</span> <span class="k">auto</span> <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb2</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb1</span><span class="p">.</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
	<span class="k">const</span> <span class="k">auto</span> <span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb2</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb1</span><span class="p">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span> <span class="c1">// unit vector</span>

	<span class="c1">// compute stiffness force</span>
	<span class="k">const</span> <span class="k">auto</span> <span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span> <span class="o">+</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">rb2</span><span class="p">.</span><span class="n">vel</span> <span class="o">-</span> <span class="n">rb1</span><span class="p">.</span><span class="n">vel</span><span class="p">).</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span><span class="p">;</span>

	<span class="c1">// compute damping force</span>

	<span class="k">const</span> <span class="k">auto</span> <span class="n">accel</span> <span class="o">=</span> <span class="n">gravity</span> <span class="o">+</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb2</span><span class="p">.</span><span class="n">mass</span><span class="p">;</span>

	<span class="n">rb2</span><span class="p">.</span><span class="n">vel</span> <span class="o">+=</span> <span class="n">accel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
	<span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">-=</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb1</span><span class="p">.</span><span class="n">mass</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span> <span class="c1">// reaction</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>🔵<em>rb2</em> 의 <code class="language-plaintext highlighter-rouge">가속도</code>
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="k">auto</span> <span class="n">accel</span> <span class="o">=</span> <span class="n">gravity</span> <span class="o">+</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb2</span><span class="p">.</span><span class="n">mass</span><span class="p">;</span>
<span class="n">rb2</span><span class="p">.</span><span class="n">vel</span> <span class="o">+=</span> <span class="n">accel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
</code></pre></div>    </div>
    <ul>
      <li>distance : l rb2.pos - rb1.pos l</li>
      <li>direction : <strong><em>rb1 → rb2</em></strong></li>
      <li><code class="language-plaintext highlighter-rouge">accel</code> = gravity + spring_force / rb2.mass*dt;
        <ol>
          <li>중력가속도</li>
          <li>rb2이 spring_force로부터 받을 가속도
            <ul>
              <li>spring_force / rb2의 질량</li>
              <li>rb1 → rb2</li>
              <li>rb1 입장에서의 rb2의 상대속도 : <strong><em>rb1.vel - rb0.vel</em></strong></li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>🔵<em>rb1</em> 의 <code class="language-plaintext highlighter-rouge">가속도</code>
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">-=</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb1</span><span class="p">.</span><span class="n">mass</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span> <span class="c1">// reaction</span>
</code></pre></div>    </div>
    <ul>
      <li>rb1.vel의 중력 가속도는 🟡<em>rb0</em>👉🏻🔵<em>rb1</em> 에서 반영 했으니까 언급 X</li>
      <li>🔵<em>rb1</em>👉🏻🔵<em>rb2</em> 의 스프링이 원래대로 돌아가는 힘은 🟡<em>rb0</em>👉🏻🔵<em>rb1</em>의 스프링이 원래대로 돌아가는 힘에 영향을 받은 🔵<em>rb1</em>의 <u>가속도를 줄인다.</u>
        <ul>
          <li>rb1.vel <code class="language-plaintext highlighter-rouge">-=</code> spring_force / rb1.mass * dt;</li>
          <li><u>그래서 이렇게 빼주어야 한다.</u></li>
          <li>이말은 즉 rb1의 속도 변화 폭이 점점 줄어든다는 것.
            <ul>
              <li><del>이 부분 이해가 빠삭하게 되는건 아님.. 아리까리 😥😭</del></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-q2-바둑판처럼-스프링을-촘촘하게-연결해보기">🙋 Q2. 바둑판처럼 스프링을 촘촘하게 연결해보기.</h2>
<p><em>게임 내에서 플레이어의 옷감을 표현하는데에 많이 쓰이는 기법이다.  옷이 휘날린다던가 이럴 때!</em></p>

<iframe width="1000" height="563" src="https://www.youtube.com/embed/CwMZETZaWNY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h3 id="아이디어">아이디어</h3>

<p><img src="https://user-images.githubusercontent.com/42318591/85253429-198eb400-b499-11ea-9b9e-c34517cd1b3b.png" alt="image" width="80%" height="80%" class="align-center" /></p>

<ul>
  <li><u>여러개의 질점</u>과 <u>여러개의 스프링</u>이 엮여 있을 때
    <ul>
      <li>
        <blockquote>
          <p>여러가지 힘을 다 합쳐주면 된다.</p>
        </blockquote>
        <ul>
          <li>벡터 x_0이 받는 힘들을 다 더한후 질량으로 나누어 가속도로서 속도에 더해주면 된다.
            <ul>
              <li><em>x_0이 받는 힘 = x_1 로부터 받는 힘 + x_2 로부터 받는 힘 + x_3 로부터 받는 힘</em></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/85254319-fb29b800-b49a-11ea-98d9-468c3b2bf7a5.png" alt="image" width="70%" height="70%" class="align-center" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">row</code>, <code class="language-plaintext highlighter-rouge">col</code>을 설정해서 <code class="language-plaintext highlighter-rouge">row × col</code>개수의 질점을 만들 것이다.</li>
  <li>🟡질점 2개는 고정되어 있다.</li>
  <li>나머지 🔵질점들은 <u>양 옆(형제)</u>, <u>위에 있는(부모)</u> 질점들로부터 가속도 영향을 받는다.
    <ul>
      <li>자신보다 아래에 있는 자식 질점들로부터는 가속도 영향을 받지 않는다.
        <ul>
          <li>질점을 잡고 늘어지는 외부의 힘 중력으로부터 질점을 원래대로 끌어 올리는 스프링 힘은 <u>부모 또는 형제 질점이 자식 질점에게 가하는 것이므로.</u></li>
          <li>따라서 자식 질점으로부터는 스프링의 힘을 받지 않음.</li>
        </ul>
      </li>
      <li>위 사진은 각 질점들이 부모, 형제 질점들과 연결짓는 경우의 수 정리</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/85254386-27ddcf80-b49b-11ea-815d-0f94ac7484a0.png" alt="image" width="70%" height="70%" class="align-center" /></p>

<ul>
  <li>질점들끼리 스프링 연결</li>
</ul>

<h3 id="전체-코드-1">전체 코드</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "Game2D.h"
#include "Examples/PrimitivesGallery.h"
#include "RandomNumberGenerator.h"
#include "RigidCircle.h"
#include &lt;vector&gt;
#include &lt;memory&gt;
</span>
<span class="k">namespace</span> <span class="n">jm</span>
<span class="p">{</span>
	<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
	<span class="k">class</span> <span class="nc">Example</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Game2D</span>
	<span class="p">{</span>
	<span class="nl">public:</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="n">RigidCircle</span> <span class="o">*&gt;</span> <span class="n">circles</span><span class="p">;</span>
		<span class="k">const</span> <span class="kt">float</span> <span class="n">l0</span> <span class="o">=</span> <span class="mf">0.3</span><span class="n">f</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>   <span class="c1">// &lt;- 바꿔서도 실행 해보자</span>
		<span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>   <span class="c1">// &lt;- 바꿔서도 실행 보자</span>

		<span class="n">Example</span><span class="p">()</span>
			<span class="o">:</span> <span class="n">Game2D</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">reset</span><span class="p">();</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">reset</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">vec2</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.75</span><span class="n">f</span><span class="p">);</span>
			<span class="n">vec2</span> <span class="n">vel</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">RGB</span> <span class="n">color</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">;</span>
			<span class="kt">float</span> <span class="n">radius</span> <span class="o">=</span> <span class="mf">0.03</span><span class="n">f</span><span class="p">;</span>
			<span class="kt">float</span> <span class="n">mass</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">;</span>

			<span class="c1">// Initial position and velocity</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">pos</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">0.75</span><span class="n">f</span> <span class="o">-</span> <span class="n">i</span> <span class="o">*</span> <span class="mf">1.0</span><span class="n">f</span> <span class="o">/</span> <span class="p">(</span><span class="n">row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="n">pos</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.5</span><span class="n">f</span> <span class="o">+</span> <span class="n">j</span> <span class="o">*</span> <span class="mf">1.0</span><span class="n">f</span> <span class="o">/</span> <span class="p">(</span><span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>

					<span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">==</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
						<span class="n">color</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">::</span><span class="n">yellow</span><span class="p">;</span>
					<span class="k">else</span>
						<span class="n">color</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">;</span>

					<span class="n">circles</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">new</span> <span class="n">RigidCircle</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">vel</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">mass</span><span class="p">));</span>

					<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">mass</span> <span class="o">=</span> <span class="n">circles</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mass</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">radius</span> <span class="o">/</span> <span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">radius</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">drawWall</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">setLineWidth</span><span class="p">(</span><span class="mf">5.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">update</span><span class="p">()</span> <span class="k">override</span>
		<span class="p">{</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">getTimeStep</span><span class="p">()</span> <span class="o">*</span> <span class="mf">0.4</span><span class="n">f</span><span class="p">;</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">epsilon</span> <span class="o">=</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">;</span>

			<span class="c1">// coefficients</span>
			<span class="k">const</span> <span class="n">vec2</span> <span class="n">gravity</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">9.8</span><span class="n">f</span><span class="p">);</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">coeff_k</span> <span class="o">=</span> <span class="mf">200.0</span><span class="n">f</span><span class="p">;</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">coeff_d</span> <span class="o">=</span> <span class="mf">5.0</span><span class="n">f</span><span class="p">;</span>

			<span class="c1">// vel update</span>
			<span class="kt">float</span> <span class="n">distance</span><span class="p">;</span>
			<span class="n">vec2</span> <span class="n">direction</span><span class="p">;</span>
			<span class="n">vec2</span> <span class="n">rel_vel</span><span class="p">;</span>
			<span class="n">vec2</span> <span class="n">spring_force</span><span class="p">;</span>
			<span class="n">vec2</span> <span class="n">total_spring_force</span><span class="p">;</span>
			<span class="n">vec2</span> <span class="n">accel</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">me</span><span class="p">,</span> <span class="n">myDirectParent</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="n">total_spring_force</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
					<span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
							<span class="k">continue</span><span class="p">;</span>
						<span class="k">else</span>
						<span class="p">{</span>
							<span class="n">me</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>

							<span class="n">flag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
							<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="c1">// 형제 2개</span>
							<span class="p">{</span>
								<span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
								<span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span>
								<span class="n">rel_vel</span> <span class="o">=</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span><span class="p">;</span>
								<span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span> <span class="o">+</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="n">rel_vel</span><span class="p">.</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span><span class="p">;</span>
								<span class="k">if</span><span class="p">(</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">me</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">!=</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
									<span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">-=</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mass</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
								
								<span class="n">total_spring_force</span> <span class="o">+=</span> <span class="n">spring_force</span><span class="p">;</span>

								<span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
					<span class="p">{</span>
						<span class="n">me</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>
						<span class="n">myDirectParent</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>

						<span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
							<span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
						<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
							<span class="n">flag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

						<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="c1">// 부모 2개</span>
						<span class="p">{</span>
							<span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">*</span> <span class="n">k</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
							<span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">*</span> <span class="n">k</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span>
							<span class="n">rel_vel</span> <span class="o">=</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">*</span> <span class="n">k</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span><span class="p">;</span>
							<span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span> <span class="o">+</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="n">rel_vel</span><span class="p">.</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span><span class="p">;</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">*</span> <span class="n">k</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">*</span> <span class="n">k</span> <span class="o">!=</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
								<span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">*</span> <span class="n">k</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">-=</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">*</span> <span class="n">k</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mass</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>

							<span class="n">total_spring_force</span> <span class="o">+=</span> <span class="n">spring_force</span><span class="p">;</span>
						<span class="p">}</span>
						<span class="p">{</span>	<span class="c1">// 형제 1개</span>
							<span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
							<span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span>
							<span class="n">rel_vel</span> <span class="o">=</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span><span class="p">;</span>
							<span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span> <span class="o">+</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="n">rel_vel</span><span class="p">.</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span><span class="p">;</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">me</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">!=</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
								<span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">-=</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mass</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>

							<span class="n">total_spring_force</span> <span class="o">+=</span> <span class="n">spring_force</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="k">else</span>
					<span class="p">{</span>
						<span class="n">me</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>
						<span class="n">myDirectParent</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>

						<span class="n">flag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
						<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="c1">// 부모 3개</span>
						<span class="p">{</span>
							<span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
							<span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span>
							<span class="n">rel_vel</span> <span class="o">=</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">-</span> <span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span><span class="p">;</span>
							<span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span> <span class="o">+</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="n">rel_vel</span><span class="p">.</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span><span class="p">;</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span>  <span class="o">!=</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
								<span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">-=</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">circles</span><span class="p">[</span><span class="n">myDirectParent</span> <span class="o">+</span> <span class="n">flag</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mass</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>

							<span class="n">total_spring_force</span> <span class="o">+=</span> <span class="n">spring_force</span><span class="p">;</span>
							
							<span class="n">flag</span><span class="o">++</span><span class="p">;</span>
						<span class="p">}</span>
						<span class="n">flag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
					<span class="p">}</span>
					<span class="n">accel</span> <span class="o">=</span> <span class="n">gravity</span> <span class="o">+</span> <span class="n">total_spring_force</span> <span class="o">/</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mass</span><span class="p">;</span>
					<span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">+=</span> <span class="n">accel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
		
			<span class="c1">// update positions</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span> <span class="o">*</span> <span class="n">col</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
				<span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>

			<span class="c1">// draw</span>
			<span class="n">drawWall</span><span class="p">();</span>

			<span class="c1">// draw spring</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>	
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
					<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">gray</span><span class="p">,</span> <span class="n">circles</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">,</span> <span class="n">Colors</span><span class="o">::</span><span class="n">gray</span><span class="p">,</span> <span class="n">circles</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">);</span>
			
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
					<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">gray</span><span class="p">,</span> <span class="n">circles</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">,</span> <span class="n">Colors</span><span class="o">::</span><span class="n">gray</span><span class="p">,</span> <span class="n">circles</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">);</span>

			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">gray</span><span class="p">,</span> <span class="n">circles</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">,</span> <span class="n">Colors</span><span class="o">::</span><span class="n">gray</span><span class="p">,</span> <span class="n">circles</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">);</span>
					<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">gray</span><span class="p">,</span> <span class="n">circles</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">,</span> <span class="n">Colors</span><span class="o">::</span><span class="n">gray</span><span class="p">,</span> <span class="n">circles</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">col</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">);</span>
				<span class="p">}</span>				

			<span class="c1">// draw circles</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span> <span class="o">*</span> <span class="n">col</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
				<span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span>

			<span class="c1">// reset button</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">isKeyPressedAndReleased</span><span class="p">(</span><span class="n">GLFW_KEY_R</span><span class="p">))</span>
			<span class="p">{</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span> <span class="o">*</span> <span class="n">col</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
					<span class="k">delete</span> <span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
				<span class="n">circles</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
				<span class="n">reset</span><span class="p">();</span>
			<span class="p">}</span>
		<span class="p">}</span>

	<span class="p">};</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">jm</span><span class="o">::</span><span class="n">Example</span><span class="p">().</span><span class="n">run</span><span class="p">();</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>각 🔵의 부모 질점과 형제 질점과의 스프링 힘을 <code class="language-plaintext highlighter-rouge">total_spring_force</code> 에 합해 나간다.</p>
</blockquote>

<ul>
  <li><em>if(i != 0)</em>
    <ul>
      <li>첫번째 줄</li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>*if (j == 0</td>
              <td> </td>
              <td>j == col - 1)*</td>
            </tr>
          </tbody>
        </table>
        <ul>
          <li>양 옆 끝</li>
          <li><strong>고정된 🟡가 있는 곳</strong></li>
          <li><em>continue</em> 속도를 업뎃 하지 않는다.</li>
        </ul>
      </li>
      <li><em>else</em>
        <ul>
          <li><strong>고정된 🟡가 아닌 것들은 다 🔵</strong></li>
          <li>양 옆 <code class="language-plaintext highlighter-rouge">형제🔵🔵2개</code> 질점과의 스프링 힘 계산</li>
          <li>첫번째 줄의 🔵들은 부모 없고 형제만 2개</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>*else if (j == 0</td>
          <td> </td>
          <td>j == col - 1)*</td>
        </tr>
      </tbody>
    </table>
    <ul>
      <li>첫번째 줄 제외한 그 모든 줄에서의 양 옆 끝</li>
      <li><code class="language-plaintext highlighter-rouge">부모🔵🔵2개</code>, <code class="language-plaintext highlighter-rouge">형제🔵1개</code></li>
    </ul>
  </li>
  <li><em>else</em>
    <ul>
      <li>첫번째 줄도 아니고 양 옆 끝도 아닌 경우</li>
      <li><code class="language-plaintext highlighter-rouge">부모🔵🔵🔵3개</code>, <code class="language-plaintext highlighter-rouge">형제🔵🔵2개</code></li>
    </ul>
  </li>
  <li>가속도와 속도 업데이트
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">accel</span> <span class="o">=</span> <span class="n">gravity</span> <span class="o">+</span> <span class="n">total_spring_force</span> <span class="o">/</span> <span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mass</span><span class="p">;</span>
<span class="n">circles</span><span class="p">[</span><span class="n">me</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">vel</span> <span class="o">+=</span> <span class="n">accel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET