I" <p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-12-가상-함수들--가상-함수표">chapter 12. 가상 함수들 : 가상 함수표</h1>

<h2 id="-가상-함수표">🔔 가상 함수표</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">virtual</code> 가상 함수가 선언되면 <u>가상 함수 표를 만들고 동적 바인딩 한다.</u></p>
</blockquote>

<ul>
  <li>클래스는 <code class="language-plaintext highlighter-rouge">가상함수표</code>에 대한 포인터를 갖게 된다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/87164674-033f7f80-c304-11ea-98d9-3a9d5a297e69.png" alt="image" width="70%" height="70%" class="align-center" /></p>

<ul>
  <li>Base 클래스에서 <em>fun1(), fun2()</em> 이렇게 가상 함수 2 개가 선언되있다.
    <ul>
      <li>이런 상태에서 <strong>Base 타입의 객체를 생성하면</strong> 그와 동시에 <u>가상 함수표</u>와 이 <u>가상 함수표의 포인터</u>가 생성된다.
        <ol>
          <li>가상 함수 포인터 <code class="language-plaintext highlighter-rouge">*_vptr</code> 를 보고 <u>가상 함수표를 찾아간다.</u></li>
          <li>가상 함수표에서 가상 함수인 <em>fun1</em>, <em>fun2</em>의 포인터를 받아 온서 돌아온다.</li>
          <li>받아 온 주소를 통해 <em>fun1</em>, <em>fun2</em> 를 실행한다.</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/87166068-fc197100-c305-11ea-9866-dedd55f7523c.png" alt="image" width="70%" height="70%" class="align-center" /></p>

<ul>
  <li>Derived 클래스에도 그대로 <u>가상함수표의 포인터가 상속된다.</u>
    <ol>
      <li>상속 받은 가상 함수 포인터 <code class="language-plaintext highlighter-rouge">*_vptr</code> 를 보고 <u>가상 함수표를 찾아간다.</u></li>
      <li>가상 함수표에서 가상 함수인 Base 클래스의 <em>fun1</em>, <em>fun2</em>의 포인터를 받아 온서 돌아온다.</li>
      <li><em>fun1</em> 은 오버라이딩이 되어 있으므로 포인터를 통해 찾아가지 않고 본인이 오버라이딩 한 <em>fun1</em>을 실행하고 <em>fun2</em> 은 가상 함수표에서 찾아 온 Base의 <em>fun2</em>주소를 보고 <em>fun2</em>를 실행한다.</li>
    </ol>
  </li>
</ul>

<h3 id="클래스의-크기-비교">클래스의 크기 비교</h3>

<blockquote>
  <p>가상 함수를 가지는 클래스는 <u>가상 함수 포인터를 추가로 가지기 때문에 클래스 용량이 더 크다</u></p>
</blockquote>

<h4 id="가상-함수를-가지고-있지-않을-때">가상 함수를 가지고 있지 않을 때</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Base</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">fun1</span><span class="p">()</span> <span class="p">{};</span>
    <span class="kt">void</span> <span class="n">fun2</span><span class="p">()</span> <span class="p">{};</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
<span class="p">{</span>

<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

1
1
</code></pre></div></div>

<h4 id="가상-함수를-가지고-있을-때">가상 함수를 가지고 있을 때</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Base</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">fun1</span><span class="p">()</span> <span class="p">{};</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">fun2</span><span class="p">()</span> <span class="p">{};</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
<span class="p">{</span>

<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

4
4
</code></pre></div></div>

<ul>
  <li>Base는 가상 함수를 가지므로 가상 함수 포인터를 가지고 있다.
    <ul>
      <li>따라서 가상 함수 포인터 때문에 가상 함수를 가지지 않았을 때보다 크기가 더 커졌다.</li>
    </ul>
  </li>
  <li>Derived는 Base로부터 가상 함수 포인터를 상속받기 때문에 얘도 똑같이 크기가 더 커졌다.</li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET