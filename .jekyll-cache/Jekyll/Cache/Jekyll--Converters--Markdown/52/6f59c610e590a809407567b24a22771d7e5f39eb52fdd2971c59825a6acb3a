I"l<p class="notice--warning">인프런에 있는 이재환님의 강의 <strong>게임 디자인 패턴 with Unity</strong> 를 듣고 정리한 필기입니다. 😀</p>

<h1 id="chapter-4-simple-factory-pattern">Chapter 4. Simple Factory Pattern</h1>

<h2 id="-factory-pattern">🔔 Factory Pattern</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Factory</code> : 객체 생성을 처리하는 <u>클래스</u></li>
  <li><code class="language-plaintext highlighter-rouge">Factory Pattern</code> : 객체를 생성하고자 할 때 사용하는 패턴
    <ul>
      <li>종류
        <ol>
          <li><strong>Simple Factory Pattern</strong>
            <ul>
              <li>팩토리 패턴의 가장 기본이 된다.</li>
              <li>OOP 에서 늘상 사용되기 때문에 패턴이라고 하기도 뭐하지만 팩토리 메서드와 추상 팩토리 패턴의 가장 기본이 되기 때문에 확실히 짚고 넘어가야 한다.</li>
              <li>
                <blockquote>
                  <p>주어진 입력을 기반으로 <u>다른 유형의 객체를 리턴하는 메소드가 있는 팩토리 클래스</u></p>
                </blockquote>
              </li>
            </ul>
          </li>
          <li><strong>Factory Method Pattern</strong></li>
          <li><strong>Abstract Factory Pattern</strong></li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>⭐<u>하나의 클래스로 여러가지 타입의 객체(자식)를 찍어내어 리턴하는 함수를 가진 하나의 공장(부모클래스)</u>를 만든다. <code class="language-plaintext highlighter-rouge">다형성</code></p>
</blockquote>

<blockquote>
  <p>여러개의 자식 오브젝트들을 <u>하나의 함수로 쉽게 한방에 생성하기 위해</u> 사용하는 패턴</p>
</blockquote>

<ul>
  <li>객체 생성을 한군데에서만 관리할 수 있따는 장점이 있다.
    <ul>
      <li>여러 자식 타입들에게서 중복되는 내용을 제거할 수 있음.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-예제-1">🔔 예제 1</h2>

<h3 id="구조">구조</h3>

<ul>
  <li><strong>📜Unit</strong> 추상 클래스
    <ul>
      <li><strong>📜Marine</strong> <em>상속</em>
        <ul>
          <li>move() 오버라이딩</li>
        </ul>
      </li>
      <li><strong>📜Firebat</strong> <em>상속</em>
        <ul>
          <li>move() 오버라이딩</li>
        </ul>
      </li>
      <li><strong>📜Medic</strong> <em>상속</em>
        <ul>
          <li>move() 오버라이딩</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>📜Factory</strong>
    <ul>
      <li>📜Unit의 <u>세 자식 타입들을 한번에 찍어내어 리턴해주는 함수</u> <code class="language-plaintext highlighter-rouge">createUnit</code>를 가지고 있다.</li>
      <li><u>팩토리 클래스</u>가 됨</li>
    </ul>
  </li>
  <li>📜FactoryUse.cs
    <ul>
      <li>유니티 Start() 함수에서 실제로 📜Factory를 사용하여 <code class="language-plaintext highlighter-rouge">createUnit</code>함수를 호출해 3개의 Unit을 찍어낸다.</li>
      <li>각 유닛의 move()를 실행시킨다.</li>
    </ul>
  </li>
</ul>

<h3 id="unitcs">📜Unit.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Unit</span>
<span class="p">{</span>
	<span class="k">public</span> <span class="k">abstract</span> <span class="k">void</span> <span class="nf">move</span> <span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Marine</span> <span class="p">:</span> <span class="n">Unit</span> <span class="p">{</span>

    <span class="k">public</span> <span class="nf">Marine</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Marine 생성 !!!"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">move</span> <span class="p">()</span>
	<span class="p">{</span>
		<span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span> <span class="p">(</span><span class="s">"Marine 이동 !!!"</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Firebat</span> <span class="p">:</span> <span class="n">Unit</span> <span class="p">{</span>

    <span class="k">public</span> <span class="nf">Firebat</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Firebat 생성 !!!"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">move</span> <span class="p">()</span>
	<span class="p">{</span>
		<span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span> <span class="p">(</span><span class="s">"Firebat 이동 !!!"</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Medic</span> <span class="p">:</span> <span class="n">Unit</span> <span class="p">{</span>

    <span class="k">public</span> <span class="nf">Medic</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Medic 생성 !!!"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">move</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Medic 이동 !!!"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="factorycs">📜Factory.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">enum</span> <span class="n">UnitType</span>
<span class="p">{</span>
	<span class="n">Marine</span><span class="p">,</span>
	<span class="n">Firebat</span><span class="p">,</span>
	<span class="n">Medic</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UnitFactory</span>
<span class="p">{</span>
	<span class="k">public</span> <span class="k">static</span> <span class="n">Unit</span> <span class="nf">createUnit</span><span class="p">(</span><span class="n">UnitType</span> <span class="n">type</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Unit</span> <span class="n">unit</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

		<span class="k">switch</span> <span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="n">UnitType</span><span class="p">.</span><span class="n">Marine</span><span class="p">:</span>
                <span class="n">unit</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Marine</span><span class="p">();</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">UnitType</span><span class="p">.</span><span class="n">Firebat</span><span class="p">:</span>
                <span class="n">unit</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Firebat</span><span class="p">();</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">UnitType</span><span class="p">.</span><span class="n">Medic</span><span class="p">:</span>
                <span class="n">unit</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Medic</span><span class="p">();</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">unit</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>부모인 Unit 타입의 <code class="language-plaintext highlighter-rouge">unit</code>에 3 개의 자식 타입들을 참조하여 <code class="language-plaintext highlighter-rouge">unit</code>을 리턴하는 static 함수다. 즉, <u>인수로 들어온 유닛을 생성하고 리턴해주는 공장과도 같은 역할을 한다.</u></p>

<h3 id="factoryusecs">📜FactoryUse.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">FactoryUse</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>

	<span class="k">void</span> <span class="nf">Start</span> <span class="p">()</span> <span class="p">{</span>

		<span class="n">Unit</span> <span class="n">unit1</span> <span class="p">=</span> <span class="n">UnitFactory</span><span class="p">.</span><span class="nf">createUnit</span><span class="p">(</span><span class="n">UnitType</span><span class="p">.</span><span class="n">Marine</span><span class="p">);</span>
        <span class="n">Unit</span> <span class="n">unit2</span> <span class="p">=</span> <span class="n">UnitFactory</span><span class="p">.</span><span class="nf">createUnit</span><span class="p">(</span><span class="n">UnitType</span><span class="p">.</span><span class="n">Firebat</span><span class="p">);</span>
        <span class="n">Unit</span> <span class="n">unit3</span> <span class="p">=</span> <span class="n">UnitFactory</span><span class="p">.</span><span class="nf">createUnit</span><span class="p">(</span><span class="n">UnitType</span><span class="p">.</span><span class="n">Medic</span><span class="p">);</span>

        <span class="n">unit1</span><span class="p">.</span><span class="nf">move</span><span class="p">();</span>
        <span class="n">unit2</span><span class="p">.</span><span class="nf">move</span><span class="p">();</span>
        <span class="n">unit3</span><span class="p">.</span><span class="nf">move</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>static 함수이므로 클래스 이름으로 바로 접근
    <ul>
      <li><strong>UnitFactory.createUnit(UnitType.Marine)</strong></li>
    </ul>
  </li>
  <li>부모 타입으로 자식을 참조
    <ul>
      <li><strong>Unit unit2 = UnitFactory.createUnit(UnitType.Firebat)</strong></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">createUnit</code>으로부터 리턴받은 자식 객체로 move()를 호출한다.
    <ul>
      <li>move() 함수는 추상 함수이므로 자식들이 반드시 오버라이딩 해야 하며 부모인 <code class="language-plaintext highlighter-rouge">Unit</code> 타입으로 자식 객체를 참조해도 자식이 오버라이딩한 move()가 호출된다.</li>
      <li>각각 메딕, 파이어뱃, 마린의 move()가 호출됨
        <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unit1</span><span class="p">.</span><span class="nf">move</span><span class="p">();</span>
<span class="n">unit2</span><span class="p">.</span><span class="nf">move</span><span class="p">();</span>
<span class="n">unit3</span><span class="p">.</span><span class="nf">move</span><span class="p">();</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-예제-2">🔔 예제 2</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Unit</code>을 상속 받는 <code class="language-plaintext highlighter-rouge">Firebat</code>과 <code class="language-plaintext highlighter-rouge">Marine</code> 프리팹을 팩토리 패턴을 사용하여 게임 도중에 실시간으로 생성해보자.</p>
</blockquote>

<h3 id="구조-1">구조</h3>

<ul>
  <li><strong>📜Unit</strong> 추상 클래스
    <ul>
      <li><strong>📜Marine</strong> <em>상속</em>
        <ul>
          <li>move() 오버라이딩</li>
        </ul>
      </li>
      <li><strong>📜Firebat</strong> <em>상속</em>
        <ul>
          <li>move() 오버라이딩</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>📜Factory</strong>
    <ul>
      <li>📜Unit의 <u>세 자식 타입들을 한번에 찍어내어 리턴해주는 static 함수</u> <code class="language-plaintext highlighter-rouge">createUnit</code>를 가지고 있다.</li>
      <li><u>팩토리 클래스</u>가 됨</li>
    </ul>
  </li>
  <li>📜FactoryUse.cs
    <ul>
      <li>유니티 Start() 함수에서 실제로 📜Factory를 사용하여 <code class="language-plaintext highlighter-rouge">createUnit</code>함수를 호출해 3개의 Unit을 찍어낸다.</li>
      <li>각 유닛의 move()를 실행시킨다.</li>
    </ul>
  </li>
</ul>

<h3 id="unitcs-1">📜Unit.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Unit</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
	<span class="k">public</span> <span class="k">abstract</span> <span class="k">void</span> <span class="nf">Move</span> <span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="marinecs">📜Marine.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Marine</span> <span class="p">:</span> <span class="n">Unit</span> <span class="p">{</span>

    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Marine 생성 !!!"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Move</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Marine 이동 !!!"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="firebatcs">📜Firebat.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Firebat</span> <span class="p">:</span> <span class="n">Unit</span> <span class="p">{</span>

    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Firebat 생성 !!!"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Move</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Firebat 이동 !!!"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="factorycs-1">📜Factory.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">enum</span> <span class="n">UnitType</span>
<span class="p">{</span>
	<span class="n">Marine</span><span class="p">,</span>
	<span class="n">Firebat</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Factory</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">GameObject</span> <span class="n">marine</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">GameObject</span> <span class="n">firebat</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">GameObject</span> <span class="nf">createUnit</span><span class="p">(</span><span class="n">UnitType</span> <span class="n">type</span><span class="p">)</span>
	<span class="p">{</span>
        <span class="c1">//Unit unit = null;</span>
        <span class="n">GameObject</span> <span class="n">unit</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

        <span class="kt">float</span> <span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">Random</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">6</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">z</span> <span class="p">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">Random</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">6</span><span class="p">);</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="n">UnitType</span><span class="p">.</span><span class="n">Marine</span><span class="p">:</span>
                <span class="c1">//unit = new Marine();</span>
                <span class="n">unit</span> <span class="p">=</span> <span class="nf">Instantiate</span><span class="p">(</span><span class="n">marine</span><span class="p">,</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">,</span> <span class="n">z</span><span class="p">),</span> <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">UnitType</span><span class="p">.</span><span class="n">Firebat</span><span class="p">:</span>
                <span class="c1">//unit = new Firebat();</span>
                <span class="n">unit</span> <span class="p">=</span> <span class="nf">Instantiate</span><span class="p">(</span><span class="n">firebat</span><span class="p">,</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="m">0.5f</span><span class="p">,</span> <span class="n">z</span><span class="p">),</span> <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">unit</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>marine, firebat에 각각 프리팹을 연결해준다.</li>
  <li>부모인 Unit 타입의 <code class="language-plaintext highlighter-rouge">unit</code>에 자식들 타입들을 참조하여 <code class="language-plaintext highlighter-rouge">unit</code>을 리턴하는 함수다. 즉, <u>인수로 들어온 유닛을 생성하고 리턴해주는 공장과도 같은 역할을 한다.</u>
    <ul>
      <li>각 자식들의 프리팹을 x,z 랜덤한 위치에 Instantiate 하고</li>
      <li>이를 리턴한다.</li>
    </ul>
  </li>
</ul>

<h3 id="factoryusecs-1">📜FactoryUse.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">FactoryUse</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>

    <span class="n">Factory</span> <span class="n">factory</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="n">GameObject</span> <span class="n">unit1</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="n">GameObject</span> <span class="n">unit2</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="n">GameObject</span> <span class="n">unit3</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">void</span> <span class="nf">Start</span> <span class="p">()</span> <span class="p">{</span>
        <span class="n">factory</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Factory</span><span class="p">&gt;();</span>

        <span class="n">unit1</span> <span class="p">=</span> <span class="n">factory</span><span class="p">.</span><span class="nf">createUnit</span><span class="p">(</span><span class="n">UnitType</span><span class="p">.</span><span class="n">Marine</span><span class="p">);</span>
        <span class="n">unit2</span> <span class="p">=</span> <span class="n">factory</span><span class="p">.</span><span class="nf">createUnit</span><span class="p">(</span><span class="n">UnitType</span><span class="p">.</span><span class="n">Firebat</span><span class="p">);</span>
        <span class="n">unit3</span> <span class="p">=</span> <span class="n">factory</span><span class="p">.</span><span class="nf">createUnit</span><span class="p">(</span><span class="n">UnitType</span><span class="p">.</span><span class="n">Firebat</span><span class="p">);</span>

        <span class="nf">StartCoroutine</span><span class="p">(</span><span class="s">"UnitAction"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">IEnumerator</span> <span class="nf">UnitAction</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForSeconds</span><span class="p">(</span><span class="m">0.2f</span><span class="p">);</span>

        <span class="c1">// 추상클래스 Unit을 이용하여 Marine, Firebat의 구분없이</span>
        <span class="c1">// 접근하여 사용할 수 있다.</span>
        <span class="n">unit1</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;().</span><span class="nf">Move</span><span class="p">();</span>
        <span class="n">unit2</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;().</span><span class="nf">Move</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>부모 타입으로 자식을 참조
    <ul>
      <li><strong>Unit unit2 = UnitFactory.createUnit(UnitType.Firebat)</strong></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">createUnit</code>으로부터 리턴받은 자식 객체로 move()를 호출한다.
    <ul>
      <li>move() 함수는 추상 함수이므로 자식들이 반드시 오버라이딩 해야 하며 부모인 <code class="language-plaintext highlighter-rouge">Unit</code> 타입으로 자식 객체를 참조해도 자식이 오버라이딩한 move()가 호출된다.</li>
      <li>각각 파이어뱃, 마린의 move()가 호출됨</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET