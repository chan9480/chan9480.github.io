I"p3<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-9-연산자-오버로딩--단항-연산자-오버로딩">chapter 9. 연산자 오버로딩 : 단항 연산자 오버로딩</h1>

<blockquote>
  <p>단항 연산자 : <code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">!</code></p>
</blockquote>

<p>추가적인 설명은 이전 포스트인 <a href="https://ansohxxn.github.io/cpp/chapter9-1/">9.1 연산자 오버로딩 시작하기</a> 참고하기</p>

<h2 id="-전역-함수로-구현하기">🔔 전역 함수로 구현하기</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">private</code>멤버를 자유롭게 사용하려면 <code class="language-plaintext highlighter-rouge">friend</code> 지정해주기</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Cents</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_cents</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">Cents</span><span class="p">(</span><span class="kt">int</span> <span class="n">cents</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">m_cents</span> <span class="o">=</span> <span class="n">cents</span><span class="p">;</span> <span class="p">}</span>

	<span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">Cents</span> <span class="o">&amp;</span><span class="n">cents</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">cents</span><span class="p">.</span><span class="n">m_cents</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">out</span><span class="p">;</span>
	<span class="p">}</span>

    <span class="k">friend</span> <span class="n">Cents</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="k">const</span> <span class="n">Cents</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span> <span class="c1">// 👈 `-` 연산자 오버로딩 friend 지정👈</span>
    <span class="p">{</span>
	    <span class="k">return</span> <span class="n">Cents</span><span class="p">(</span><span class="o">-</span><span class="n">c</span><span class="p">.</span><span class="n">m_cents</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Cents</span> <span class="n">cents1</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cents1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>   <span class="c1">// 6 출력 </span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="n">cents1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// -6 출력</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="n">Cents</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 10 출력  (익명 객체)</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cents1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>   <span class="c1">// 6 출력 </span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">-</code> 연산자를 오버로딩 하였다.</p>
</blockquote>

<ul>
  <li>단항 연산자는 피연산자를 1개 필요로 한다.
    <ul>
      <li><strong>전역 함수</strong>로 구현하니 <u>인수 1개를 받아야 한다.</u></li>
    </ul>
  </li>
  <li>구현한 <code class="language-plaintext highlighter-rouge">-</code>연산자 오버로딩은 Cents 타입의 멤버변수 <em>m_data</em>에 <code class="language-plaintext highlighter-rouge">-</code>를 붙여 이 멤버 값을 가진 Cents 타입의 객체를 리턴하고 있다.</li>
  <li>출력 연산자 오버로딩이 되어 있으므로 그냥 <em>cout « cents1</em> 만 해주어도 해당 객체의 <em>m_data</em> 값이 출력된다.</li>
  <li><em>return Cents(-c.m_cents);</em> 금방 사라질 Cents 타입의 익명 객체를 리턴한 것일 뿐이다.
    <ul>
      <li>연산 후 <em>cents1</em>의 멤버 값에는 변화가 없다.</li>
    </ul>
  </li>
  <li>전역 함수이므로 뒤에 const가 붙을 수 없다. <a href="https://ansohxxn.github.io/cpp/chapter8-9/#const%EA%B0%80-%EB%B6%99%EC%9D%80-%EB%A9%A4%EB%B2%84-%ED%95%A8%EC%88%98%EB%A7%8C-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5">참고 포스트</a>
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Cents</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="k">const</span> <span class="n">Cents</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span> <span class="k">const</span> <span class="c1">// 👈 💥에러💥</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">Cents</span><span class="p">(</span><span class="o">-</span><span class="n">c</span><span class="p">.</span><span class="n">m_cents</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="-멤버-함수로-구현하기">🔔 멤버 함수로 구현하기</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Cents</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_cents</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">Cents</span><span class="p">(</span><span class="kt">int</span> <span class="n">cents</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">m_cents</span> <span class="o">=</span> <span class="n">cents</span><span class="p">;</span> <span class="p">}</span>
	<span class="kt">int</span> <span class="n">getCents</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_cents</span><span class="p">;</span> <span class="p">}</span>
	<span class="kt">int</span><span class="o">&amp;</span> <span class="n">getCetns</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_cents</span><span class="p">;</span> <span class="p">}</span>

	<span class="kt">bool</span> <span class="k">operator</span> <span class="o">!</span> <span class="p">()</span> <span class="k">const</span>  
	<span class="p">{</span>
		<span class="k">return</span> <span class="p">(</span><span class="n">m_cents</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nb">true</span> <span class="o">:</span> <span class="nb">false</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">Cents</span> <span class="o">&amp;</span><span class="n">cents</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">cents</span><span class="p">.</span><span class="n">m_cents</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">out</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Cents</span> <span class="n">cents2</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">!</span><span class="n">cents2</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 1 출력 (m_cents가 0이라 true니까!)</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="k">operator</span> <span class="o">!</span> <span class="p">()</span> <span class="k">const</span>  
<span class="p">{</span>
	<span class="k">return</span> <span class="p">(</span><span class="n">m_cents</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nb">true</span> <span class="o">:</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">!</code> 연산자를 오버로딩 하였다.</p>
</blockquote>

<ul>
  <li>단항 연산자는 피연산자를 1개 필요로 한다.
    <ul>
      <li><strong>멤버 함수</strong>로 구현하니 <strong><u>인수를 받을 필요가 없다.</u></strong>
        <ul>
          <li><u>호출하는 자기 자신(Cents타입 객체)이 곧 피연산자가 되기 때문</u></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>구현한 <code class="language-plaintext highlighter-rouge">-</code>연산자 오버로딩은 Cents 타입의 멤버변수 <em>m_data</em>에 <code class="language-plaintext highlighter-rouge">-</code>를 붙여 이 멤버 값을 가진 Cents 타입의 객체를 리턴하고 있다.</li>
  <li>뒤에 <code class="language-plaintext highlighter-rouge">const</code>를 붙여 멤버 값을 변경시키지 않겠다는 뜻을 내비추고 있다!
    <ul>
      <li><a href="https://ansohxxn.github.io/cpp/chapter8-9/#const%EA%B0%80-%EB%B6%99%EC%9D%80-%EB%A9%A4%EB%B2%84-%ED%95%A8%EC%88%98%EB%A7%8C-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5">참고 포스트</a>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">const</code>객체는 <code class="language-plaintext highlighter-rouge">const</code>가 붙은 멤버 함수<strong>만</strong> 호출할 수 있고</li>
          <li>일반 객체는 그런거 상관 없이 <code class="language-plaintext highlighter-rouge">const</code>가 붙은 멤버 함수<strong>도</strong> 호출할 수 있다.</li>
          <li>뒤에 <code class="language-plaintext highlighter-rouge">const</code>가 붙을 수 있는건 멤버 함수만 가능하다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>

<p><br /></p>
:ET