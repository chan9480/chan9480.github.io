I")L<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h2 id="정적변수-static">정적변수 <code class="language-plaintext highlighter-rouge">static</code></h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">doSomething</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">static</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="o">++</span><span class="n">a</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">doSomething</span><span class="p">();</span> <span class="c1">// 2 출력,첫 호출! 이 때 a의 초기화가 1로 처음이자 마지막으로 이루어진다. </span>
	<span class="n">doSomething</span><span class="p">();</span> <span class="c1">// 3 출력</span>
	<span class="n">doSomething</span><span class="p">();</span> <span class="c1">// 4 출력</span>
	<span class="n">doSomething</span><span class="p">();</span> <span class="c1">// 5 출력</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="정적-변수-static-변수의-특징">정적 변수 <code class="language-plaintext highlighter-rouge">static</code> 변수의 특징</h3>

<ol>
  <li>초기화는 처음 호출될 때 <em>딱 한번</em> 만 한다.
    <ul>
      <li>초기화를 반드시 해주어야한다.
        <ul>
          <li>static int a;  ← 에러</li>
        </ul>
      </li>
      <li>처음 호출되는 doSomething() 에서 <code class="language-plaintext highlighter-rouge">a</code> 가 처음이나 마지막으로 딱 한번 초기화 된다.
        <ul>
          <li>static int a = 1;</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>But <code class="language-plaintext highlighter-rouge">static</code> 변수의 데이터 값은 메모리에 유지된다. 값이 유지됨.
    <ul>
      <li>떄문에 OS로부터 받은 메모리가 <code class="language-plaintext highlighter-rouge">정적</code> 이라는 뜻</li>
      <li><code class="language-plaintext highlighter-rouge">a</code> 가 <code class="language-plaintext highlighter-rouge">static</code> 변수가 아니였다면 
 doSomething 호출시마다 새롭게 1로 초기화되 매번 1 출력했을 것.</li>
      <li><code class="language-plaintext highlighter-rouge">a</code> 값이 유지 되기 떄문에 doSomething 호출시마다 2, 3, 4, 5, . . . 가 출력되는 것이다.</li>
    </ul>
  </li>
  <li>해당 블록 안에서만 사용이 가능하다. (지역변수)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">static</code> 변수인 <code class="language-plaintext highlighter-rouge">a</code> 는 doSomething() 호출시에만 사용된다.
        <ul>
          <li>doSomething 블록내에 있으니까 !</li>
        </ul>
      </li>
      <li>이것이 <code class="language-plaintext highlighter-rouge">전역변수</code>와의 차이점 !
        <ul>
          <li><code class="language-plaintext highlighter-rouge">전역 변수</code>는 코드 내의 모든곳, 심지어 다른 파일에서도 사용될 수 있다.</li>
          <li><code class="language-plaintext highlighter-rouge">static 변수</code>는 메모리 값이 유지된다는 면에서 전역 변수와 비슷하지만
  지역변수로서 해당 블록에서만 사용이 가능하다.</li>
          <li>cf) 다른파일과의 linking 단계에서 지역변수를 고려할 필요 X
            <ul>
              <li>해당 파일 내의 블록 내에서만 쓰이니까.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h2 id="전역-변수">전역 변수</h2>
<ul>
  <li>main 함수 밖에서 선언된,</li>
  <li>어떤 <code class="language-plaintext highlighter-rouge">{ }</code> 중괄호 안에서도 귀속되있지 않는 변수</li>
  <li>지속 기간이 없다. 프로그램 종료 때 사라짐.</li>
  <li>웬만해서 최소한으로 쓰는 것을 추천한다.</li>
</ul>

<h3 id="전역-변수의-종류">전역 변수의 종류</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">static</code> 붙은 전역변수 → 이 cpp 파일 내에서만 사용 가능</li>
  <li><code class="language-plaintext highlighter-rouge">extern</code> 붙은 전역변수 → 다른 파일에서도 사용이 가능함과 동시에 메모리 공유된다.
    <ul>
      <li>extern 생략 가능하다. <u>전역변수는 디폴트로 extern.</u>
        <ul>
          <li>디폴트로 전역변수, 전역함수는 다른 파일에서도 사용 가능</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="linking-링킹">linking 링킹</h3>
<ul>
  <li>include 한 다른 코드 파일과 연결하는 작업</li>
  <li>컴파일러가 <code class="language-plaintext highlighter-rouge">링킹</code>시 include 한 다른 코드 파일 전체를 <u>복사</u>해오는 식으로 작업함</li>
</ul>

<h3 id="extern">extern</h3>

<ul>
  <li><u>초기화 꼭 해주기</u>
    <ul>
      <li>extern int a;
        <ul>
          <li>이렇게 선언만 해놓으면 쓰레기값만 들어가 있는거니까 
  다른 파일에서 사용하려고 할때 이상한 값 나올 수도.</li>
          <li><u>여기선 선언만 하더라도 다른 파일에서라도 꼭 초기화 해주어야함!</u>
            <ul>
              <li>초기화는 꼭 주인 파일에서 해야한다는 법은 없고 한군데서만 꼭 하면 됨.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">extern</code> 으로 선언된 변수와 함수
    <ul>
      <li>이미 메모리에 할당되어있는 (초기화가 되있는) 다른 파일의 전역 변수와 <u>메모리를 공유하겠다고 선언할 때는 `extern` 키워드 생략 할 수 없다.</u></li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">aaa.h</code></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> 
</code></pre></div></div>
<ul>
  <li>extern 키워드 생략이 가능</li>
  <li><u>그냥 다른 파일에서 복사해서 쓰셔도 되요~ 라는 의미의 전역변수에는 extern 생략 가능</u>
    <ul>
      <li>내 파일에서만 사용 가능하다는 의미일땐 static 붙여야 하고</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">main.cpp</code></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "aaa.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 123 출력</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>aaa.h 의 전역변수 <code class="language-plaintext highlighter-rouge">a</code> 와 <u>메모리 공유를 할것이기 때문에</u> <code class="language-plaintext highlighter-rouge">extern</code> 으로 선언 !
    <ul>
      <li>이때의 <code class="language-plaintext highlighter-rouge">a</code> 는 aaa.h의 a를 뜻한다 !</li>
      <li>aaa.h 의 <code class="language-plaintext highlighter-rouge">a</code> 와 <u>메모리를 공유할 것이라고 선언하는 것 !</u>
        <ul>
          <li><u>이런 의도일땐 extern 생략 불가</u></li>
          <li>extern 안붙이고 <u>그냥 int a</u> 하면 이건 <u>aaa.h의 a와의 메모리 공유가 아닌 그냥 main.cpp에서의 새로운 int a 를 선언하는 것.</u></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">MyConstants . h</code></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="n">Constants</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="kt">double</span> <span class="n">pi</span><span class="p">(</span><span class="mf">3.141592</span><span class="p">);</span>
	<span class="k">const</span> <span class="kt">double</span> <span class="n">gravity</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">main . cpp</code></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "MyConstants.h"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">Constants</span><span class="o">::</span><span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>#include “MyConstants.h”
    <ul>
      <li>extern이 붙지 않은 상태
        <ul>
          <li>따라서 <code class="language-plaintext highlighter-rouge">main.cpp</code> 에서의 <code class="language-plaintext highlighter-rouge">Constants::pi</code> 와 <code class="language-plaintext highlighter-rouge">MyConstants.h</code> 에서의 <code class="language-plaintext highlighter-rouge">pi</code> 는 별개의 pi다.
            <ul>
              <li>메모리 공유 X</li>
              <li>즉, 이름만 같지 서로 다른 변수라는거다.</li>
              <li><u>MyConstants.h 에서 복사해온 것 뿐.</u></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>이런 경우, <code class="language-plaintext highlighter-rouge">Myconstants.h</code> 가 다른 곳에서  1000번 include 된다면 
<code class="language-plaintext highlighter-rouge">pi</code> 변수의 사본만 1000개 생기는거니 매우 메모리 낭비.</li>
  <li>값이 바뀔 위험이 업는 <code class="language-plaintext highlighter-rouge">const 전역 변수들</code>은 <u>extern을 붙여서 계속 복사되서 메모리 늘릴 필요 없이 메모리를 공유해서 쓰일 수 있도록 하는 것이 좋다.</u>  ⭐⭐</li>
</ul>

<p><br /></p>

<p>아래와 같이 <code class="language-plaintext highlighter-rouge">MyConstants.h</code>에 <code class="language-plaintext highlighter-rouge">extern</code>을 붙여준다면</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="n">Constants</span>
<span class="p">{</span>
	<span class="k">extern</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">pi</span><span class="p">(</span><span class="mf">3.141592</span><span class="p">);</span>
	<span class="k">extern</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">gravity</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><u>linking</u> 시에 컴파일러가 내부적으로
    <ul>
      <li><code class="language-plaintext highlighter-rouge">main.cpp</code> 에서 include 한 <code class="language-plaintext highlighter-rouge">Myconstants.h</code> 코드들을 복사사해온다.</li>
      <li>
        <p>눈엔 안보이지만 아래와 같이 되는 것</p>

        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">#include "MyConstants.h"
</span>
  <span class="k">namespace</span> <span class="n">Constants</span>
  <span class="p">{</span>
  	<span class="k">extern</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">pi</span><span class="p">(</span><span class="mf">3.141592</span><span class="p">);</span>
  	<span class="k">extern</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">gravity</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
  <span class="p">{</span>
  	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">Constants</span><span class="o">::</span><span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>이제 MyConstants.h 의 pi의 사본을 쓰는것이 아닌</li>
      <li>MyConstants.h 의 pi자체 메모리를 공유하게 된다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">MyConstants . h</code></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="n">Constants</span>
<span class="p">{</span>
	<span class="k">extern</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">pi</span><span class="p">;</span>
	<span class="k">extern</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">gravity</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MyConstants . cpp</code></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "MyConstants.h"
</span>
<span class="n">Constants</span><span class="o">::</span><span class="n">pi</span> <span class="o">=</span> <span class="mf">3.141592</span><span class="p">;</span>
<span class="n">Constants</span><span class="o">::</span><span class="n">gravity</span> <span class="o">=</span> <span class="mf">9.8</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>보통 이렇게 헤더파일에선 extern 변수를 선언만 하고</li>
  <li>초기화는 헤더 파일과 같은 이름의 cpp에서 해주는 것이 일반적.
    <ul>
      <li>MyConstants.cpp 에서 내부적으로 
  MyCOnstants.h 에서의 pi 와 공유하는 것을 뜻하는 extern const double pi; 가 복사되어 옴</li>
    </ul>
  </li>
  <li>MyConstants . cpp 에서 선언한게 아니고 대입하여 초기화 해준것임.</li>
</ul>

<p><br /></p>

<h3 id="정리">정리</h3>

<ul>
  <li><u>extern이 생략된</u> extern 전역변수
    <ul>
      <li>다른 파일에서 사본으로 씀. 별개의 메모리.</li>
    </ul>
  </li>
  <li><u>extern이 붙어있는</u> extern 전역변수
    <ul>
      <li>다른 파일에서도 이와 한 메모리를 공유. 동일한 메모리.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 초기화 X */</span>
<span class="kt">int</span> <span class="n">g_x</span><span class="p">;</span>  <span class="c1">// external. 다른 파일에서 사본으로 쓰인다. </span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">g_x</span><span class="p">;</span> <span class="c1">// internal. 다른 파일에서 쓰일 수 없다. 이 코드 내에서만 쓰일 수 있음</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">g_x</span><span class="p">;</span> <span class="c1">// external. 에러! const는 꼭 초기화를 해주어야함</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">g_z</span><span class="p">;</span> <span class="c1">// 이 파일을 include 하는 다른 파일에서 이 변수와 메모리를 공유하게 될 것.</span>
<span class="k">extern</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">g_z</span><span class="p">;</span> <span class="c1">// 에러 아님! 이 변수와 메모리를  공유하는 다른 파일에서 초기화 꼭 해주면 됨.</span>

<span class="cm">/* 초기화 O */</span>
<span class="kt">int</span> <span class="nf">g_y</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// external. </span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">g_y</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// internal. </span>
<span class="k">const</span> <span class="kt">int</span> <span class="nf">g_y</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// external. </span>
<span class="k">extern</span> <span class="kt">int</span> <span class="nf">g_w</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 이제 다른 파일에서 정의가 불가능하다. </span>
<span class="k">extern</span> <span class="k">const</span> <span class="kt">int</span> <span class="nf">g_w</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> 
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/42318591/102003297-c4957180-3d48-11eb-9898-7dddd538fdcd.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/102003301-d545e780-3d48-11eb-8667-25ef78d65ca6.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/102003306-e131a980-3d48-11eb-8ab7-f123c06d90ce.png" alt="image" /></p>

<p><em>2020.12.13</em></p>

<p>헤더에서 <code class="language-plaintext highlighter-rouge">extern</code> 변수 정의시 링킹 에러가 생겨 질문 주신 분께 내가 달았던 답변이다. 나도 기억이 안나 다시 공부를 한 후에 달았던 답변이라 블로그에 기록함.</p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET