I"1!<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-10-객체들-사이의-관계--의존-관계">chapter 10. 객체들 사이의 관계 : 의존 관계</h1>

<table>
  <thead>
    <tr>
      <th style="text-align: center">관계 종류</th>
      <th style="text-align: center">관계를 표현하는 동사</th>
      <th style="text-align: center">관계 형태</th>
      <th style="text-align: center">다른 클래스에 속할 수 있는가?</th>
      <th style="text-align: center">멤버의 존재를 <br /> 클래스가 관리 하는가?</th>
      <th style="text-align: center">방향성</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><strong>의존</strong></td>
      <td style="text-align: center">Depends-on</td>
      <td style="text-align: center">용도 외엔 무관</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">단방향</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h2 id="-의존-관계-설명">🔔 의존 관계 설명</h2>

<blockquote>
  <p><strong>Depends-on</strong></p>
</blockquote>

<blockquote>
  <p>필요할때만 가져다 쓴다 👉 <u>다른 클래스의 특정 멤버함수를 잠내 클래스에서 도구로 잠시 사용하는 관계</u></p>
</blockquote>

<ul>
  <li>연결 강도가 가장 약하다. 소속되어 있지 않다.</li>
  <li>다른 클래스에 속할 수 있는가? : <strong>용도 외엔 무관</strong></li>
  <li>멤버의 존재를 클래스가 관리 하는가?  : <strong>No</strong></li>
  <li><u>단방향</u></li>
</ul>

<p><br /></p>

<h2 id="-코드">🔔 코드</h2>

<h3 id="timerh">📜Timer.h</h3>

<ul>
  <li><a href="https://ansohxxn.github.io/cpp/chapter8-15/">설명은 이 포스트 참고</a></li>
  <li><code class="language-plaintext highlighter-rouge">elapsed()</code> 멤버 함수는 실행 시간을 계산하고 출력해주는 기능을 가진다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma once
</span>
<span class="cp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;random&gt;
#include &lt;chrono&gt;
</span>
<span class="k">class</span> <span class="nc">Timer</span>
<span class="p">{</span>
	<span class="k">using</span> <span class="kt">clock_t</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">high_resolution_clock</span><span class="p">;</span>
	<span class="k">using</span> <span class="n">second_t</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">duration</span><span class="o">&lt;</span><span class="kt">double</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ratio</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;&gt;</span><span class="p">;</span>

	<span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">time_point</span><span class="o">&lt;</span><span class="kt">clock_t</span><span class="o">&gt;</span> <span class="n">start_time</span> <span class="o">=</span> <span class="kt">clock_t</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>

<span class="nl">public:</span>
	<span class="kt">void</span> <span class="n">elapsed</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">time_point</span><span class="o">&lt;</span><span class="kt">clock_t</span><span class="o">&gt;</span> <span class="n">end_time</span> <span class="o">=</span> <span class="kt">clock_t</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>

		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">second_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">).</span><span class="n">count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="workerh">📜Worker.h</h3>

<ul>
  <li>📜Timer.h 에 대해 모른다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma once
</span>
<span class="k">class</span> <span class="nc">Worker</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="kt">void</span> <span class="n">doSomething</span><span class="p">();</span>  <span class="c1">// 구현은 Worker.cpp 에서</span>
<span class="p">};</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="workercpp">📜Worker.cpp</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma once
</span>
<span class="cp">#include "Worker.h"
#include "Timer.h"
</span>
<span class="kt">void</span> <span class="n">Worker</span><span class="o">::</span><span class="n">doSomething</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Timer</span> <span class="n">timer</span><span class="p">;</span> <span class="c1">// start timer</span>

	<span class="c1">// 실행 시간 잴 대상이 되는 코드 넣기</span>

	<span class="n">timer</span><span class="p">.</span><span class="n">elapsed</span><span class="p">();</span> <span class="c1">// end timer and report elapsed time</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="maincpp">📜main.cpp</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "Worker.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Worker</span><span class="p">().</span><span class="n">doSomething</span><span class="p">();</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>📜Work 클래스는 자신의 멤버 함수 <em>doSomething</em>에서 📜Time 클래스의 멤버 함수 <em>elapsed</em>를 가져다 사용한다.
    <ul>
      <li>서로 속해있거나 묶여있거나 그런건 아니고 주로 <u>멤버 함수 필요할 때 가져다가 쓰는 것</u>을 <code class="language-plaintext highlighter-rouge">의존 관계</code>라고 한다.</li>
      <li><em>timer.elapsed();</em>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">Time</code>타입의 객체 <code class="language-plaintext highlighter-rouge">timer</code>는 이 함수 가져와 쓸때만 일시적으로 쓰고 사라진다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>📜Work 클래스는 📜Time 클래스에 대해 몰라도 된다.
    <ul>
      <li>📜Work.cpp 만 📜Time 클래스에 대해 알고있으면 됨.</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>

<p><br /></p>
:ET