I"X<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-15-의미론적-이동과-스마트-포인터">chapter 15. 의미론적 이동과 스마트 포인터</h1>

<h1 id="154-stdmove">15.4 std::move</h1>

<ul>
  <li><code class="language-plaintext highlighter-rouge">#include &lt;utility&gt;</code> 해주어야 사용 가능하다.</li>
  <li><code class="language-plaintext highlighter-rouge">std::move(A)</code>
    <ul>
      <li>A 를 <u>R-value로 변환하여 이동생 성자 혹은 이동 대입 연산자가 호출되게끔 한다.</u></li>
    </ul>
  </li>
</ul>

<h2 id="-stdmove-쓰기-전">🔔 std::move 쓰기 전</h2>

<h3 id="autoptrh">📜AutoPtr.h</h3>
<ul>
  <li>복사 생성자, 이동 생성자 둘 다 가지고 있는 상황</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">AutoPtr</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">T</span><span class="o">*</span> <span class="n">m_ptr</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">AutoPtr</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">)</span>
		<span class="o">:</span><span class="n">m_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"AutoPtr default constructor"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="o">~</span><span class="n">AutoPtr</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"AutoPtr destructor"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">m_ptr</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">m_ptr</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">AutoPtr</span><span class="p">(</span><span class="k">const</span> <span class="n">AutoPtr</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span> <span class="c1">// 💎복사 생성자💎 </span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"AutoPtr copy constructor"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

		<span class="c1">// deep copy</span>
		<span class="n">m_ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">;</span>  
		<span class="o">*</span><span class="n">m_ptr</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span><span class="p">;</span> <span class="c1">// 📜Resource.h 의 대입 연산자 호출하여 깊은 복사 수행</span>
			
	<span class="p">}</span>

	<span class="n">AutoPtr</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">AutoPtr</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span> <span class="c1">// 💎대입 연산자 오버로딩💎</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"AutoPtr copy assignment"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		
		<span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">a</span> <span class="o">==</span> <span class="k">this</span><span class="p">)</span>
			<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">m_ptr</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">m_ptr</span><span class="p">;</span>

		<span class="c1">// deep copy</span>
		<span class="n">m_ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">;</span>  
		<span class="o">*</span><span class="n">m_ptr</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span><span class="p">;</span> <span class="c1">// 📜Resource.h 의 대입 연산자 호출하여 깊은 복사 수행</span>
														
		<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="c1">//AutoPtr(const AutoPtr&amp; a) = delete;</span>
	<span class="c1">//AutoPtr&amp; operator = (**const** AutoPtr&amp; a) = delete;  </span>

	<span class="n">AutoPtr</span><span class="p">(</span><span class="n">AutoPtr</span><span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">)</span>  <span class="c1">// 💎이동생성자💎</span>
		<span class="o">:</span>  <span class="n">m_ptr</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span><span class="p">)</span> <span class="c1">// 소유권 이전</span>
	<span class="p">{</span> 
		<span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span> <span class="c1">// 소유권 박탈</span>
	
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"AutoPtr move constructor"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">AutoPtr</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span> <span class="p">(</span><span class="n">AutoPtr</span><span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">)</span>  <span class="c1">// 💎이동 대입 연산자 오버로딩💎 </span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"AutoPtr move assignment"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">a</span> <span class="o">==</span> <span class="k">this</span><span class="p">)</span>
			<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">m_ptr</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">m_ptr</span><span class="p">;</span> 
		
		<span class="n">m_ptr</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span><span class="p">;</span>  <span class="c1">// 소유권 이전</span>
		<span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>  <span class="c1">// 소유권 박탈</span>

		<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">T</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">*</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="o">*</span><span class="n">m_ptr</span><span class="p">;</span> <span class="p">}</span>
	<span class="n">T</span><span class="o">*</span> <span class="k">operator</span> <span class="o">-&gt;</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_ptr</span><span class="p">;</span> <span class="p">}</span>
	<span class="kt">bool</span> <span class="n">inNull</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_ptr</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span>

</code></pre></div></div>

<h3 id="maincpp">📜main.cpp</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="p">{</span>
		<span class="n">AutoPtr</span><span class="o">&lt;</span><span class="n">Resource</span><span class="o">&gt;</span> <span class="n">res1</span><span class="p">(</span><span class="k">new</span> <span class="n">Resource</span><span class="p">(</span><span class="mi">10000000</span><span class="p">));</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res1</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

		<span class="n">AutoPtr</span><span class="o">&lt;</span><span class="n">Resource</span><span class="o">&gt;</span> <span class="n">res2</span> <span class="o">=</span> <span class="n">res1</span><span class="p">;</span> <span class="c1">//  복사 생성자가 호출된다. res1은 L-Value니까 </span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res1</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res2</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Resource length constructed
AutoPtr default constructor
0033F510
AutoPtr copy constructor
Resource default constructed
Resource copy assignment
0033F510
0033F5F0
AutoPtr destructor
Resource destroyed
AutoPtr destructor
Resource destroyed
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">AutoPtr&lt;Resource&gt; res2 = res1;</code> 👉 이동 생성자,  복사 생성자. 둘다 구현되있는 상태에서 어떤게 호출될까?</p>
</blockquote>

<ul>
  <li>일단 객체 생성 과정이므로 복사 생성자 or 이동 생성자 호출</li>
  <li><u>복사 생성자가 호출된다.</u>
    <ul>
      <li>복사 대상이 되는 <code class="language-plaintext highlighter-rouge">res1</code> 은 L-Value 니까 R-value만 받는 이동 생성자는 이를 받을 수 없으므로.</li>
      <li>깊은 복사가 이루어 진다.
        <ul>
          <li>깊은 복사를 수행하는 Resource의 대입 연산자 호출.</li>
          <li><code class="language-plaintext highlighter-rouge">res2</code>는 자기만의 새로운 별개의 공간을 할당 받아 그곳에 <code class="language-plaintext highlighter-rouge">res1</code>의 내용물들을 복사하였다.</li>
          <li><code class="language-plaintext highlighter-rouge">res1</code>와 <code class="language-plaintext highlighter-rouge">res2</code>는 별개. 주소가 다르다.
            <ul>
              <li>0033F510, 0033F5F0 둘이 주소 다름</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-stdmove-로-이동-생성자-호출하기">🔔 std::move 로 이동 생성자 호출하기</h2>

<blockquote>
  <p>L-value이지만 이동 생성자를 호출하고 싶다면? 👉 <code class="language-plaintext highlighter-rouge">std::move</code>를 통해 R-value로 바꿔주면 된다.</p>
</blockquote>

<h3 id="maincpp-1">📜main.cpp</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;utility&gt; // ✨✨
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="p">{</span>
		<span class="n">AutoPtr</span><span class="o">&lt;</span><span class="n">Resource</span><span class="o">&gt;</span> <span class="n">res1</span><span class="p">(</span><span class="k">new</span> <span class="n">Resource</span><span class="p">(</span><span class="mi">10000000</span><span class="p">));</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res1</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

		<span class="n">AutoPtr</span><span class="o">&lt;</span><span class="n">Resource</span><span class="o">&gt;</span> <span class="n">res2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">res1</span><span class="p">);</span> <span class="c1">// 이동 생성자가 호출된다. std::move는 res1을 R-Value 로 바꿔준다. </span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res1</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res2</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Resource length constructed
AutoPtr default constructor
001FF540
AutoPtr move constructor
00000000
001FF540
AutoPtr destructor
Resource destroyed
AutoPtr destructor
</code></pre></div></div>

<ul>
  <li>AutoPtr&lt;Resource&gt; res2 = <code class="language-plaintext highlighter-rouge">std::move(res1);</code>
    <ul>
      <li>res1을 R-Value로 리턴해준다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">std::move</code> 덕에 <u>이동생성자가 호출된다.</u> R-Value 가 전달 되었기 때문에.
            <ul>
              <li>깊은 복사 과정 없음. 따라서 Resource 디폴트 생성자 호출과 Resource 대입 연산자는 호출 되지 않는다.</li>
              <li><strong>소유권 이전과 박탈</strong>로 <code class="language-plaintext highlighter-rouge">res1</code> 포인터는 nullptr로 초기화 하고 res1 포인터가 한때 맡았던 객체를 이젠 <code class="language-plaintext highlighter-rouge">res2</code>가 맡게 된다.
                <ul>
                  <li>res2 주소값이 기존의 res1 주소값이 된 것을 볼 수 있음 <code class="language-plaintext highlighter-rouge">001FF540</code></li>
                </ul>
              </li>
            </ul>
          </li>
          <li>📢 주의할점 !!!
            <ul>
              <li>이후에 <code class="language-plaintext highlighter-rouge">res1</code>은 nullptr로 초기화 되기 때문에 이걸로 뭘 하려고 하는건 위험함
                <ul>
                  <li>잘못 사용하면 독이 될 수도.</li>
                  <li><code class="language-plaintext highlighter-rouge">std::move</code>는 프로그래머가 직접 사용하는 것이기 때문에 이 실수는 프로그래머 책임임</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-copy-semantics--vs--move-semantics">🔔 Copy Semantics  VS  Move Semantics</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;utility&gt; // ✨✨
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="p">{</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
		<span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="p">;</span>

		<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

		<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">str</span><span class="p">));</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Hello
Hello
                  👈 null 이어서 비워진 부분
Hello Hello
</code></pre></div></div>

<blockquote>
  <p>std::vector의 push_back은 L-Value Reference 와 R-Value Reference 에 따라 오버로딩이 되어있음</p>
</blockquote>

<ul>
  <li>💙<strong>copy semantics</strong> 사용
    <ul>
      <li><code class="language-plaintext highlighter-rouge">string str = "Hello";</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">str</code>은 L-Value다.  v.push_back(str); 에서도 L-Value로 받아들이고 있다.</li>
          <li>따라서 “Hello” 를 변수로서 받아들이고 있다는 것이다. 이말은 즉 <u>"Hello"는 str이라는 이름의 다른 메모리 공간에 존재 중.</u></li>
        </ul>
      </li>
      <li>v[0] 이라는 <u>새로운 공간을 만들어 str의 내용물을 깊은 복사 해온 것이다.</u>
        <ul>
          <li>v[0] 과 <code class="language-plaintext highlighter-rouge">str</code>은 같은 내용물을 가지고 있지만 <u>별개의 공간이다.</u>
            <ul>
              <li>단순히 깊은 복사로 내용물을 복사해온 것이라서 여전히 str이 가리키는 곳에도 “Hello”객체가 있고 v[0]이 가리키는 곳에도 “Hello” 객체가 있다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>💙<strong>move semantics</strong> 사용
    <ul>
      <li>v.push_back(std::move(str));
        <ul>
          <li>R-Value 로서 str를 v[1]에 move 시킴</li>
          <li><u>이말은 즉 '복사 없이' str이 맡았던 "Hello" 객체는 이제 v[1]이 맡게 되고 str은 nullptr로 초기화가 된다는 얘기.</u>
            <ul>
              <li>str공간에 있던 “Hello” 객체가 복사된 것이 아닌 v[1]로 ‘이동’이 된 것.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>v[1]은 기존 Hello 객체를 그대로 소유권을 이동받고 str 은 비워지게 된다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="번외-이동-생성자가-늘-더-빠른-것은-아니다">🔔번외) 이동 생성자가 늘 더 빠른 것은 아니다.</h2>

<blockquote>
  <p>move 연산으로 더 성능이 좋아질 수 있는 케이스를 파악하는 것이 중요함</p>
</blockquote>

<ul>
  <li>항상 move 연산이 복사보다 더 빠른 것은 아니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">std::string</code>에서는 move 연산을 안쓰는 것이 더 낫다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">std::string</code>는 move를 지원하긴 하는데 문자열 길이가 짧은 경우엔 move연산보단 복사가 더 성능이 낫다고 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET