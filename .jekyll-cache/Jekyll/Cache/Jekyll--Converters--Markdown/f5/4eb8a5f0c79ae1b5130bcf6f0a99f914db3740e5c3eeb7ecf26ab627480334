I"[<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-15-의미론적-이동과-스마트-포인터">chapter 15. 의미론적 이동과 스마트 포인터</h1>

<h1 id="151-이동의-의미와-스마트-포인터">15.1 이동의 의미와 스마트 포인터</h1>

<p><br /></p>

<h2 id="-기존의-메모리-관리-방법">🔔 기존의 메모리 관리 방법</h2>

<h3 id="1-raii">1. RAII</h3>

<blockquote>
  <p><strong>RAII</strong> 👉 <code class="language-plaintext highlighter-rouge">new</code> 로 메모리를 동적 할당 받은 곳에서  return 전에  직접 프로그래머가 <code class="language-plaintext highlighter-rouge">delete</code> 해줘야 한다는 디자인 패턴.</p>
</blockquote>

<ul>
  <li>보통 클래스 안에 묶어 둠</li>
  <li>소멸자들 안에 자원을 해제하는 <code class="language-plaintext highlighter-rouge">delete</code> 루틴을 넣는 디자인 패턴
    <ul>
      <li>따라서 일반 포인터가 아닌 <u>포인터 객체로 만들어서 자신이 소멸될 때 자신이 가리키는 데이터도 같이 delete 되도록</u> 코딩하는게 일반적이다.
        <ul>
          <li>소멸될 때 자동으로 소멸자가 호출되면서 그 소멸자 안에서 <code class="language-plaintext highlighter-rouge">delete</code>가 될 수 있도록.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="문제가-생기는-경우">문제가 생기는 경우</h4>

<ol>
  <li>실수로 프로그래머가 <code class="language-plaintext highlighter-rouge">delete</code> 을 빼먹은 경우</li>
  <li>if-else문 같은 것에 걸려서 <code class="language-plaintext highlighter-rouge">delete</code> 되기도 전에 return 되는 경우</li>
  <li>try - catch 문에서 <code class="language-plaintext highlighter-rouge">delete</code> 되기도 전에 throw 되어 역시 early return 되어버리는 경우</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Resource</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="kt">int</span> <span class="n">m_data</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>

<span class="nl">public:</span>
	<span class="n">Resource</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Resource constructed"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="o">~</span><span class="n">Resource</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Resource destroyed"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">doSomething</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">try</span> 
	<span class="p">{</span>
		<span class="n">Resurce</span> <span class="o">*</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resurce</span><span class="p">;</span>
		
		<span class="k">if</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">throw</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> 
		<span class="p">}</span>		
		<span class="k">delete</span> <span class="n">res</span><span class="p">;</span> <span class="c1">// 📢 if(true)로 인하여 위의 throw에 걸려서 delete이 되지 않는다.</span>
	<span class="p">}</span>
	<span class="k">catch</span> <span class="p">(...)</span>
	<span class="p">{</span>
	<span class="p">}</span>
	<span class="k">return</span><span class="p">;</span>		
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">doSomething</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="2-메모리를-자동으로-관리해주는-클래스-템플릿-만들기">2. 메모리를 자동으로 관리해주는 클래스 템플릿 만들기</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Resource</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="kt">int</span> <span class="n">m_data</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>

<span class="nl">public:</span>
	<span class="n">Resource</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Resource constructed"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="o">~</span><span class="n">Resource</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Resource destroyed"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">AutoPtr</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">T</span><span class="o">*</span> <span class="n">m_ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">AutoPtr</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">)</span>
		<span class="o">:</span><span class="n">m_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{}</span>
	<span class="o">~</span><span class="n">AutoPtr</span><span class="p">()</span> 
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">m_ptr</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">m_ptr</span><span class="p">;</span> <span class="c1">//소멸자에서 nullptr 아니면 메모리 지워줌</span>
	<span class="p">}</span>
	<span class="n">T</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">*</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="o">*</span><span class="n">m_ptr</span><span class="p">;</span> <span class="p">}</span>  <span class="c1">// 포인터 연산자 오버로딩을 하여</span>
	<span class="n">T</span><span class="o">*</span> <span class="k">operator</span> <span class="o">-&gt;</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_ptr</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// 진짜 포인터처럼 작동할 수 있도록</span>
	<span class="kt">bool</span> <span class="n">inNull</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_ptr</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">doSomething</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">try</span> 
	<span class="p">{</span>
		<span class="n">AutoPtr</span><span class="o">&lt;</span><span class="n">Resource</span><span class="o">&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="p">;</span>  
		<span class="k">if</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">throw</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> 
		<span class="p">}</span>		
		<span class="c1">// delete res; 이제 없어도 됨. 객체 res가 소멸될 때 AutoPtr 클래스의 소멸자에서 알아서 delete 해줄테니까</span>
	<span class="p">}</span>
	<span class="k">catch</span> <span class="p">(...)</span>
	<span class="p">{</span>
	<span class="p">}</span>
	<span class="k">return</span><span class="p">;</span>		
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">doSomething</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>스마트 포인터와 하는 일 비슷하다.</li>
  <li><code class="language-plaintext highlighter-rouge">Class AutoPtr</code>
    <ul>
      <li>클래스 템플릿.
        <ul>
          <li>포인터처럼 작동되도록 구현되어 있다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">*( )</code>, <code class="language-plaintext highlighter-rouge">→( )</code> 같은 포인터의 간접 참조도 오버로딩 해놓으면 진짜 포인터처럼 쓸 수도 있다.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>소멸자에서 nullptr 아니면 메모리 지워주는 일을 한다.
        <ul>
          <li>이것만 해줘도 상당히 편함</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">AutoPtr&lt;Resource&gt; res = new Resource;</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">res</code>는 진짜 <u>Resource 타입의 포인터 처럼 사용</u>할 수 있다.</li>
      <li><strong>이제 중간에 early return 되더라도 delete 알아서 해준다.</strong>
        <ul>
          <li>AutoPtr 클래스에서 소멸자가 delete 알아서 해주기 때문에</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="문제가-생기는-경우-1">문제가 생기는 경우</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="p">{</span>
		<span class="n">AutoPtr</span><span class="o">&lt;</span><span class="n">Resource</span><span class="o">&gt;</span> <span class="n">res1</span><span class="p">(</span><span class="k">new</span> <span class="n">Resource</span><span class="p">);</span> <span class="c1">//-&gt; 초기화 된 상태</span>
		<span class="n">AutoPtr</span><span class="o">&lt;</span><span class="n">Resource</span><span class="o">&gt;</span> <span class="n">res2</span><span class="p">;</span> <span class="c1">//-&gt; 초기화 X nullptr</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res1</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 유효한 주소 출력</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res2</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 00000000 출력 (nullptr)</span>

		<span class="n">res2</span> <span class="o">=</span> <span class="n">res1</span><span class="p">;</span>	<span class="c1">// 문제 발생 부분 - move semantics</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res1</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 동일한</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">res2</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 객체를 가리키게 됨</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Resource constructed
0014FFA8
00000000
0014FFA8
0014FFA8
Resource destroyed
Resource destroyed
</code></pre></div></div>

<ul>
  <li><em>AutoPtr&lt;Resource&gt; res1(new Resource);</em>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">res1</code>은 초기화가 된 상태. (Resource 타입의 특정 객체로)
        <ul>
          <li>마치 <code class="language-plaintext highlighter-rouge">int i</code>;  <code class="language-plaintext highlighter-rouge">int *ptr1 = &amp;i</code>; 과 같은 상태다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>AutoPtr&lt;Resource&gt; res2;</em>
    <ul>
      <li>초기화 ❌  Resource 타입의 어떤 특정 객체의 주소를 아직 안담고 있음. <code class="language-plaintext highlighter-rouge">nullptr</code>이다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">int * ptr2 = nullptr</code> 와 같은 상태.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>⭐<u>대입할 때 문제가 생긴다.</u>
    <ul>
      <li>대입할 시 <code class="language-plaintext highlighter-rouge">res2 = res1</code>
        <ul>
          <li>AutoPtr이 가지고 있는 멤버 변수는 포인터 하나.</li>
          <li>그 포인터 주소값을 res2 에 복사해준다.</li>
          <li><u>res1과 res2가 동일한 Resource 타입의 객체를 가리키게 된다.</u>
            <ul>
              <li>
                <blockquote>
                  <p><u>둘이 동일한 객체를 가리키게 되므로</u> 블록을 벗어나면서 <code class="language-plaintext highlighter-rouge">res1</code>로 접근하여 객체를 소멸 시켰는데 또 <code class="language-plaintext highlighter-rouge">res2</code> 에서 이미 소멸된 객체의 메모리를 소멸시키려고 하니까 런타임 에러가 발생하는 것.</p>
                </blockquote>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-해결-방법--소유권-이동move-semantics">🔔 해결 방법 👉 소유권 이동(move semantics)</h2>

<blockquote>
  <p>해결 방법 👉 <code class="language-plaintext highlighter-rouge">res2 = res1</code>시 <code class="language-plaintext highlighter-rouge">res1</code>의 객체 <u>소유권을 먼저 박탈하고 난 후에</u> <u>소유권을 넘겨(Move)주어야 한다.</u></p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">소유권 이동</code>을 구현할 땐 아래 두가지 중 하나를 손봐야 함
    <ol>
      <li>복사 생성자</li>
      <li>대입 연산자 오버로딩</li>
    </ol>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">AutoPtr</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">T</span><span class="o">*</span> <span class="n">m_ptr</span><span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">AutoPtr</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">)</span>
		<span class="o">:</span><span class="n">m_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{}</span>
	<span class="o">~</span><span class="n">AutoPtr</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="n">m_ptr</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="k">delete</span> <span class="n">m_ptr</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">AutoPtr</span><span class="p">(</span><span class="n">AutoPtr</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span>  <span class="c1">// ⭐복사 생성자</span>
	<span class="p">{</span>
		<span class="n">m_ptr</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span><span class="p">;</span>
		<span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>  <span class="c1">// 소유권 박탈</span>
	<span class="p">}</span>

	<span class="n">AutoPtr</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span> <span class="p">(</span><span class="n">AutoPtr</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span>  <span class="c1">// ⭐대입 연산자 오버로딩</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">a</span> <span class="o">==</span> <span class="k">this</span><span class="p">)</span>  <span class="c1">// 들어온게 자기 자신이면 아무것도 하지마</span>
			<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
		
		<span class="k">delete</span> <span class="n">m_ptr</span><span class="p">;</span>   <span class="c1">// 이미 내가 갖고 있던건 지워버리고</span>
		<span class="n">m_ptr</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span><span class="p">;</span>  <span class="c1">// 새로 갖다준 주소를 받고</span>
		<span class="n">a</span><span class="p">.</span><span class="n">m_ptr</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>   <span class="c1">// 갖다주러 들어온 애는 소유권 박탈 시키기 </span>
		<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">T</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">*</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="o">*</span><span class="n">m_ptr</span><span class="p">;</span> <span class="p">}</span>
	<span class="n">T</span><span class="o">*</span> <span class="k">operator</span> <span class="o">-&gt;</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_ptr</span><span class="p">;</span> <span class="p">}</span>
	<span class="kt">bool</span> <span class="n">inNull</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_ptr</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">res2 = res1</code></p>
</blockquote>

<ul>
  <li><strong>대입 연산자 오버로딩</strong>
    <ul>
      <li>들어 온 것이 자기 자신일 경우(ex. <code class="language-plaintext highlighter-rouge">res1 = res1</code>)를 고려해주어야 함</li>
      <li>아무것도 하지 않은 채 자기 자신 리턴</li>
    </ul>

    <ol>
      <li>이미 내가 갖고 있던 것은 지워 버리고
        <ul>
          <li><code class="language-plaintext highlighter-rouge">delete m_ptr</code>포인터인 멤버 delete 시키기</li>
        </ul>
      </li>
      <li>인수가 새로 갖다준 주소를 받고
        <ul>
          <li><code class="language-plaintext highlighter-rouge">m_ptr = a.m_ptr</code></li>
        </ul>
      </li>
      <li>인수의 소유권은 박탈 시키기
        <ul>
          <li><code class="language-plaintext highlighter-rouge">a.m_ptr = nullptr</code> nullptr로 초기화.</li>
        </ul>
      </li>
    </ol>
  </li>
  <li><strong>복사 생성자</strong>
    <ul>
      <li><u>나 자신을 새로 생성시킬 때</u> 기존의 다른 객체로부터 복사되어 생성되는 경우 호출 된다.</li>
    </ul>

    <ol>
      <li>인수가 새로 갖다준 주소를 받고
        <ul>
          <li><code class="language-plaintext highlighter-rouge">m_ptr = a.m_ptr</code></li>
        </ul>
      </li>
      <li>인수의 소유권은 박탈 시키기
        <ul>
          <li><code class="language-plaintext highlighter-rouge">a.m_ptr = nullptr</code> nullptr로 초기화.</li>
          <li>대입 연산자 오버로딩가 다르게</li>
        </ul>
        <ol>
          <li>따라서 이미 내가 갖고 있던것을 지울 필요가 없으며</li>
          <li>복사된 것이 자기 자신일 경우도 고려할 필요가 없다.</li>
        </ol>
      </li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h2 id="semantics-vs-syntax">Semantics Vs. Syntax</h2>

<ul>
  <li>Syntax 👉 이게 문법에 맞냐 안맞냐, 컴파일이 되느냐 안되느냐.</li>
  <li><strong>Semantics</strong> 👉 컴파일이 되더라도 프로그래머가 의도한 의미대로 굴러 가느냐
    <ol>
      <li>value semantics (= copy semantics)</li>
      <li>reference semantics (pointer)</li>
      <li><strong>move semantics</strong>
        <ul>
          <li>다음 강의 R-value 에서 더 자세히 다룰 것!</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET