I"S#<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-14-예외처리--stdexception">chapter 14. 예외처리 : std::exception</h1>

<h2 id="-stdexception">🔔 std::exception</h2>

<blockquote>
  <p>#include &lt;exception&gt;</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">if-else문</code>을 통해 예외를 인지하게 한 후 직접 <code class="language-plaintext highlighter-rouge">throw</code>를 던졌었지만 문제가 생기면 std::exception 클래스를 통해 시스템 상 <u>내부에서 알아서 발생한 예외를 throw 한다.</u></li>
  <li>C++ 표준 클래스로, <u>예외의 여러 종류들을 나타내는 여러 자식 클래스</u>들을 두고 있다.
    <ul>
      <li><em>runtime_error 클래스</em>, <em>logic_error 클래스</em> 등등 C++ 표준의 <em>exception 클래스</em> 를 상속받고 있다.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;exception&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="k">try</span>
   <span class="p">{</span>
       <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">;</span>
       <span class="n">s</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>  <span class="c1">// 예외 발생</span>
   <span class="p">}</span>
   <span class="k">catch</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">typeid</span><span class="p">(</span><span class="n">e</span><span class="p">).</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
       <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
   <span class="p">}</span>
   
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

class std::length_error
string too long 
</code></pre></div></div>

<blockquote>
  <p>string 문자열의 사이즈를 -1로 지정해서 문제가 발생</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">throw</code> 없이도 <u>시스템상 내부에서 알아서 예외 종류에 알맞는 std::exception 클래스의 자식 클래스를 던져 준다.</u>
    <ul>
      <li>길이에 대한 에러이므로 std::exception 클래스의 자식 클래스 중 하나인 std::length_error 예외 클래스 객체가 던져진다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">throw std::length_error(s)</code>이 숨겨져 있는 것이나 마찬가지.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">catch (std::exception &amp; e)</code> 에서 이를 받는다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">typeid(e).name()</code>
    <ul>
      <li>“class std::length_error” 출력</li>
    </ul>
  </li>
</ul>

<h3 id="what-함수">what 함수</h3>

<blockquote>
  <p>예외 종류에 맞는 에러 원인 메세지를 리턴하는 기능을 하는 함수다.</p>
</blockquote>

<ul>
  <li>에러 메세지를 리턴하므로 리턴 타입은 <code class="language-plaintext highlighter-rouge">const char *</code>이다.</li>
</ul>

<blockquote>
  <p>std::exception 클래스의 모든 자식 클래스는 <u>virtual 가상 함수인 what() 함수를 오버라이딩 한다.</u></p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">e.what()</code>
    <ul>
      <li>“string too long” 출력
        <ul>
          <li>std::length_error 클래스에서는 what() 함수를 “string too long” 출력 하도록 오버라이딩 해놨기 때문에 이렇게 나온 것!</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-stdexception-상속-받는-사용자-정의-클래스-만들기">🔔 std::exception 상속 받는 사용자 정의 클래스 만들기</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">: public std::exception</code> 해주어 상속 받고 <u>what 함수를 아래와 같이 오버라이딩</u> 해주어야 한다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;exception&gt;
</span>
<span class="k">class</span> <span class="nc">CustomException</span> <span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">what</span><span class="p">()</span> <span class="k">const</span> <span class="k">noexcept</span> <span class="k">override</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Custom exception"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="k">try</span>
   <span class="p">{</span>
       <span class="k">throw</span> <span class="n">CustomException</span><span class="p">();</span>  <span class="c1">// 예외 발생</span>
   <span class="p">}</span>
   <span class="k">catch</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">typeid</span><span class="p">(</span><span class="n">e</span><span class="p">).</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
       <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
   <span class="p">}</span>
   
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

class CustomException
Custom exception
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">const char * what() const noexcept override</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">const</code> 타입의 객체만 호출할 수 있으며</li>
      <li><code class="language-plaintext highlighter-rouge">noexcept</code>
        <ul>
          <li>이 안에선 예외를 던지지 않겠다는 의미. C++ 11 이상부터 사용 가능.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET