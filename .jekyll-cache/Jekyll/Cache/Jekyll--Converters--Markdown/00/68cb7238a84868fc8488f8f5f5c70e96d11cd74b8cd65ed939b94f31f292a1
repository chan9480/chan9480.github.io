I"Y=<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-10-객체들-사이의-관계--구성-관계">chapter 10. 객체들 사이의 관계 : 구성 관계</h1>

<table>
  <thead>
    <tr>
      <th style="text-align: center">관계 종류</th>
      <th style="text-align: center">관계를 표현하는 동사</th>
      <th style="text-align: center">관계 형태</th>
      <th style="text-align: center">다른 클래스에 속할 수 있는가?</th>
      <th style="text-align: center">멤버의 존재를 <br /> 클래스가 관리 하는가?</th>
      <th style="text-align: center">방향성</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">구성</td>
      <td style="text-align: center">Part-of</td>
      <td style="text-align: center">전체/부품</td>
      <td style="text-align: center">No</td>
      <td style="text-align: center">Yes</td>
      <td style="text-align: center">단방향</td>
    </tr>
  </tbody>
</table>

<h2 id="-구조-설명">🔔 구조 설명</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "position2d.h"
</span><span class="k">class</span> <span class="nc">Monster</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_name</span><span class="p">;</span>
	
	<span class="n">Position2D</span> <span class="n">m_location</span><span class="p">;</span>   <span class="c1">// ⭐구성관계⭐ </span>

<span class="p">...</span>

<span class="n">Monster</span> <span class="n">goblin</span><span class="p">;</span>  <span class="c1">// Monstre 객체</span>
</code></pre></div></div>

<blockquote>
  <p><strong>Part-of</strong>*</p>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Position2D</code>타입의 객체 <strong>m_location</strong>은 Monster 객체를 <u>구성하는 부품</u>이다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Position2D</code> 타입의 객체 <strong><em>m_location</em></strong> 은 <code class="language-plaintext highlighter-rouge">Monster</code> 클래스의 <u>Part</u>, 부품이다.
    <ul>
      <li><strong><em>m_location</em></strong> 은 <code class="language-plaintext highlighter-rouge">Monstre</code>의 다른 멤버에 대해 알 필요가 없다. 단지 부품일 뿐!</li>
    </ul>
  </li>
  <li>다른 클래스에 속할 수 있는가? : <strong>No</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Position2D</code> 타입의 객체 <strong><em>m_location</em></strong> 은 <code class="language-plaintext highlighter-rouge">Moster</code> 클래스의 위치 정보가 되므로 <u>다른 클래스에 속할 수 없다.</u>
        <ul>
          <li><strong><em>m_location</em></strong> 멤버는 <code class="language-plaintext highlighter-rouge">Monster</code> 객체의 <u>일부분</u>으로서 오직 <code class="language-plaintext highlighter-rouge">Monster</code>클래스의 위치 정보만 담을 수 있다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">Position2D</code> <em>클래스</em> 자체는 여러 클래스에 속할 수 있다.
                <ul>
                  <li>플레이어나 NPC 의 Part로서 그들의 위치 정보를 알려주는 멤버 객체를 찍어낼 수 있는 클래스다.</li>
                </ul>
              </li>
              <li>그러나 플레이어 클래스의 <strong><em>m_location</em></strong> <em>객체</em> 멤버와 몬스터 클래스의 <strong><em>m_location</em></strong> <em>객체</em> 멤버는 서로 별개의 다른 존재다.
                <ul>
                  <li>몬스터의 위치가 플레이어 멤버로 속할 일은 없듯이.</li>
                </ul>
              </li>
              <li>서로 다른 클래스들은 그들 각자가 가지고 있는 Position2D 타입의 객체 멤버를 각자 관리한다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>멤버의 존재를 클래스가 관리 하는가?  : <strong>Yes</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Moster</code>타입의 객체가 사라지면 그의 멤버인 <code class="language-plaintext highlighter-rouge">Position2D</code> 타입의 객체 <strong><em>m_location</em></strong> 도 사라진다.</li>
      <li><code class="language-plaintext highlighter-rouge">Moster</code>타입의 객체 없이는 <strong><em>m_location</em></strong> 도 없다.</li>
      <li><u>단방향</u>임을 알 수 있다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-코드">🔔 코드</h2>

<h3 id="-position2dh">📜 Position2D.h</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">class</span> <span class="nc">position2d</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_x</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_y</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">position2d</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">x_in</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">y_in</span><span class="p">)</span>
		<span class="o">:</span> <span class="n">m_x</span><span class="p">(</span><span class="n">x_in</span><span class="p">),</span> <span class="n">m_y</span><span class="p">(</span><span class="n">y_in</span><span class="p">)</span>
	<span class="p">{}</span>

	<span class="kt">void</span> <span class="n">set</span><span class="p">(</span><span class="k">const</span> <span class="n">position2d</span> <span class="o">&amp;</span> <span class="n">pos_target</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">set</span><span class="p">(</span><span class="n">pos_target</span><span class="p">.</span><span class="n">m_x</span><span class="p">,</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">m_y</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="n">set</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">x_target</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">y_target</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">m_x</span> <span class="o">=</span> <span class="n">x_target</span><span class="p">;</span>
		<span class="n">m_y</span> <span class="o">=</span> <span class="n">y_target</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">position2d</span> <span class="o">&amp;</span> <span class="n">pos2d</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">pos2d</span><span class="p">.</span><span class="n">m_x</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">pos2d</span><span class="p">.</span><span class="n">m_y</span> 
		<span class="k">return</span> <span class="n">out</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Position2D</code>객체를 출력할 때 호출할 출력 연산자 <code class="language-plaintext highlighter-rouge">&lt;&lt;</code>을 오버로딩을 해주어야 하므로 #include &lt;iostream&gt; 해준다.
    <ul>
      <li><a href="https://ansohxxn.github.io/cpp/chapter9-3/">입출력 연산자 오버로딩 포스트</a></li>
    </ul>
  </li>
  <li><em>set(const position2d &amp; pos_target)</em>
    <ul>
      <li>같은 <code class="language-plaintext highlighter-rouge">Position2D</code>타입의 다른 객체를 인수로 받았을 때 그 객체의 멤버 값들을 내 멤버 값으로 복사한다.</li>
      <li>동일한 이름의 <em>set(const int &amp; x_target, const int &amp; y_target)</em> 호출</li>
      <li>복사생성자 같은 역할</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="-monsterh">📜 Monster.h</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma once
</span>
<span class="cp">#include &lt;string&gt;
#include "position2d.h"
</span><span class="k">class</span> <span class="nc">Monster</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_name</span><span class="p">;</span>
	
	<span class="n">position2d</span> <span class="n">m_location</span><span class="p">;</span>


<span class="nl">public:</span> 
	<span class="n">Monster</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name_in</span><span class="p">,</span> <span class="k">const</span> <span class="n">position2d</span> <span class="o">&amp;</span> <span class="n">pos_in</span><span class="p">)</span>
		<span class="o">:</span> <span class="n">m_name</span><span class="p">(</span><span class="n">name_in</span><span class="p">),</span> <span class="n">m_location</span><span class="p">(</span><span class="n">pos_in</span><span class="p">)</span>
	<span class="p">{}</span>

	<span class="kt">void</span> <span class="n">moveTo</span><span class="p">(</span><span class="k">const</span> <span class="n">position2d</span> <span class="o">&amp;</span> <span class="n">pos_target</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">m_location</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">pos_target</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">Monster</span> <span class="o">&amp;</span> <span class="n">monster</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">monster</span><span class="p">.</span><span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">monster</span><span class="p">.</span><span class="n">m_location</span> 
		<span class="k">return</span> <span class="n">out</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">position2d</span> <span class="n">m_location</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>몬스터의 위치 정보를 나타낼 <code class="language-plaintext highlighter-rouge">Position2D</code>타입의 객체를 멤버로 하기 위해 <em>#include “position2d.h”</em> 해준다.
    <ul>
      <li>&lt;iostream&gt;은 이미 📜position2d.h 에 포함되어 있기 때문에 또 include 해줄 필요 없다.</li>
    </ul>
  </li>
  <li><em>void moveTo(const position2d &amp; pos_target)</em>
    <ul>
      <li>이동할 위치롤 인수로 받아 몬스터 객체(자기 자신)를 그 위치로 이동시킨다.</li>
    </ul>
  </li>
  <li>출력 연산자에서
    <ul>
      <li>out <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> monster.m_name « ” “ <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> monster.m_location</li>
      <li>인라인 코드블록으로 체크해준 <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> 부분에서 <code class="language-plaintext highlighter-rouge">Position2D</code> 클래스의 출력 연산자 오버로딩이 호출된다.
        <ul>
          <li><u>재활용</u></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="-maincpp">📜 main.cpp</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "Monster.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Monster</span> <span class="n">mon1</span><span class="p">(</span><span class="s">"Simpson"</span><span class="p">,</span> <span class="n">position2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">mon1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> 

	<span class="p">{</span>
		<span class="n">mon1</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="n">position2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">mon1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> 
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>몬스터 객체를 만들기 위해 <em>#include “Monster.h</em>” 해준다.
    <ul>
      <li>&lt;iostream&gt;은 이미 📜position2d.h 을 including 하는 📜Monster.h 에 포함되어 있기 때문에 또 include 해줄 필요 없다.</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>

<p><br /></p>
:ET