I"oi<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h2 id="연산자-우선순위과-결합-법칙">연산자 우선순위과 결합 법칙</h2>

<p><code class="language-plaintext highlighter-rouge">left to right</code> : 우선 순위 같을 경우 왼쪽부터</p>

<p><code class="language-plaintext highlighter-rouge">right to left</code> : 우선 순위 같을 경우 오른쪽부터</p>

<ul>
  <li>=, +=, -= ,…</li>
  <li>우선 순위를 다 외울 수가 없으니까 우선 순위 높은건 그냥 괄호로 묶어 주기 !</li>
</ul>

<p><br /></p>

<h2 id="산술-연산자">산술 연산자</h2>
<ul>
  <li>더하기, 곱셈, 나누기, 빼기</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 1  int</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="kt">float</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 1.75  float</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">/</span> <span class="kt">float</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 1.75  float</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="kt">float</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="kt">float</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 1.75  float</span>
</code></pre></div></div>

<ul>
  <li>단항 연산자는 숫자와 딱 붙여쓰는걸 추천한다.
    <ul>
      <li>- 1 로 써도 컴파일이 되지만 읽는 사람 입장에서 잘못 볼 수 있으므로</li>
      <li>-1  라고 딱 붙여 써주기</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="증감-연산자">증감 연산자</h2>
<p><code class="language-plaintext highlighter-rouge">++x</code> : 바로, 즉시 x를 1 증가시킴</p>

<p><code class="language-plaintext highlighter-rouge">x++</code> : 세미콜론 ; 을 만난 후에 x를 1 증가시킴</p>

<ul>
  <li>이런건 쓰지 말기 !!!
    <ol>
      <li>add(x, ++x)
        <ul>
          <li>컴파일러에서 두 파라미터 중 x를 먼저 연산할지 ++x를 먼저 연산할지 헷갈려함</li>
        </ul>
      </li>
      <li>x = x++
        <ul>
          <li>이런것도 쓰지 말기</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h2 id="sizeof-연산자">sizeof 연산자</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sizeof</code>도 연산자다. 함수 아님 !</li>
  <li>데이터 타입이나 변수의 크기를 리턴한다. 몇 byte인지.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">a</span><span class="p">;</span>

<span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">);</span>
<span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
<span class="k">sizeof</span> <span class="n">a</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="-쉼표-연산자">, 쉼표 연산자</h2>

<h3 id="1-구분-기호로서의-">1. 구분 기호로서의 <code class="language-plaintext highlighter-rouge">,</code></h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">// 여기서의 쉼표는 구분기호! 연산자 아님.</span>
</code></pre></div></div>

<ul>
  <li>여기서의 쉼표는 구분기호! 연산자 아님.</li>
  <li>y 도 int 라는 구분 기호.</li>
</ul>

<h3 id="2-연산자로서의-">2. 연산자로서의 <code class="language-plaintext highlighter-rouge">,</code></h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">++</span> <span class="o">**</span><span class="p">,</span><span class="o">**</span> <span class="n">y</span><span class="o">++</span><span class="p">);</span>  <span class="c1">// z는 10이 된다.</span>
<span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="c1">// z는 4가 된다. </span>
</code></pre></div></div>

<ul>
  <li>위 코드에서의 쉼표는 연산자로서의 콤마이다.</li>
  <li>콤마는 <u>= 보다 연산자 우선순위가 낮다.</u>
    <ul>
      <li>int z = (x++ <strong>,</strong> y++);
        <ul>
          <li>괄호로 묶어주었기 때문에 <code class="language-plaintext highlighter-rouge">,</code> 부터 실행된다.
            <ul>
              <li>x++ 를 지나 y++ 값만 z에 대입되게 된다.</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">,</code> 는 <code class="language-plaintext highlighter-rouge">;</code> 와 비슷한 역할이라고 보면 된다. 다만 <code class="language-plaintext highlighter-rouge">=</code> 보다 연산자 우선순위가 낮음</li>
        </ul>
      </li>
      <li>z = x, y
        <ul>
          <li>콤마가 = 보다 연산순위가 낮기 떄문에 = 먼저 실행된다.</li>
          <li>따라서 x 값만 z에 들어가게 된다.</li>
          <li>( z = x ) , y 가 되는 것과 마찬가지다.</li>
          <li>y는 그냥 덩그러니..</li>
          <li>z = (x , y) 라고 해주어야 y 값이 z에 대입될 것이다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">**</span><span class="p">,</span><span class="o">**</span> <span class="n">y</span><span class="p">;</span>  <span class="c1">// error ! </span>
</code></pre></div></div>

<ul>
  <li>int z = x <strong>,</strong> y; 에서의 콤마는 구분기호이기 떄문에 (int z = int x) <strong>,</strong> int y 인거나 마찬가지다.
    <ul>
      <li>int y 는 이미 위에 선언 되있으니까 중복 선언이라고 에러가 나는 것.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="조건-연산자">조건 연산자</h2>

<ul>
  <li>유일한 <code class="language-plaintext highlighter-rouge">삼항 연산자</code>
    <ul>
      <li>나중에 또 삼항 연산자가 새로운 문법으로 나올 수도 있는 것이므로 조건 연산자라고 부를것.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">onSale</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">price</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
<span class="n">price</span> <span class="o">=</span> <span class="p">(</span><span class="n">onSale</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="o">?</span> <span class="mi">10</span> <span class="o">:</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">onSale</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">price</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="n">onSale</span><span class="p">)</span>
   <span class="n">price</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="k">else</span>
   <span class="n">price</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>좌 우 두 코드는 같은 코드나 마찬가지다.
    <ul>
      <li>onSale 값이 ture면 price에 10을 대입, false면 price에 100을 대입.</li>
    </ul>
  </li>
  <li>price = (onSale == true) ? 10 : 100;
    <ul>
      <li>price = ( (onSale == true) ? 10 : 100 ) ; 이나 마찬가지다. 10이나 100이 price에 들어감</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">조건식 ? A : B</code>
    <ul>
      <li>참이면 A,  거짓이면 B</li>
      <li>A와 B는 <u>데이터 타입을 맞추는게 좋다.</u>
        <ul>
          <li>“10” : 100 비추</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="o">?</span> <span class="s">"even"</span> <span class="o">:</span> <span class="s">"odd"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// error</span>
</code></pre></div></div>

<ul>
  <li>조건 연산자는 « 보다 우선순위가 낮다.
    <ul>
      <li>따라서  ( cout « ( x % 2 == 0 ) ) ? “even” : “odd” 꼴이 되버리기 떄문에 에러 !</li>
    </ul>
  </li>
  <li>if-else 와 삼항 연산자의 차이점
    <ul>
      <li><u>삼항 연산자는 const를 쓸 수 있다.</u></li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">onSale</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    
<span class="o">**</span><span class="k">const</span> <span class="kt">int</span><span class="o">**</span> <span class="n">price</span> <span class="o">=</span> <span class="p">(</span><span class="n">onSale</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="o">?</span> <span class="mi">10</span> <span class="o">:</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">삼항 연산자</code>는 const 상수를 쓸 수 있다. 참인 값인 10이 price의 상수 리터럴로 대입될 것.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">onSale</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    
<span class="k">if</span> <span class="p">(</span><span class="n">onSale</span><span class="p">)</span>
  <span class="k">const</span> <span class="kt">int</span> <span class="n">price</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="k">else</span>
  <span class="k">const</span> <span class="kt">int</span> <span class="n">price</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">price</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 에러 !!! </span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">if-else문</code> 안에서의 변수 선언은 <u>지역변수</u>다.
    <ul>
      <li>const int price는 if-else문을 벗어나면 사라진다.</li>
      <li>그래서 if-else문으로 const int 값을 정하기는 어려움</li>
      <li>밖에서 선언한 후에 if-else문에 들어오면 이미 한번 정한거니 값 못바꾸니까.</li>
    </ul>
  </li>
  <li>그래도 <code class="language-plaintext highlighter-rouge">if-else</code> 가 가독성이 더 좋긴하다.</li>
</ul>

<p><br /></p>

<h2 id="관계-연산자">관계 연산자</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">!=</code>, <code class="language-plaintext highlighter-rouge">&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&lt;=</code>, <code class="language-plaintext highlighter-rouge">&gt;=</code></li>
  <li>두 피연산자의 관계를 다루며</li>
  <li>결과 값은 <code class="language-plaintext highlighter-rouge">boolean</code> 타입이다.</li>
</ul>

<h3 id="실수인-두-피연산자-크기-비교-연산시-주의할-점">실수인 두 피연산자 <code class="language-plaintext highlighter-rouge">크기 비교</code> 연산시 주의할 점</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="nf">d1</span> <span class="p">(</span><span class="mi">100</span> <span class="o">-</span> <span class="mf">99.99</span><span class="p">);</span> <span class="c1">// 0.001</span>
<span class="kt">double</span> <span class="nf">d2</span> <span class="p">(</span><span class="mi">10</span> <span class="o">-</span> <span class="mf">9.99</span><span class="p">);</span> <span class="c1">// 0.001</span>

<span class="k">if</span> <span class="p">(</span><span class="n">d1</span> <span class="o">==</span> <span class="n">d2</span><span class="p">)</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"equal"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="k">else</span><span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Not equal"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">d1</span> <span class="o">&gt;</span> <span class="n">d2</span><span class="p">)</span> 
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"d1 &gt; d2"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="k">else</span> 
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"d1 &lt; d2"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>결과는 “Not equal” , “d1 &gt; d2” 이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">d1</code> = 100 - 99.99 = 0.001</li>
      <li><code class="language-plaintext highlighter-rouge">d2</code> = 10 - 9.99 = 0.001</li>
      <li>d1과 d2는 값이 같음에도 같지 않다고 나온다.
        <ul>
          <li>이진수 소수가 아닌 이상 <u>컴퓨터는 딱 떨어지는 십진수 소수를 구현할 수 없기 떄문이다.</u>
            <ul>
              <li><u>최대한 이진수의 조합들로 십진수에 가깝게 만드는것.</u></li>
              <li>컴퓨터는 이진수로 저장하기 떄문에.</li>
              <li><code class="language-plaintext highlighter-rouge">d1-d2</code> = 5.32901e - 15
                <ul>
                  <li>따라서 컴퓨터 내부상으로 이정도 오차가 있음</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="이-정도-오차면-두-피연산자를-같다고-가정하자고-엡실론-값을-설정하기">이 정도 오차면 두 피연산자를 같다고 가정하자고 엡실론 값을 설정하기</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="nf">d1</span> <span class="p">(</span><span class="mi">100</span> <span class="o">-</span> <span class="mf">99.99</span><span class="p">);</span> <span class="c1">// 0.001</span>
<span class="kt">double</span> <span class="nf">d2</span> <span class="p">(</span><span class="mi">10</span> <span class="o">-</span> <span class="mf">9.99</span><span class="p">);</span> <span class="c1">// 0.001</span>

<span class="k">const</span> <span class="kt">double</span> <span class="o">**</span><span class="n">epsilon</span><span class="o">**</span> <span class="o">=</span> <span class="mi">1</span><span class="n">e</span> <span class="o">-</span> <span class="mi">10</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">d1</span> <span class="o">-</span> <span class="n">d2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">epsilon</span><span class="p">)</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Approximattely qual"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="k">else</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Not equal"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>엡실론 값은 프로젝트에 따라 개발자가 임의로 정하는거고</li>
  <li>std::abs(d1 - d2) &lt; epsilon</li>
  <li>이정도 값의 오차면 두 소수 피연산자가 equal 하다고 보자고 설정하는것.</li>
</ul>

<p><br /></p>

<h2 id="논리-연산자">논리 연산자</h2>

<ul>
  <li>결과 값은 <code class="language-plaintext highlighter-rouge">boolean</code> 타입이다.</li>
  <li>단항 연산자
    <ul>
      <li><code class="language-plaintext highlighter-rouge">!</code> : NOT
        <ul>
          <li>0이 아닌 모든 것은 <code class="language-plaintext highlighter-rouge">ture</code></li>
          <li>오로지 0만 <code class="language-plaintext highlighter-rouge">false</code></li>
          <li>x = 5 라면 !x 의 결과값은 false이다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>이항 연산자
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> : AND</li>
      <li><code class="language-plaintext highlighter-rouge">||</code> : OR</li>
    </ul>
  </li>
  <li>게임에서 쓴다면 아래와 같은 느낌</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">hit</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">health</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="n">hit</span> <span class="o">==</span> <span class="n">ture</span> <span class="o">&amp;&amp;</span> <span class="n">health</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">// hit이 true이고 health가 20보다 작다면</span>
<span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"die"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> 
	<span class="n">helath</span> <span class="o">-=</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="논리-연산자끼리의-우선-순위">논리 연산자끼리의 우선 순위</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">!</code> &gt; <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> &gt; <code class="language-plaintext highlighter-rouge">||</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">!x == y</code> 와 <code class="language-plaintext highlighter-rouge">!(x == y)</code> 의 결과는 다르다.</li>
      <li><code class="language-plaintext highlighter-rouge">A || B &amp;&amp; C</code>  와 <code class="language-plaintext highlighter-rouge">( A || B ) &amp;&amp; C</code> 의 결과는 다르다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 의 우선순위가 더 높기 때문에</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="논리-연산시-주의사항--와--의-차이">논리 연산시 주의사항 <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 와 <code class="language-plaintext highlighter-rouge">||</code> 의 차이</h3>

<ul>
  <li>A <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> B
    <ul>
      <li>A가 거짓이면 B는 연산하지 않는다.</li>
      <li>A가 거짓이면 B는 연산할 필요도 없이 결과는 false기 때문이다.</li>
      <li>이 원리를 개발자가 의도적으로 이용할 수도 있다.</li>
    </ul>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">y</span><span class="o">++</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
  <span class="p">{</span>
  	<span class="p">...</span>
  <span class="p">}</span>

  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  
  <span class="c1">// 2가 출력된다. x==1 에서 false가 되어 y++은 연산하지도 않았기 때문이다.</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="드모르간-법칙">드모르간 법칙</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">! ( a &amp;&amp; b )</code> 와 <code class="language-plaintext highlighter-rouge">!a || !b</code> 는 같다.</li>
  <li><code class="language-plaintext highlighter-rouge">! ( a &amp;&amp; b )</code> 와 <code class="language-plaintext highlighter-rouge">!a &amp;&amp; !b</code> 는 같지 않다.</li>
</ul>

<h3 id="xor">XOR</h3>

<ul>
  <li>false <code class="language-plaintext highlighter-rouge">XOR</code> false → false</li>
  <li>false <code class="language-plaintext highlighter-rouge">XOR</code> true → true</li>
  <li>true <code class="language-plaintext highlighter-rouge">XOR</code> false → true</li>
  <li>true <code class="language-plaintext highlighter-rouge">XOR</code> true → false</li>
  <li>두 피연산자의 boolean 값이 다를 때만 true
    <ul>
      <li>C++에서 XOR 연산자는 없다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">if ( x ! = y )</code> 로 표현 함. 다를 떄 true 라면.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">^</code> 는 비트 연산자로서의 XOR이다.</li>
    </ul>
  </li>
</ul>

<h3 id="연습-문제">연습 문제</h3>

<ul>
  <li>true <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> true <code class="language-plaintext highlighter-rouge">||</code> false
    <ul>
      <li>→ true</li>
    </ul>
  </li>
  <li>false <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> true <code class="language-plaintext highlighter-rouge">||</code> false
    <ul>
      <li>→ true</li>
    </ul>
  </li>
  <li>false <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> true <code class="language-plaintext highlighter-rouge">||</code> false <code class="language-plaintext highlighter-rouge">||</code> true
    <ul>
      <li>→ true</li>
    </ul>
  </li>
  <li>( 14 &gt; 13 <code class="language-plaintext highlighter-rouge">||</code>  2 &gt; 1 ) <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> ( 9 &gt; 1 )
    <ul>
      <li>→ true</li>
    </ul>
  </li>
  <li>! ( 2314123 &gt; 2 <code class="language-plaintext highlighter-rouge">||</code> 123123 &gt; 2387 )
    <ul>
      <li>→ false</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET