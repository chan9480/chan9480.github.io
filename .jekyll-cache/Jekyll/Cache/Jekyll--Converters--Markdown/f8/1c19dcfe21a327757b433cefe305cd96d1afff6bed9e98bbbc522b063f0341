I"I<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-12-가상-함수들--가상-상속으로-다이아몬드-상속-문제-해결">chapter 12. 가상 함수들 : 가상 상속으로 다이아몬드 상속 문제 해결</h1>

<h2 id="-다이아몬드-상속-문제">🔔 다이아몬드 상속 문제</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/87217063-6cfd6f00-c380-11ea-9c5a-1b51bb49ec1d.png" alt="image" width="70%" height="70%" class="align-center" /></p>

<ul>
  <li>B1, B2 클래스는 A 클래스를 상속받고 C 는 B1, B2 클래스를 둘 다 상속 받는다.(<u>다중 상속</u>)</li>
  <li>1 번 그림을 생각하며 C 에 A 타입의 메모리가 단 하나만 존재 할 것을 기대하지만 <u>실제론 2 번 그림처럼 C 에 A 타입 메모리가 2 개가 생긴다.</u></li>
</ul>

<blockquote>
  <p>다이아몬드 상속 문제 👉 <strong>다중 상속</strong>시, 다이아몬드 구조로 상속되는 것이 아닌 <u>손자 객체에 할머니 객체가 2 개가 생기는 것.</u></p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">PoweredDevice</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="kt">int</span> <span class="n">m_i</span><span class="p">;</span>

	<span class="n">PoweredDevice</span><span class="p">(</span><span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"PoweredDevice: "</span> <span class="o">&lt;&lt;</span> <span class="n">power</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Scanner</span> <span class="o">:</span> <span class="k">public</span> <span class="n">PoweredDevice</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">Scanner</span><span class="p">(</span><span class="kt">int</span> <span class="n">scanner</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
		<span class="o">:</span><span class="n">PoweredDevice</span><span class="p">(</span><span class="n">power</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Scanner: "</span> <span class="o">&lt;&lt;</span> <span class="n">scanner</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Printer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">PoweredDevice</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">Printer</span><span class="p">(</span><span class="kt">int</span> <span class="n">printer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
		<span class="o">:</span> <span class="n">PoweredDevice</span><span class="p">(</span><span class="n">power</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Printer: "</span> <span class="o">&lt;&lt;</span> <span class="n">printer</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Copier</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Scanner</span><span class="p">,</span> <span class="k">public</span> <span class="n">Printer</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">Copier</span><span class="p">(</span><span class="kt">int</span> <span class="n">scanner</span><span class="p">,</span> <span class="kt">int</span> <span class="n">printer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
		<span class="o">:</span> <span class="n">Scanner</span><span class="p">(</span><span class="n">scanner</span><span class="p">,</span> <span class="n">power</span><span class="p">),</span> <span class="n">Printer</span><span class="p">(</span><span class="n">printer</span><span class="p">,</span> <span class="n">power</span><span class="p">)</span>
	<span class="p">{}</span>

<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Copier</span> <span class="n">cop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">//생성자 호출</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">cop</span><span class="p">.</span><span class="n">Scanner</span><span class="o">::</span><span class="n">PoweredDevice</span><span class="o">::</span><span class="n">m_i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">cop</span><span class="p">.</span><span class="n">Printer</span><span class="o">::</span><span class="n">PoweredDevice</span><span class="o">::</span><span class="n">m_i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

PoweredDevice : 3
Scanner : 1
Powereddevice : 3
Printer : 2
000000A95D0FF9EC
000000A95D0FF9E8
</code></pre></div></div>

<ul>
  <li>할머니인 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>의 생성자가 2 번 호출되는 것을 볼 수 잇다.
    <ul>
      <li>즉 손자인 <code class="language-plaintext highlighter-rouge">Copier</code>타입의 객체 <em>cop</em>에 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>타입의 사본이 2 개가 들어있음을 알 수 있다.</li>
    </ul>
  </li>
  <li><em>m_i</em> 는 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>로부터 상속 받은 멤버 변수인데 <code class="language-plaintext highlighter-rouge">Scanner</code>로부터 받은 <em>m_i</em> 과 <code class="language-plaintext highlighter-rouge">Printer</code>로부터 받은 <em>m_i</em>의 주소가 다른 것을 보아 동일한 하나의 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>가 아닌 각각 다른 두개의 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>타입 객체가 <em>cop</em>에 상속되었음을 알 수 있다.</li>
</ul>

<p><br /></p>

<h2 id="-virtual-가상-상속">🔔 virtual 가상 상속</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">virtual</code>로 <u>가상 상속 받으면 상속시 부모 타입의 메모리가 중복되지 않으면서 상속된다.</u> 위 문제 해결!</p>
</blockquote>

<ul>
  <li>단, 다중 상속 하는 손자 클래스의 경우 <u>할머니 클래스의 생성자를 꼭 직접 호출해주어야 한다.</u></li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">PoweredDevice</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="kt">int</span> <span class="n">m_i</span><span class="p">;</span>

	<span class="n">PoweredDevice</span><span class="p">(</span><span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"PoweredDevice: "</span> <span class="o">&lt;&lt;</span> <span class="n">power</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Scanner</span> <span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">PoweredDevice</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">Scanner</span><span class="p">(</span><span class="kt">int</span> <span class="n">scanner</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
		<span class="o">:</span><span class="n">PoweredDevice</span><span class="p">(</span><span class="n">power</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Scanner: "</span> <span class="o">&lt;&lt;</span> <span class="n">scanner</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Printer</span> <span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">PoweredDevice</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">Printer</span><span class="p">(</span><span class="kt">int</span> <span class="n">printer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
		<span class="o">:</span> <span class="n">PoweredDevice</span><span class="p">(</span><span class="n">power</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Printer: "</span> <span class="o">&lt;&lt;</span> <span class="n">printer</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Copier</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Scanner</span><span class="p">,</span> <span class="k">public</span> <span class="n">Printer</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">Copier</span><span class="p">(</span><span class="kt">int</span> <span class="n">scanner</span><span class="p">,</span> <span class="kt">int</span> <span class="n">printer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
		<span class="o">:</span> <span class="n">Scanner</span><span class="p">(</span><span class="n">scanner</span><span class="p">,</span> <span class="n">power</span><span class="p">),</span> <span class="n">Printer</span><span class="p">(</span><span class="n">printer</span><span class="p">,</span> <span class="n">power</span><span class="p">),</span> <span class="n">PoweredDevice</span><span class="p">(</span><span class="n">power</span><span class="p">)</span>
	<span class="p">{}</span>

<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Copier</span> <span class="n">cop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">//생성자 호출</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">cop</span><span class="p">.</span><span class="n">Scanner</span><span class="o">::</span><span class="n">PoweredDevice</span><span class="o">::</span><span class="n">m_i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">cop</span><span class="p">.</span><span class="n">Printer</span><span class="o">::</span><span class="n">PoweredDevice</span><span class="o">::</span><span class="n">m_i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

PoweredDevice : 3
Scanner : 1
Printer : 2
000000A95D0FF998
000000A95D0FF998
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Scanner</code>, <code class="language-plaintext highlighter-rouge">Print</code>는 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>를 가상으로 상속 받고 있다.
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Scanner</span> <span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">PoweredDevice</span>

<span class="k">class</span> <span class="nc">Copier</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Scanner</span><span class="p">,</span> <span class="k">public</span> <span class="n">Printer</span>
</code></pre></div>    </div>
    <ul>
      <li>이 덕분에 <code class="language-plaintext highlighter-rouge">Scanner</code>, <code class="language-plaintext highlighter-rouge">Print</code>을 둘 다 상속 받는 <code class="language-plaintext highlighter-rouge">Copier</code>에 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>타입이 <u>중복되지 않고 단 하나만 존재하게 된다.</u>
        <ul>
          <li>출력 결과 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>타입 생성자가 딱 한번만 호출된 것을 볼 수 있다.</li>
          <li><code class="language-plaintext highlighter-rouge">Scanner</code>로부터 받은 <em>m_i</em> 과 <code class="language-plaintext highlighter-rouge">Printer</code>로부터 받은 <em>m_i</em>의 주소 또한 동일하다는 것을 알 수 있다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Copier</code>의 생성자에서 따로 직접 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>타입 생성자를 호출해주어야 한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">PoweredDevice</code>을 가상 상속을 받은 후로 그의 자식인 <code class="language-plaintext highlighter-rouge">Scanner</code>와 <code class="language-plaintext highlighter-rouge">Printer</code>는 <u>더 위로 올라가지 않기 때문에</u> <code class="language-plaintext highlighter-rouge">PoweredDevice</code>생성자 호출를 직접 해주어야 한다.
        <ul>
          <li>안해주면 컴파일러가 알아서 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>의 디폴트 생성자를 호출하는데 현재 <code class="language-plaintext highlighter-rouge">PoweredDevice</code> 생성자 중 매개변수가 있는 생성자가 있으므로 이를 직접 호출해야 에러가 안난다.
            <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Copier</span><span class="p">(</span><span class="kt">int</span> <span class="n">scanner</span><span class="p">,</span> <span class="kt">int</span> <span class="n">printer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
  <span class="o">:</span> <span class="n">Scanner</span><span class="p">(</span><span class="n">scanner</span><span class="p">,</span> <span class="n">power</span><span class="p">),</span> <span class="n">Printer</span><span class="p">(</span><span class="n">printer</span><span class="p">,</span> <span class="n">power</span><span class="p">),</span> <span class="n">PoweredDevice</span><span class="p">(</span><span class="n">power</span><span class="p">)</span>
<span class="p">{}</span>
</code></pre></div>            </div>
          </li>
          <li>어차피 가장 조상은 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>이기 때문에 초기화 목록에서 제일 뒤에있어도 <code class="language-plaintext highlighter-rouge">PoweredDevice</code>가 가장 먼저 메모리에 정의 된다. <a href="https://ansohxxn.github.io/cpp/chapter11-2/#-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EC%88%9C%EC%84%9C">참고 포스트</a></li>
          <li>가상 상속의 원리
            <ul>
              <li><img src="https://user-images.githubusercontent.com/42318591/87218074-7a1f5b80-c38a-11ea-85bc-94f9d3b2e9cf.png" alt="image" width="70%" height="70%" class="align-center" /></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET