I"q#<p class="notice--warning">Udemy에 있는 <strong>Unreal Engine C++ Developer: Learn C++ and Make Video Games</strong> 강의를 듣고 정리한 필기입니다. 😀</p>

<p><br /></p>

<h1 id="chapter-1-bulls--cows-게임-만들기">Chapter 1. Bulls &amp; Cows 게임 만들기</h1>

<h2 id="-visual-studio-세팅">🚀 Visual Studio 세팅</h2>

<blockquote>
  <p>에디터는 편집 - 에디터 개인 설정 - 소스코드 에서 바꿀 수 있다.</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/42318591/101231858-5241e300-36f1-11eb-90a6-6da69a249f23.png" alt="image" /></p>

<p>파일 - Visual Studio 열기 클릭</p>

<p><br /></p>

<h2 id="-액터와-컴포넌트">🚀 액터와 컴포넌트</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Actor</code>
    <ul>
      <li>여러개의 컴포넌트들이 붙을 수 있는 컨테이너</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Component</code>
    <ul>
      <li><u>유니티와 마찬가지로 언리얼에서도 C++ 코드가 컴포넌트로서 역할을 할 수 있다.</u>
        <ul>
          <li>사용자 지정 Custom 컴포넌트인 셈</li>
        </ul>
      </li>
      <li>Static Mesh 같은 것도 다 컴포넌트이다.</li>
    </ul>
  </li>
  <li><strong>액터도 다른 액터의 컴포넌트가 될 수 있다.</strong>
    <ul>
      <li>👉 모드에 있는 액터를 다른 액터의 컴포넌트로서 붙일 수 있다.</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/101233366-dbf6ae00-36fb-11eb-8e4b-a4d50d173bc8.png" alt="image" /></p>

<p><strong>Bulls &amp; Cows 게임은 사용자가 이 터미널에 입력을 하면서 이루어질 것이기 때문에 <u>터미널 Actor에 📜BullCowCatridge.cpp 를 만들어 이를 컴포넌트로 붙여주어</u> 동작하게 할 것이다.</strong></p>

<p><img src="https://user-images.githubusercontent.com/42318591/101233903-85d73a00-36fe-11eb-81a9-2cf8e0647ba1.png" alt="image" /></p>

<p>이렇게 📜BullCowCatridge.cpp 를 컴포넌트로서 터미널 Actor에 붙였다.</p>

<p><br /></p>

<h2 id="-언리얼에서의-문자열">🚀 언리얼에서의 문자열</h2>

<h3 id="bullcowcartridgeh">📜BullCowCartridge.h</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma once
</span>
<span class="cp">#include "CoreMinimal.h"
#include "Console/Cartridge.h"
#include "BullCowCartridge.generated.h"
</span>
<span class="n">UCLASS</span><span class="p">(</span><span class="n">ClassGroup</span><span class="o">=</span><span class="p">(</span><span class="n">Custom</span><span class="p">),</span> <span class="n">meta</span><span class="o">=</span><span class="p">(</span><span class="n">BlueprintSpawnableComponent</span><span class="p">))</span>
<span class="k">class</span> <span class="nc">BULLCOWGAME_API</span> <span class="n">UBullCowCartridge</span> <span class="o">:</span> <span class="k">public</span> <span class="n">UCartridge</span>
<span class="p">{</span>
	<span class="n">GENERATED_BODY</span><span class="p">()</span>

	<span class="nl">public:</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">BeginPlay</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnInput</span><span class="p">(</span><span class="k">const</span> <span class="n">FString</span><span class="o">&amp;</span> <span class="n">Input</span><span class="p">)</span> <span class="k">override</span><span class="p">;</span>

	<span class="c1">// Your declarations go below!</span>
	<span class="nl">private:</span>
	
<span class="p">};</span>
</code></pre></div></div>

<h3 id="bullcowcatridgecpp">📜BullCowCatridge.cpp</h3>

<blockquote>
  <p>터미널 액터에 붙게 되는 컴포넌트</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "BullCowCartridge.h"
</span>
<span class="kt">void</span> <span class="n">UBullCowCartridge</span><span class="o">::</span><span class="n">BeginPlay</span><span class="p">()</span> <span class="c1">// When the game starts</span>
<span class="p">{</span>
    <span class="n">Super</span><span class="o">::</span><span class="n">BeginPlay</span><span class="p">();</span>
    <span class="n">PrintLine</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"Wecome to Bull Cows!"</span><span class="p">));</span>
    <span class="n">PrintLine</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"Press enter to continue..."</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">UBullCowCartridge</span><span class="o">::</span><span class="n">OnInput</span><span class="p">(</span><span class="k">const</span> <span class="n">FString</span><span class="o">&amp;</span> <span class="n">Input</span><span class="p">)</span> <span class="c1">// When the player hits enter</span>
<span class="p">{</span>
    <span class="c1">// 아직 구현 X</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/42318591/101236681-972c4080-3716-11eb-9dd9-d51d366f43ce.png" alt="image" /></p>

<ul>
  <li>언리얼도 일반 C++ 프로그래밍 방식과 같이 이렇게 헤더 파일엔 클래스와 함께 멤버 함수들은 프로토타입만 정의해놓고 이렇게 <code class="language-plaintext highlighter-rouge">.cpp</code> 파일에서 함수 바디를 정의해주는 것 같다.
    <ul>
      <li>📜”BullCowCartridge.h” 헤더파일에 <code class="language-plaintext highlighter-rouge">UBullCowCartridge</code> 클래스가 있고 이 클래스는 멤버 함수 BeginPlay(), OnInput(const FString&amp; Input) 를 가진다. 함수 바디 정의는 이 📜BullCowCatridge.cpp 에서 해준 것.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">BeginPlay()</code>는 이 스크립트가 붙은 액터가 게임에서 처음으로 활성화될 때 실행 되는 그 BeginPlay()를 오버라이딩 한 함수다.
    <ul>
      <li>PrintLine 함수는 추후 작성할 📜Cartridge 클래스에 있는 멤버 함수다. (📜BullCowCatridge 클래스의 부모라 상속 받음)
        <ul>
          <li>터미널 액터에 텍스트를 띄우는 역할을 한다.</li>
        </ul>
      </li>
      <li>게임이 시작되면 위 두 줄의 텍스트가 터미널 액터에 그려진다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="fstring--text-매크로">FString &amp; TEXT 매크로</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PrintLine</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"Wecome to Bull Cows!"</span><span class="p">));</span>
<span class="n">FString</span> <span class="n">HiddenWord</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">"cake"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">TEXT</code> 매크로 (<a href="https://docs.unrealengine.com/ko/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/StringHandling/index.html">참고</a>)
    <ul>
      <li>언리얼에서는 문자열 리터럴을 TEXT 매크로 안에 넣어서 넘기는게 좋다.
        <ul>
          <li>모든 플랫폼에서 2 바이트 문자열로 동작하게끔 해준다.</li>
        </ul>
      </li>
      <li>어떤 플랫폼에서든 동작할 수 있도록 언리얼이 인코딩을 해주기 때문이다.</li>
    </ul>
  </li>
  <li>언리얼의 3 가지 문자열 클래스
    <ul>
      <li><code class="language-plaintext highlighter-rouge">FName</code></li>
      <li><code class="language-plaintext highlighter-rouge">FText</code> 👉 언리얼의 자동 현지화(번역)를 지원한다.</li>
      <li><code class="language-plaintext highlighter-rouge">FString</code> 👉 C++ 에서의 <code class="language-plaintext highlighter-rouge">string</code>처럼 문자열 처리와 관련된 메서드들 사용 가능</li>
    </ul>
  </li>
  <li>언리얼에선 <code class="language-plaintext highlighter-rouge">int</code> 말고 <code class="language-plaintext highlighter-rouge">int32</code>를 쓴다.</li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET