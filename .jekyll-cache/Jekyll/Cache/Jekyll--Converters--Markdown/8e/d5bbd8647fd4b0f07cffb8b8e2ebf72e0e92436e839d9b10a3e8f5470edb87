I"wF<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 게임 만들기 연습 문제 패키지</strong> 강의를 듣고 정리한 필기입니다.😀 <br />
<a href="https://github.com/jmhong-simulation/GameDevPracticePackage">🌜 공부에 사용된 홍정모 교수님의 코드들 보러가기</a> <br />
<a href="https://www.inflearn.com/course/c-2">🌜 [홍정모의 게임 만들기 연습 문제 패키지] 강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-3-게임-물리-맛보기--공-두-개를-충돌시켜보자">Chapter 3. 게임 물리 맛보기 : 공 두 개를 충돌시켜보자</h1>

<blockquote>
  <p>벡터, 상대 속도 등등, 해당 강의에서 다루었던 물리학적 개념들이 문과생인 나에겐 생소하고 잘 와닿지 않았던 개념이라 강의를 필기하기에 앞서 개인적으로 따로 공부하여 정리해보았다.</p>
</blockquote>

<h1 id="벡터-개념">벡터 개념</h1>

<p><a href="https://ansohxxn.github.io/unity%20lesson%201/chapter5-1/">C# 프로그래밍 : 벡터, 평행 이동</a> 포스트도 참고!</p>

<h2 id="-벡터">🔔 벡터</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/85194782-5166f180-b309-11ea-9d58-9cef50562708.png" alt="image" width="80%" height="80%" class="align-center" /></p>

<h3 id="스칼라와-벡터">스칼라와 벡터</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">스칼라</code> : 크기
    <ul>
      <li><em>ex) 시간, 몸무게, 키 등등</em></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">벡터</code> : 크기 + <u>방향</u> ⭐
    <ul>
      <li><em>ex) 속도, 힘 등등</em></li>
    </ul>
  </li>
</ul>

<h3 id="벡터의-크기와-방향">벡터의 크기와 방향</h3>
<ul>
  <li>벡터의 <code class="language-plaintext highlighter-rouge">크기</code>는 스칼라 값으로 <u>피타고라스의 법칙</u>으로 구할 수 있다.
    <ul>
      <li>벡터의 <code class="language-plaintext highlighter-rouge">크기</code> = 벡터의 <code class="language-plaintext highlighter-rouge">길이</code> = 벡터의 <code class="language-plaintext highlighter-rouge">절대값</code> = <code class="language-plaintext highlighter-rouge">화살표의 길이</code></li>
      <li>예시
        <ul>
          <li>축구공이 멀리 날아갈수록, 즉 축구공이 날아간 행적을 표시하는 화살표의 길이가 길 수록 크기가 큰 벡터라고 말할 수 있다.</li>
          <li>165cm 라는 내 키도 땅을 시작점으로 해서 내 정수리의 끝점을 방향으로 하는 벡터의 크기라고 해석할 수 있음</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">뱡향</code>은 <u>화살표</u>로 표시한다.
    <ul>
      <li>시작좌표 A, 종점 좌표 B라면 \(\vec{AB}\) 라고 표시할 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="같은-벡터">같은 벡터</h3>
<p><img src="https://user-images.githubusercontent.com/42318591/85195837-bffb7d80-b310-11ea-9f86-e5016de45fad.png" alt="image" width="80%" height="80%" class="align-center" /></p>

<ul>
  <li>시작점, 종점과는 상관 없이 벡터의 <u>길이와 방향이 모두 같으면</u> 같은 벡터다.</li>
  <li>벡터에게 <u>위치는 중요하지 않다.</u>
    <ul>
      <li>같은 벡터라도 시작 좌표, 종점 좌표는 다를 수 있다.
        <ul>
          <li>크기와 방향만 같다면 이리저리 옮겨다녀도 모두 같은 벡터.</li>
        </ul>
      </li>
      <li>벡터는 어떤 특정 지점에 고정되어있지 않다.</li>
    </ul>
  </li>
</ul>

<h3 id="프로그래밍에서의-벡터">프로그래밍에서의 벡터</h3>
<p><img src="https://user-images.githubusercontent.com/42318591/85195544-73af3e00-b30e-11ea-94aa-8a010866fd62.png" alt="image" width="80%" height="80%" class="align-center" /></p>

<ul>
  <li>벡터는 <기하학>에서의 개념이지만 <대수학>영역인 프로그래밍에서 어떻게 쓰이는지를 잘 파악해야 한다.</대수학></기하학></li>
  <li>Vector2(x, y), Vector3(x, y, z) 으로 나타낼 수 있다.</li>
  <li>x, y, z 는 각각 벡터의 <u>성분</u>이 된다.</li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">위치 좌표</code>로 쓰임 <em>(절대좌표)</em>
    <ul>
      <li>사실 위치 좌표는 스칼라로 보이더라도 이 또한 <u>원점을 시작점으로, 해당 위치를 종점</u>으로 하여 화살표로 이어진 <code class="language-plaintext highlighter-rouge">벡터</code>라고 해석할 수 있다.</li>
    </ul>
    <ul>
      <li>위치 좌표로서의 Vector2(2, 4)는 Vector2(0, 0) <u>원점을 시작점으로 했을 때</u> Vector2(2, 4)로 향하는 벡터라고도 할 수 있다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">벡터</code>로 쓰임 <em>(상대좌표)</em>
    <ul>
      <li>어떤 방향으로 얼마만큼의 크기 만큼 변화했는지의 정도</li>
    </ul>
  </li>
</ol>

<h3 id="평행한-벡터">평행한 벡터</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">방향</code>이 같다는 의미.
    <ul>
      <li>\(\vec{a}\) 벡터와 \(\vec{b}\) 가 방향이 같을 경우 다음과 같이 표현할 수 있다.</li>
      <li>\[\vec{b} = k \vec{a}\]</li>
      <li>방향과 더불어 크기까지 같을 경우 같은 벡터다. (\(k = 1\))
        <ul>
          <li>\[\vec{b} = \vec{a}\]</li>
        </ul>
      </li>
      <li>Vector2(2, 2)와 Vector2(3, 3)은 크기는 다르지만 방향은 같은 평행한 벡터다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-단위-벡터---방향-벡터">🔔 단위 벡터 ( = 방향 벡터)</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/85197775-47032280-b31e-11ea-9c44-9e2a3de28bb7.png" alt="image" width="30%" height="30%" class="align-center" /></p>

<blockquote>
  <p>어떤 벡터의 <code class="language-plaintext highlighter-rouge">단위벡터</code>란 그 벡터와 방향은 같되 <u>크기는 1</u>인 벡터이다. 오직 <u>해당 벡터의 방향</u>만을 나타냄.</p>
</blockquote>

<ul>
  <li>cm 기준으로 단위는 1cm가 된다. 10cm는 10 * 1cm. 단위가 만약 1cm가 아니라 6cm, 0.2cm 이랬으면 계산하기가 복잡했을 것이다.
    <ul>
      <li>이처럼 벡터를 <code class="language-plaintext highlighter-rouge">단위벡터 * 크기</code> 로 쉽게 표현할 수 있다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">단위 벡터</code>는 크기가 1이라 딱 방향만 나타내기 때문에 가능한 일.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>같은 크기(= 1) 라고 가정하면 비교하기가 편함
    <ul>
      <li>크기는 무시하고 두 벡터의 방향만을 비교하고 싶다면 두 벡터의 단위 벡터를 비교하면 됨.</li>
    </ul>
  </li>
  <li>단위 벡터끼리 곱하는 연산은 천만번 곱해도 단위벡터다.
    <ul>
      <li>이 사실만으로 <u>연산을 아주 간소화</u> 할 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="단위-벡터의-표현">단위 벡터의 표현</h3>

<ul>
  <li>벡터 i는 수평 방향을 향하는 크기 1의 단위 벡터</li>
</ul>

\[\hat{i} = {1\brack0}, \vert{\hat{i}}\vert=1\]

<ul>
  <li>
    <p>벡터 j는 수직 방향을 향하는 크기 1의 단위 벡터</p>

\[\hat{j} = {0\brack1}, \vert{\hat{j}}\vert=1\]
  </li>
  <li>
    <p>벡터 v는 i 를 2배 크기로 늘린 벡터와 j 를 3 배 크기로 늘린 벡터의 덧셈과 같다.</p>

\[\vec{v} = 2\hat{i}+3\hat{j}\]
  </li>
  <li>
    <p>이처럼 단위 벡터 i,j 로 모든 벡터를 표현할 수 있다.</p>
  </li>
</ul>

<h3 id="단위-벡터-구하기">단위 벡터 구하기</h3>

<p><a href="https://ansohxxn.github.io/unity%20lesson%201/chapter5-1/#%EB%B0%A9%ED%96%A5-%EB%B2%A1%ED%84%B0--%EB%8B%A8%EC%9C%84-%EB%B2%A1%ED%84%B0">방향벡터 포스트 참고</a></p>

<blockquote>
  <p>단위 벡터 = 벡터의 성분 / 벡터의 길이</p>
</blockquote>

\[Vector2(x,y)'s 단위벡터 = ({x\over \sqrt{x^2 + y^2}} , {y\over \sqrt{x^2 + y^2}})\]

<p>\[\vec{A} ‘s 단위벡터 = {\vec{A}\over{\vert\vec{A}\vert}}\]</p>

<p><br /></p>

<h2 id="-벡터의-덧셈">🔔 벡터의 덧셈</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/85196029-4b294300-b312-11ea-8727-d22402efa54d.png" alt="image" width="50%" height="50%" class="align-center" /></p>

<ul>
  <li>성분끼리 더해주면 땡이다.</li>
  <li><u>이동량을 더해줄 때</u> 많이 사용!
    <ul>
      <li>좌표 이동시킬 때 등등</li>
    </ul>
  </li>
  <li>바람의 힘 벡터를 만나 자동차의 운동 벡터는 방향과 힘이 저렇게 바뀐다!
    <ul>
      <li>변경된 자동차의 벡터 = 자동차의 원래 벡터 + 바람 벡터</li>
      <li>바람 벡터만큼 더해주는 셈</li>
    </ul>
  </li>
</ul>

<h3 id="벡터의-덧셈-원리">벡터의 덧셈 원리</h3>
<ul>
  <li><img src="https://user-images.githubusercontent.com/42318591/85196944-a65e3400-b318-11ea-96c3-0580d7f2d48c.png" alt="image" width="50%" height="50%" class="align-center" /></li>
</ul>

<ol>
  <li>두 벡터를 이어지도록 시작점을 합친다.
    <ul>
      <li><img src="https://user-images.githubusercontent.com/42318591/85196951-baa23100-b318-11ea-8aaa-a7fb6582cd82.png" alt="image" width="90%" height="90%" class="align-center" /></li>
    </ul>
  </li>
  <li>시점을 합친 상태에서 \(\vec{A}\)벡터의 시작점에서 \(\vec{B}\)벡터의 종점으로 이어 새로운 벡터를 만든다.
    <ul>
      <li><img src="https://user-images.githubusercontent.com/42318591/85196963-cf7ec480-b318-11ea-9198-67c2c390060d.png" alt="image" width="90%" height="90%" class="align-center" /></li>
    </ul>
  </li>
</ol>

<p><img src="https://user-images.githubusercontent.com/42318591/85197238-b37c2280-b31a-11ea-82cc-d955e4f7a357.png" alt="image" width="80%" height="80%" class="align-center" /></p>

<p><br /></p>

<h2 id="-벡터의-뺄셈">🔔 벡터의 뺄셈</h2>

<h3 id="영벡터와-역벡터">영벡터와 역벡터</h3>

<ul>
  <li>영벡터
    <ul>
      <li>크기가 0 인 벡터.</li>
      <li>고로 방향도 없다.</li>
    </ul>
  </li>
  <li>역벡터
    <ul>
      <li>크기는 같고 방향만 정반대인 벡터</li>
      <li>시작점과 종점이 서로 바뀜.</li>
      <li>\(\vec{A}\)벡터의 역벡터는 \(-\vec{A}\)벡터이며</li>
      <li>\(\vec{A} + (-\vec{A}) = 영벡터\)</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/85198063-95192580-b320-11ea-8675-fae6151cb3ff.png" alt="image" width="40%" height="40%" class="align-center" /></p>

<h3 id="벡터-뺄셈의-원리">벡터 뺄셈의 원리</h3>

<p><img src="https://user-images.githubusercontent.com/42318591/85199440-9a7b6d80-b32a-11ea-90dc-43d94b36ab12.png" alt="image" width="80%" height="80%" class="align-center" /></p>

<ul>
  <li>\(\vec{A} -\vec{B} = \vec{A} + (-\vec{B})\)
    <ul>
      <li>\(\vec{A}\)벡터와 \(\vec{B}\)벡터의 뺄셈은</li>
      <li>\(\vec{A}\)벡터와 \(\vec{B}\)벡터의 역벡터인 \((-\vec{B})\)벡터와의 덧셈과 같다.</li>
    </ul>
  </li>
</ul>

<h3 id="벡터의-뺄셈--종점벡터---시작벡터">벡터의 뺄셈 = 종점벡터 - 시작벡터</h3>

<ul>
  <li>벡터의 뺄셈으로 기준이 되는 위치벡터에서 <u>얼만큼 이동해야</u> 목적지 벡터에 도달할 수 있는지 알 수 있다. ⭐⭐⭐</li>
</ul>

<h4 id="플레이어를-따라가는-ai-몬스터">플레이어를 따라가는 AI 몬스터</h4>
<p><img src="https://user-images.githubusercontent.com/42318591/85200150-e8df3b00-b32f-11ea-9b37-757cd60f8166.png" alt="image" width="90%" height="90%" class="align-center" /></p>

<ul>
  <li>몬스터는 계속 플레이어를 따라가야 한다.
    <ul>
      <li>즉 <code class="language-plaintext highlighter-rouge">플레이어의 위치</code> (<u>목적지 벡터</u>)로부터 <code class="language-plaintext highlighter-rouge">몬스터의 위치</code>(<u>출발지 벡터</u>)를 <u>뺀 거리벡터
</u>        <ul>
          <li><em>player.transform.position - transform.position</em>  (몬스터 입장에서)</li>
          <li>👉 <strong>몬스터가 플레이어 위치에 도달하기 까지 움직여야할 길이와 방향을 뜻함</strong></li>
          <li>이 거리 벡터의 <u>단위 벡터</u>를 구하면  그게 바로 몬스터(시점)가 플레이어(종점)를 <u>바라보는 방향</u>이 된다.
            <ul>
              <li>몬스터가 플레이어를 바라보는 <code class="language-plaintext highlighter-rouge">방향</code> = (플레이어벡터 - 몬스터벡터)의 <code class="language-plaintext highlighter-rouge">단위벡터</code></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>플레이어를 향해 몬스터를 움직이게 하려면 플레이어의 위치벡터로부터 몬스터의 위치벡터를 뺄셈한 결과값을 몬스터의 위치에 매 프레임마다 더해주면 된다.
    <ul>
      <li>몬스터 위치 <code class="language-plaintext highlighter-rouge">+=</code> 플레이어 위치벡터 - 몬스터 위치벡터</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>두 벡터의 뺄셈의 <code class="language-plaintext highlighter-rouge">단위 벡터</code> = 몬스터(시점)가 플레이어(종점)을 바라보는 <u>방향</u></p>
</blockquote>

<ul>
  <li>이 <code class="language-plaintext highlighter-rouge">단위벡터</code>에 몬스터로부터 플레이어까지의 거리의 <code class="language-plaintext highlighter-rouge">크기</code>를 곱하면 몬스터 위치로부터 플레이어 위치에 도달하는 거리 벡터가 된다.
    <ul>
      <li>몬스터에서 플레이어까지의 벡터의 크기가 N 이라면 이 단위벡터를 계속 ‘N’번 덧셈하면 몬스터가 플레이어에 다다를 수 있게 된다.</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/85200223-820e5180-b330-11ea-9cdc-0f9a8fde076c.png" alt="image" class="align-center" /></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span> <span class="n">velocity</span> <span class="o">=</span> <span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="err">–</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">).</span><span class="n">normalized</span><span class="p">;</span>
<span class="n">velocity</span> <span class="o">=</span> <span class="n">velocity</span> <span class="o">*</span> <span class="mf">10.0</span><span class="n">f</span><span class="p">;</span>
<span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="o">+</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span> <span class="o">*</span> <span class="n">velocity</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li><em>Vector3 velocity = (player.transform.position – transform.position).normalized;</em>
    <ul>
      <li>몬스터가 플레이어를 향하는 <code class="language-plaintext highlighter-rouge">방향벡터</code>
        <ul>
          <li>(플레이어의 위치 - 몬스터의 위치).normalized</li>
          <li>normalized 하여 방향 벡터를 구함.</li>
          <li>크기는 1이고 오로지 몬스터가 플레이어를 <u>바라보는 방향</u>만을 나타낸다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>🚗velocity = 🚕velocity * 10.0f;</em>
    <ul>
      <li>🚕velocity
        <ul>
          <li>몬스터가 플레이어를 바라보는 방향벡터</li>
        </ul>
      </li>
      <li>🚕velocity * 10.0f;
        <ul>
          <li>크기를 10으로 곱함.</li>
        </ul>
      </li>
      <li>🚗velocity
        <ul>
          <li>최종 <code class="language-plaintext highlighter-rouge">속도 벡터</code>.</li>
          <li>몬스터가 플레이어를 바라보는 <code class="language-plaintext highlighter-rouge">방향</code> + <code class="language-plaintext highlighter-rouge">크기</code>는 10인 <code class="language-plaintext highlighter-rouge">벡터</code>.</li>
          <li>몬스터는 1 프레임당 10의 크키 단위로 플레이어를 향해 움직일 것.</li>
          <li>방향에 속력(크기)를 곱해 속도를 만듬.
            <ul>
              <li>이 속력 값이 클 수록 더 빨리 움직이겠지.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>transform.position = transform.position + Time.deltaTime * velocity;</em>
    <ul>
      <li>몬스터의 새로운 위치 = 몬스터의 기존 위치 + 시간 * 속도
        <ul>
          <li>몬스터 기준에서 플레이어를 추적하는 방향으로 매 프레임마다 10.0f 크기의 벡터를 더한다.</li>
          <li>매 프레임마다 몬스터가 플레이어를 추적하게 될 것.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET