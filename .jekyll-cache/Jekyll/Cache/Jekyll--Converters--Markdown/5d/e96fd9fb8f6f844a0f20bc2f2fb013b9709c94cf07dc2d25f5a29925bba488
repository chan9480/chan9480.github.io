I")<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 게임 만들기 연습 문제 패키지</strong> 강의를 듣고 정리한 필기입니다.😀 <br />
<a href="https://github.com/jmhong-simulation/GameDevPracticePackage">🌜 공부에 사용된 홍정모 교수님의 코드들 보러가기</a> <br />
<a href="https://www.inflearn.com/course/c-2">🌜 [홍정모의 게임 만들기 연습 문제 패키지] 강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-3-게임-물리-맛보기--공-두-개를-충돌시켜보자">Chapter 3. 게임 물리 맛보기 : 공 두 개를 충돌시켜보자</h1>

<blockquote>
  <p>벡터, 상대 속도 등등, 해당 강의에서 다루었던 물리학적 개념들이 문과생인 나에겐 생소하고 잘 와닿지 않았던 개념이라 강의를 필기하기에 앞서 개인적으로 따로 공부하여 정리해보았다.</p>
</blockquote>

<ul>
  <li><a href="https://ansohxxn.github.io/c++%20games/chapter3-2-1/">벡터 개념</a></li>
</ul>

<h1 id="벡터-내적">벡터 내적</h1>

<h2 id="-벡터의-스칼라-곱">🔔 벡터의 스칼라 곱</h2>
<p>\[\vec{A} = k\vec{B}\]</p>
<ul>
  <li>\(\vec{A}\) 벡터와 \(\vec{B}\) 벡터는 <u>방향이 같다.</u></li>
  <li>\(\vec{A}\) 벡터의 <u>크기</u>는 \(\vec{B}\) 벡터의 <u>크기</u>의 \(k\)배가 된다.</li>
</ul>

<p><br /></p>

<h2 id="-벡터-내적-dot-product">🔔 벡터 내적 (Dot Product)</h2>

<h3 id="벡터-내적의-기하학적-원리">벡터 내적의 기하학적 원리</h3>

<p><img src="https://user-images.githubusercontent.com/42318591/85204057-cf98b780-b34c-11ea-890a-c7830197aaff.png" alt="image" width="90%" height="90%" class="align-center" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">벡터 내적</code> : <u>두 벡터의 곱하기</u> 정의 중 하나로 (다른 하나로는 <em>외적</em> 이 있다) 벡터를 마치 수처럼 곱하는 개념이다. 따라서 <u>결과 값도 스칼라</u> 값이다.</p>
</blockquote>

<blockquote>
  <p>\(\vec{A}\cdot\vec{B}\) A dot B 라고 부른다.</p>
</blockquote>

<p>그림 속에서 상자를 끌고자 하는 수평 방향가진 벡터를 <code class="language-plaintext highlighter-rouge">메인 벡터</code>라고 하고 수지가 상자를 해당 방향으로 이동 시키기 위해 상자를 끌며 힘을 주는 방향을 가진 벡터를 <code class="language-plaintext highlighter-rouge">서브 벡터</code>라고 대충 칭해 보자. <u>수지가 주는 힘인 서브 벡터가 메인 벡터에 도움을 주는 정도(스칼라)</u>와 <u>메인 벡터의 크기(스칼라)</u>를 곱하면 이게 바로 두 벡터의 내적 값이 된다. 둘 중 어느 벡터를 메인 벡터로 삼든 그건 상관 없다. 물리학적으로 <u>'일'</u>을 한 정도를 내적으로 표현한다. \(W = \vec{F}\cdot\vec{S}\)</p>

<p><img src="https://user-images.githubusercontent.com/42318591/85204758-9b73c580-b351-11ea-99ee-3eccd28dc25d.png" alt="image" width="90%" height="90%" class="align-center" /></p>

<ul>
  <li>스칼라끼리 곱은 그냥 2 곱하기 3은 6 하면 그만이지만 벡터는 크기와 더불어 <code class="language-plaintext highlighter-rouge">방향</code>이 있기 때문에 곱을 해주기 위해선 두 벡터 중 하나를 다른 한 벡터에 <u>정사영</u>시켜 두 벡터의 방향을 일치시켜 준다.</li>
  <li>\[벡터 내적 = \vec{A}\cdot\vec{B} = \vert\vec{A}\vert×\vert\vec{B}\vert×\cos\theta\]
    <ul>
      <li>메인 벡터를 \(\vec{A}\)라고 하면 (둘 중 뭐를 메인 벡터로 생각할지는 상관 없다.) 메인 벡터의 크기는 \(\vert\vec{A}\vert\) 가 되고</li>
      <li>\(\vert\vec{B}\vert×\cos\theta\)는 메인 벡터인 \(\vec{A}\)에 도움 혹은 영향을 끼친 <code class="language-plaintext highlighter-rouge">정도(양)</code>을 의미한다.
        <ul>
          <li>\vec{B}를 vec{A}에 정사영 했을 때의 길이</li>
        </ul>
      </li>
      <li>이 두 개의 곱은 두 벡터의 내적값이 된다.</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/85216892-3d80c580-b3c5-11ea-8cbe-10e8f787a261.png" alt="image" width="100%" height="100%" class="align-center" /></p>

<p><br /></p>

<h3 id="벡터의-공식">벡터의 공식</h3>

<ol>
  <li>기하학
    <ul>
      <li>\[\vec{A}\cdot\vec{B} = \vert\vec{A}\vert×\vert\vec{B}\vert×\cos\theta\]</li>
    </ul>
  </li>
  <li>대수학(프로그래밍)
    <ul>
      <li>\[\vec{A}\cdot\vec{B} = x_A{\cdot}x_B + y_A{\cdot}y_B \]</li>
      <li>두 벡터의 각 성분끼리 곱하고 더해준다.</li>
      <li>프로그래밍 할 때 벡터의 내적 값은 주로 이 공식으로 구한다.</li>
      <li><a href="https://blog.naver.com/at3650/40202767942">증명은 이 블로그의 포스트 참고</a></li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h3 id="벡터-내적-case-by-case">벡터 내적 Case by Case</h3>

<p>\[벡터 내적 = \vec{A}\cdot\vec{B} = \vert\vec{A}\vert×\vert\vec{B}\vert×\cos\theta\]</p>

<ul>
  <li>\(\vert\vec{A}\vert\) 와 \(\vert\vec{B}\vert\)는 양수이므로 \(\cos\theta\)의 부호에 달려 있다.</li>
</ul>

<ol>
  <li>두 벡터의 내적 값이 <code class="language-plaintext highlighter-rouge">양수</code>
    <ul>
      <li>\(\cos\theta\) &gt; 0</li>
    </ul>
    <ul>
      <li>0 ~ 90도</li>
      <li>270 ~ 360도
      - 두 벡터의 방향이 <u>예각</u>을 이룬다.</li>
      <li>즉 서브벡터가 메인벡터에게 <u>도움이 되는 영향</u>을 주고 있다.
        <ul>
          <li>상자를 움직여야 하는 방향으로 열심히 상자를 끌고 있는 경우와 비슷</li>
          <li>상자를 끄는 힘과 상자를 움직여야하는 힘의 각도가 예각</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>두 벡터의 내적 값이 <code class="language-plaintext highlighter-rouge">0</code>
    <ul>
      <li>\(\cos\theta\) = 0</li>
    </ul>
    <ul>
      <li>90도
      - 두 벡터의 방향이 <u>직각</u>을 이룬다.</li>
      <li>즉 서브벡터가 메인벡터에게 도움을 주는 영향이든 악영향이든 <u>어떤 영향도 주고 있지 않다.</u>
        <ul>
          <li>상자를 움직여야 하는데도 불구하고 그냥 상자를 들고 가만히 서 있는 것과 마찬가지.</li>
          <li>상자를 끄는 힘(전혀 끌지 않고 들고 서있음)과 상자를 움직여야하는 힘의 각도가 직각</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>두 벡터의 내적 값이 <code class="language-plaintext highlighter-rouge">음수</code>
    <ul>
      <li>\(\cos\theta\) &lt; 0</li>
    </ul>
    <ul>
      <li>90 ~ 270도
      - 두 벡터의 방향이 <u>둔각</u>을 이룬다.</li>
      <li>즉 서브벡터가 메인벡터에게 <u>반대로 악영향</u>을 주고 있다.
        <ul>
          <li>상자를 움직여야 하는 방향과 반대 방향으로 상자를 끌면서 방해하는 것에 비유할 수 있다.</li>
          <li>상자를 끄는 힘과 상자를 움직여야하는 힘의 각도가 둔각</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h3 id="방향이-같은-벡터끼리의-내적">방향이 같은 벡터끼리의 내적</h3>

<ul>
  <li>방향이 같다는건 평행하다는 것이기 때문에 두 벡터의 사이각이 0도라는 것이다.
    <ul>
      <li>\(\theta = 0\)이면 \(\cos\theta = 1\)이 되어</li>
      <li>두 벡터의 내적 값은  \(\vert\vec{A}\vert\cdot\vert\vec{B}\vert\) 이다.</li>
    </ul>
  </li>
  <li>크기까지 같아 아예 같은 벡터끼리의 내적은 \(\vec{A}\cdot\vec{A} = \vert\vec{A}\vert^2\)
    <ul>
      <li>단위 벡터이자 같은 벡터끼리의 내적 값은 \(\vec{n}\cdot\vec{n} = 1\)이 된다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="벡터-내적의-쓰임새-in-게임프로그래밍">벡터 내적의 쓰임새 in 게임프로그래밍</h3>

<blockquote>
  <p>벡터 내적을 사용하는 예</p>
</blockquote>

<ol>
  <li>두 벡터의 사이각 구하기
    <ul>
      <li>벡터 내적 공식을 이용하여 아래와 같이 구하면 된다.</li>
      <li>\[\theta = \arccos{\vec{A}\cdot\vec{B}\over\vert\vec{A}\vert\vert\vec{B}\vert}\]</li>
    </ul>
  </li>
  <li>적이 플레이어의 앞에 있는지 뒤에 있는지 판별
    <ul>
      <li><img src="https://user-images.githubusercontent.com/42318591/85206865-ff9d8600-b35f-11ea-91fd-1ca6e5f9c583.png" alt="image" width="50%" height="50%" class="align-center" /></li>
      <li>벡터 A = 적과 플레이어의 거리.</li>
    </ul>
    <ul>
      <li>적의 위치벡터 - 플레이어의 위치벡터
      - 벡터 F = 플레이어의 정면 수직 방향 벡터</li>
      <li>\(\vec{F}\cdot\vec{A}\)
        <ul>
          <li>내적값이 양수면 F와 A가 예각.
            <ul>
              <li>적이 플레이어의 앞에 있음.</li>
            </ul>
          </li>
          <li>내적값이 음수면 F와 A가 둔각.
            <ul>
              <li>적이 플레이어의 뒤에 있음.</li>
              <li>적이 뒤에 있는 경우 렌더링 할 필요가 없음.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>적이 주인공의 시야에 있는지 판별
    <ul>
      <li><img src="https://user-images.githubusercontent.com/42318591/85206952-92d6bb80-b360-11ea-8700-f79761d23d20.png" alt="image" width="70%" height="70%" class="align-center" /></li>
      <li>주인공의 시야 각을 \(\theta\) 라고 한다면</li>
    </ul>
    <ul>
      <li>F 벡터와 벡터 A가의 내적으로 나오는 각도가 \(\theta/2\) 를 넘지 않아야 적이 시야 내에 존재.</li>
      <li>플레이어의 시야 내에 없는 적은 렌더링 할 필요가 없다.</li>
    </ul>
  </li>
  <li>카메라가 보는 방향과 화면의 방향이 서로 직교(내적값 = 0)하면 2D처럼 볼 수 있다.</li>
</ol>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET