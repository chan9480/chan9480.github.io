I"Y7<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-12-가상-함수들--순수-가상함수-추상-클래스-인터페이스">chapter 12. 가상 함수들 : 순수 가상함수, 추상 클래스, 인터페이스</h1>

<h2 id="-순수-가상함수">🔔 순수 가상함수</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">virtual</span> <span class="kt">void</span> <span class="n">func</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">순수 가삼 함수</code> : 함수의 바디가 없는 가상 함수. 즉, <u>자식 클래스에서 반드시 오버라이딩 해야 하는 함수.</u></p>
</blockquote>

<ul>
  <li>그냥 <strong>가상 함수</strong>는 자식클래스에게 오버라이딩을 권장할 뿐 필수는 아니였었다.
    <ul>
      <li>그저 자식이 오버라이딩 하면 자식 객체가 오버라이딩 한 바디를 호출하고</li>
      <li>자식이 오버라이딩 하지 않으면 자기 자신(부모)가 구현 해놓은 가상 함수의 바디를 호출하면 됐었다.</li>
    </ul>
  </li>
  <li><strong>순수 가상 함수</strong>는 바디를 두고 있지 않기 때문에 <u>자식 클래스에서 반드시 오버라이딩 해야 한다.</u>
    <ul>
      <li>선언 👉 바디 없이 함수의 프로토타입만 있되 끝에 <code class="language-plaintext highlighter-rouge">= 0</code>을 붙여준다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-추상-기본-클래스">🔔 추상 기본 클래스</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">abstract class</code> : 순수 가상 함수를 <u>포함</u> 하고 있는 클래스.</p>
</blockquote>

<ul>
  <li>순수 가상 함수를 포함하고 있어 자식 클래스들이 이를 오버라이딩 할 것을 강제한다.</li>
  <li><u>추상 클래스는 객체로 찍어낼 수 없다.</u> ⭐</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Animal</span>
<span class="p">{</span>
<span class="nl">protected:</span>
    <span class="n">string</span> <span class="n">m_name</span><span class="p">;</span>
<span class="nl">public:</span>
    <span class="n">Animal</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span>
        <span class="o">:</span><span class="n">m_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="p">{}</span>
<span class="nl">public:</span>
    <span class="n">string</span> <span class="n">getName</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_name</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">speak</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// ⭐ 순수 가상 함수</span>
<span class="p">};</span>


<span class="k">class</span> <span class="nc">Cow</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Animal</span>
<span class="p">{</span>
<span class="nl">protected:</span>
    <span class="n">string</span> <span class="n">m_name</span><span class="p">;</span>
<span class="nl">public:</span>
    <span class="n">Cow</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span>
        <span class="o">:</span><span class="n">Animal</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="p">{}</span>
<span class="p">};</span>


<span class="kt">void</span> <span class="n">Animal</span><span class="o">::</span><span class="n">speak</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Cow</span> <span class="n">cow</span><span class="p">(</span><span class="s">"hello"</span><span class="p">);</span>  <span class="c1">// ❌에러 발생!❌ 👉 부모의 순수 가상 함수를 오버라이딩 하지 않아서.</span>
    <span class="n">Animal</span> <span class="n">ani</span><span class="p">(</span><span class="s">"Hi"</span><span class="p">);</span>  <span class="c1">// ❌에러 발생!❌ 👉 추상 클래스로 객체를 만들어낼 수 없어서.</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Animal</code> 클래스는 <u>추상 클래스</u>이다.
    <ul>
      <li><strong>순수 가상 함수</strong>인 speak 를 가지고 있기 때문에!
        <ul>
          <li><em>void Animal::speak() const</em> 이렇게 클래스 바깥에서 <u>바디를 구현 해주더라도 소용 없다. 절대 쓰이지 않는다</u> 순수 가상 함수로 한번 선언이 되었다면 반드시 자식 클래스에서 오버라이딩 해야 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>Cow cow(“hello”);</em>  ❌에러 발생!❌
    <ul>
      <li>부모 클래스의 순수 가상 함수인 speak()를 오버라이딩 해주지 않은 채로 객체를 생성하려고 하니 에러.</li>
    </ul>
  </li>
  <li><em>Animal ani(“Hi”);</em>  ❌에러 발생!❌
    <ul>
      <li>추상 클래스인 Animal의 객체를 만드려고 하니 에러 발생.</li>
      <li>추상 클래스는 객체로 만들 수 없다.
        <ul>
          <li>따라서 순수 가상 함수가 아닌 getName()같은 <u>추상 클래스의 일반 멤버 함수들은 접근 지정자에 따라 본인 클래스 내부, 혹은 자식 클래스 내부(protected, public)에서만 사용할 수 있다.</u></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-인터페이스-클래스">🔔 인터페이스 클래스</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">IErrorLog</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">reportError</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">error</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">IErrorLog</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Interface</code> : <u>모-든 함수가 순수 가상 함수인 클래스</u>. 본인만의 멤버 변수는 가지지 않는다.</p>
</blockquote>

<ul>
  <li>인터페이스를 상속 받는 클래스들은 <u>반드시 인터페이스 안에 있는 모든 함수들을 전부 오버라이딩 해야 한다.</u>
    <ul>
      <li>인터페이스는 순수 가상 함수만 가지고 있기 때문이다.
        <ul>
          <li>하나라도 빠뜨리면 에러남.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>인터페이스는 본인만의 멤버 변수나 구현된 멤버 함수는 가지지 않는다.
    <ul>
      <li>인터페이스는 하는 일은 없지만 자식들에게 ‘이런 기능들을 반드시 가지고 있으시고 기능의 내용은 각자 알아서 구현하세요’라는 <strong>설계도 같은 역할</strong>을 한다.</li>
    </ul>
  </li>
  <li>인터페이스도 추상클래스의 한 종류나 마찬가지이기 때문에 <u>인터페이스로 객체로 생성할 수는 없다.</u></li>
  <li>인터페이스 클래스의 이름 앞엔 대문자 <code class="language-plaintext highlighter-rouge">I</code>를 붙여주는게 관습이다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">IErrorLog</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">reportError</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">error</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">IErrorLog</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>


<span class="k">class</span> <span class="nc">FileErrorLog</span> <span class="o">:</span> <span class="k">public</span> <span class="n">IErrorLog</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">reportError</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">errorMessage</span><span class="p">)</span> <span class="k">override</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Writing error to a file"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="k">class</span> <span class="nc">ConsoleErrorLog</span> <span class="o">:</span> <span class="k">public</span> <span class="n">IErrorLog</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">reportError</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">errorMessage</span><span class="p">)</span> <span class="k">override</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Printing error to a console"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="kt">void</span> <span class="nf">doSomething</span><span class="p">(</span><span class="n">IErrorLog</span> <span class="o">&amp;</span> <span class="n">log</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">log</span><span class="p">.</span><span class="n">reportError</span><span class="p">(</span><span class="s">"Runtime error!!"</span><span class="p">);</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">FileErrorLog</span> <span class="n">file_log</span><span class="p">;</span>
    <span class="n">ConsoleErrorLog</span> <span class="n">console_log</span><span class="p">;</span>

    <span class="n">doSomething</span><span class="p">(</span><span class="n">file_log</span><span class="p">);</span>   <span class="c1">// ⭐다형성</span>
    <span class="n">doSomething</span><span class="p">(</span><span class="n">console_log</span><span class="p">);</span> <span class="c1">// ⭐다형성</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>인터페이스 <code class="language-plaintext highlighter-rouge">IErrorLog</code>를 상속 받는 두 자식 클래스 <code class="language-plaintext highlighter-rouge">ConsoleErrorLog</code>, <code class="language-plaintext highlighter-rouge">FileErrorLog</code>.
    <ul>
      <li>인터페이스의 <em>bool reportError(const char * errorMessage)</em> 함수를 각자 오버라이딩 하고 있다.</li>
      <li>인터페이스에 가상 소멸자를 두어 부모로 자식 객체를 참조하고 있을 때 메모리 해제시 자식들의 소멸자가 호출되게 한다.</li>
    </ul>
  </li>
  <li><strong>다형성</strong>
    <ul>
      <li><em>doSomething(file_log);</em> 👉 <em>IErrorLog &amp; log = file_log</em>
        <ul>
          <li><u>부모인 인터페이스 타입 하나로 여러 자식들을 참조할 수 있다.</u>
            <ul>
              <li>모두 가상 함수이기 때문에 부모인 인터페이스 타입 하나로 자식들이 각자 구현한 함수 내용대로 각각 다르게 호출할 수 있다.
                <ul>
                  <li>어떤 타입의 자식 객체가 들어오냐에 따라 다른 내용으로 실행됨</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET