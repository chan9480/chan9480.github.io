I"!<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-11-상속--derived-class-에-새로운-기능-추가하기">chapter 11. 상속 : Derived Class 에 새로운 기능 추가하기</h1>

<p><code class="language-plaintext highlighter-rouge">Derived</code> 자식 클래스에서 <code class="language-plaintext highlighter-rouge">Base</code> 부모 클래스로부터 상속받은 <em>m_value</em> 에 접근하여 사용하려 할 때</p>

<h2 id="-1-상속-멤버를-private로-둔-경우">🔔 1. 상속 멤버를 <code class="language-plaintext highlighter-rouge">private</code>로 둔 경우</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span>
<span class="p">{</span>
  <span class="nl">private:</span>
      <span class="kt">int</span> <span class="n">m_value</span><span class="p">;</span>

  <span class="nl">public:</span>
      <span class="n">Base</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span>
          <span class="o">:</span> <span class="n">m_value</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
      <span class="p">{}</span>

      <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">getValue</span><span class="p">()</span> 
      <span class="p">{</span>
          <span class="k">return</span> <span class="n">m_value</span><span class="p">;</span>
      <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Derived</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
         <span class="o">:</span> <span class="n">Base</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">setValue</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">Base</span><span class="o">::</span><span class="n">getValue</span><span class="p">()</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Derived</span> <span class="n">d</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    
    <span class="n">d</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span><span class="p">.</span><span class="n">getValue</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 2 출력</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><em>m_value</em>는 <code class="language-plaintext highlighter-rouge">private</code>로 둔 경우
    <ul>
      <li>그러므로 자식 클래스에서 이를 접근해 조작하게 하려면 <em>setter, getter</em>같은 접근 함수를 부모클래스에서 반드시 구현 해놔야 한다.</li>
      <li><em>m_value</em> 에 접근할 수 있는 부모 클래스의 <strong><em>int &amp; getValue()</em></strong> 로 자식 객체에서
        <ul>
          <li><em>m_value</em> 값을 바꾸고
            <ul>
              <li><code class="language-plaintext highlighter-rouge">Base::getValue()</code> = value;
                <ul>
                  <li>이렇게 L-value로서 작동하려면 리턴 타입이 참조여야 함. <strong><em>int &amp; getValue()</em></strong></li>
                </ul>
              </li>
            </ul>
          </li>
          <li>리턴받을 수 있게 되었다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-2-상속-멤버를-protected로-둔-경우">🔔 2. 상속 멤버를 <code class="language-plaintext highlighter-rouge">protected</code>로 둔 경우</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span>
<span class="p">{</span>
  <span class="nl">protected:</span>
      <span class="kt">int</span> <span class="n">m_value</span><span class="p">;</span>

  <span class="nl">public:</span>
      <span class="n">Base</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span>
          <span class="o">:</span> <span class="n">m_value</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
      <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
<span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Derived</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
         <span class="o">:</span> <span class="n">Base</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">setValue</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">Base</span><span class="o">::</span><span class="n">m_value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Derived</span> <span class="n">d</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    
    <span class="n">d</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    
    <span class="c1">// cout &lt;&lt; d.m_value() &lt;&lt; endl;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><em>m_value</em>는 <code class="language-plaintext highlighter-rouge">protected</code>로 둔 경우
    <ul>
      <li><u>자식 클래스</u> 내에서 <em>m_value</em> 이름으로 바로 접근 할 수 있다.
        <ul>
          <li><em>Base::m_value = value;</em></li>
        </ul>
      </li>
      <li>그러나 <u>외부에서 자식 객체</u>로는 <em>m_value</em> 이름으로 접근할 수 없다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">protected</code>라도 외부에서 사용할 멤버라면 getter 접근 함수를 만드는게 좋겠다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><u>최적화를 위해선 protected가 낫다.</u> 함수를 거치지 않고 바로 접근할 수 있기 때문에.</p>
</blockquote>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET