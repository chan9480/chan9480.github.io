I"|<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 게임 만들기 연습 문제 패키지</strong> 강의를 듣고 정리한 필기입니다.😀 <br />
<a href="https://github.com/jmhong-simulation/GameDevPracticePackage">🌜 공부에 사용된 홍정모 교수님의 코드들 보러가기</a> <br />
<a href="https://www.inflearn.com/course/c-2">🌜 [홍정모의 게임 만들기 연습 문제 패키지] 강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-3-게임-물리-맛보기--질량---용수철-시스템">Chapter 3. 게임 물리 맛보기 : 질량 - 용수철 시스템</h1>

<p><img src="https://user-images.githubusercontent.com/42318591/85229020-494ea500-b422-11ea-8340-324842520c30.png" alt="image" width="50%" height="50%" class="align-center" /></p>

<blockquote>
  <p>스프링은 늘어나고 줄어들고 하며 길이가 변한다.</p>
</blockquote>

<ul>
  <li>\(m\)
    <ul>
      <li>질량이 몰려있는 점. 질점</li>
    </ul>
  </li>
  <li>\(k\)
    <ul>
      <li>스프링의 딱딱한 정도</li>
      <li>k가 클수록 뻑뻑하여 스프링이 덜 늘어난다고 볼 수 있다.</li>
    </ul>
  </li>
  <li>한 시스템 안에는 \(m\), \(k\) 가 여러개가 들어갈 수 있다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/85229099-cbd76480-b422-11ea-95e0-63a67fee3a8e.png" alt="image" width="50%" height="50%" class="align-center" /></p>

<ul>
  <li>가속도 = 힘/질량
    <ul>
      <li>\(\vec{a} = {\vec{f}\over{m}}\)</li>
    </ul>
  </li>
  <li>위에서 구한 가속도로 속도와 위치를 구할 수 있다.
    <ul>
      <li>가속도를 시간으로 두번 적분하면 위치</li>
      <li>가속도를 시간으로 한번 적분하면 속도</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-spring-force">🔔 Spring Force</h2>

<h3 id="hookes-law--질점이-1개일-때-">Hooke’s Law : 질점이 1개일 때 🔵</h3>
<ul>
  <li>용수철에 외부적인 힘을 가하는 대상(질점)이 1개 (🔵파란공 1개)</li>
  <li>어떤 힘을 받아서 용수철의 원래 <u>길이가 늘어나면</u>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">수축</code>. <u>다시 원래의 길이로 줄어들기 위해</u> <code class="language-plaintext highlighter-rouge">당기는 힘</code>이 작용</li>
    </ul>
  </li>
  <li>어떤 힘을 받아서 용수철의 원래 <u>길이가 줄어들면</u>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">팽창</code>. <u>다시 원래의 길이로 늘어나기 위해</u> <code class="language-plaintext highlighter-rouge">늘어나는 힘</code>이 작용</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/42318591/85229342-1a393300-b424-11ea-9846-de2ff8ab747a.png" alt="image" width="50%" height="50%" class="align-center" /></p>

<ul>
  <li>\(l_0\)
    <ul>
      <li>용수철 원래의 길이</li>
    </ul>
  </li>
  <li>\(l\)
    <ul>
      <li>용수철의 변형된 현재의 길이</li>
    </ul>
  </li>
  <li>\(k\)
    <ul>
      <li>용수철의 딱딱한 정도</li>
    </ul>
  </li>
  <li>✨ \(f_{spring}\) ✨
    <ul>
      <li>스칼라</li>
      <li><u>원래 길이로 돌아가려는 용수철의 힘</u>
        <ul>
          <li>외부의 힘이 아니라 스스로 원래대로 돌아가려는 힘</li>
        </ul>
      </li>
      <li>\[f_{spring} = -k(l-l_0)\]
        <ul>
          <li>\((l-l_0)\)
            <ul>
              <li>스칼라</li>
              <li><code class="language-plaintext highlighter-rouge">길이 변화분</code> = 원래 길이 - 변형된 길이</li>
              <li>늘어난 길이가 클수록 원래 길이로 돌아가려는 \(f_{spring}\)힘도 강해진다.</li>
              <li>\(l&gt;l_0\) 👉🏻 \(f_{spring}&lt;0\)ㄱ=
                <ul>
                  <li>용수철이 늘어났으니 원래대로 줄어들기 위해 <code class="language-plaintext highlighter-rouge">수축</code> 줄어들려는 힘 작용</li>
                </ul>
              </li>
              <li>\(l&lt;l_0\) 👉🏻 \(f_{spring}&gt;0\)
                <ul>
                  <li>용수철이 줄어들었으니 원래대로 늘어나기 위해 <code class="language-plaintext highlighter-rouge">팽창</code> 늘어나려는 힘 작용</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>\(k\)
            <ul>
              <li>용수철이 딱딱한 정도가 높을 수록 용수철이 원래대로 돌아가려는 \(f_{spring}\)힘도 커진다.</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">-</code>
            <ul>
              <li>스칼라(단순히 부호로 방향을 나타냄)</li>
              <li>힘의 방향을 나타내기 위해 마이너스를 붙였다.</li>
              <li>\((l-l_0)\)가 양수이면 <code class="language-plaintext highlighter-rouge">수축</code>힘이 작용하는데 이때 \(f_{spring}\) 힘의 방향이 음수로 나오게끔 마이너스가 붙음.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="hookes-law--질점이-2개일-때-">Hooke’s Law : 질점이 2개일 때 🔵🔵</h3>

<p><img src="https://user-images.githubusercontent.com/42318591/85230782-72286780-b42d-11ea-945d-aba4f11773a6.png" alt="image" width="50%" height="50%" class="align-center" /></p>

<ul>
  <li>용수철에 외부적인 힘을 가하는 대상(질점)이 2개 (🔵파란공 2개)
    <ul>
      <li>질점이 1개일 때와 다르게 <u>방향이 필요하다. 즉, 벡터가 필요</u></li>
    </ul>
  </li>
  <li>이때의 용수철은 두 질점 사이를 잇는 거리 벡터가 됨</li>
</ul>

<p>\[\vec{f_{ij,spring}}=-k(\vert\vec{x_i}-\vec{x_j}\vert-l_0){\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}\]</p>

<ul>
  <li>\(\vec{f_{ij,spring}}\)
    <ul>
      <li>벡터</li>
      <li>\(\vec{x_j}\)(위치벡터)🔵로부터 \(\vec{x_i}\)(위치벡터)🔵로 향하는 <code class="language-plaintext highlighter-rouge">방향</code>을 가진 원래 길이대로 돌아가려는 힘 벡터</li>
    </ul>
  </li>
  <li>\({\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}\)
    <ul>
      <li>방향</li>
      <li>\(\vec{x_j}\)🔵로부터 \(\vec{x_i}\)🔵로 향하는 <code class="language-plaintext highlighter-rouge">방향 벡터</code></li>
      <li>\(\vec{f_{ij,spring}}\) 힘의 <code class="language-plaintext highlighter-rouge">방향</code>은 \({\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}\)와 일치한다.</li>
    </ul>
  </li>
  <li>\(\vert\vec{x_i}-\vec{x_j}\vert-l_0\)
    <ul>
      <li>스칼라</li>
      <li>\(\vert\vec{x_i}-\vec{x_j}\vert\)
        <ul>
          <li>\(\vec{x_j}\)🔵와 \(\vec{x_i}\)🔵사이의 <code class="language-plaintext highlighter-rouge">길이</code></li>
          <li>즉 <u>늘어난 후의 길이</u>를 뜻한다.</li>
        </ul>
      </li>
      <li>\(l_0\)
        <ul>
          <li>\(\vec{x_j}\)🔵와 \(\vec{x_i}\)🔵사이의 <code class="language-plaintext highlighter-rouge">원래 길이</code></li>
        </ul>
      </li>
      <li>\(\vert\vec{x_i}-\vec{x_j}\vert-l_0\)은 <code class="language-plaintext highlighter-rouge">길이 변화분</code>(스칼라)을 의미한다. 스프링이 돌아가야하는 길이분이 됨.
        <ul>
          <li>음수면 줄어든 것</li>
          <li>양수면 늘어난 것</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>\(k\)
    <ul>
      <li>스칼라</li>
      <li>스프링의 딱딱한 정도에 비례</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">-</code>
    <ul>
      <li>방향</li>
      <li>\(\vert\vec{x_i}-\vec{x_j}\vert-l_0\), 즉 <code class="language-plaintext highlighter-rouge">길이변화분</code>의 부호와 원래 힘으로 돌아가려는 방향의 부호는 반대이기 때문에 마이너스를 붙임
        <ul>
          <li>줄어들어서 <code class="language-plaintext highlighter-rouge">길이변화분</code>이 음수면 다시 팽창시켜주어야 하고</li>
          <li>늘어나서 <code class="language-plaintext highlighter-rouge">길이변화분</code>이 양수면 다시 수축시켜주어야함</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>\(\vec{f_{ij,spring}}\) 의 표현</p>
</blockquote>

<ol>
  <li>\((\vert\vec{x_i}-\vec{x_j}\vert-l_0){\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}\) 를 길이가 변한만큼의 <code class="language-plaintext highlighter-rouge">크기</code>로, j🔵공에서 i🔵공을 향하는 <code class="language-plaintext highlighter-rouge">방향</code>을 가진 벡터라고 할 수 있다. 이를 \(\vec{V}\)라고 하면 \(\vec{f_{ij,spring}}=-k\vec{V}\)라고 표현할 수 있다.</li>
  <li>\(\vec{f_{ij,spring}}\)벡터의 <code class="language-plaintext highlighter-rouge">방향</code>은 \({\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}\)이다.</li>
  <li>‘뉴턴 제 3의 법칙 : 작용-반작용’에 의해 \(\vec{f_{ij,spring}}=-\vec{f_{ji,spring}}\) 가 성립된다.
    <ul>
      <li>\(\vec{f_{ij,spring}}\) : j 로부터 i 로 향하는 <code class="language-plaintext highlighter-rouge">방향</code>을 가진 원래 길이대로 돌아가려는 힘 벡터</li>
      <li>\(\vec{f_{ji,spring}}\) : i 로부터 j 로 향하는 <code class="language-plaintext highlighter-rouge">방향</code>을 가진 원래 길이대로 돌아가려는 힘 벡터</li>
      <li>방향이 서로 정반대</li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h2 id="-damping-force">🔔 Damping Force</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Damper</code>
    <ul>
      <li><u>두 물체의 ✨상대속도✨를 줄여준다.</u>
        <ul>
          <li>즉, 두 물체의 속도가 비슷해지도록 만든다.</li>
          <li>스프링이 출렁거리는 정도를 서서히 줄여 줌</li>
        </ul>
      </li>
      <li>속도를 줄여주는 점성항력 같은 역할
        <ul>
          <li>문이 너무 빨리 닫히지 않도록 제어해주는 무거운 문에 붙어있는 장치</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Spring Force</code> : <u>길이의 차이</u>에 의해서 작용 됨</p>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Damping Force</code> : <u>속도의 차이</u>에 의해서 작용 됨</p>
</blockquote>

<ul>
  <li>덤핑 계수 \(d\)
    <ul>
      <li>단위 속도 당 <u>물체의 운동을 방해하려는 힘</u></li>
      <li>d값을 조정하여 <code class="language-plaintext highlighter-rouge">Dumper</code>의 영향을 조절할 수 있다.</li>
    </ul>
  </li>
  <li>스프링이 원래로 돌아가는 과정에서 속도도 점점 줄여줄 필요가 있다.
    <ul>
      <li>그래서 <code class="language-plaintext highlighter-rouge">Dumper</code>의 영향도 고려!</li>
    </ul>
  </li>
</ul>

<h3 id="질점이-1개일-때-">질점이 1개일 때 🔵</h3>

<p><img src="https://user-images.githubusercontent.com/42318591/85232033-1fec4400-b437-11ea-9ab1-f741195d656a.png" alt="image" width="50%" height="50%" class="align-center" /></p>

<ul>
  <li>\[{f_{ij,damping}}=-d(v_i-v_j)\]
    <ul>
      <li>스칼라</li>
      <li>질점이 1개일때 <u>질점이 아닌 고정된 물체와 질점과의 속도</u> 차이, 즉 상대속도를 0으로 만드려는 힘
        <ul>
          <li>🔵질점의 속도가 0이 아니라면 Damper는 <u>이 질점의 속도를 점점 0으로 만들고자 할 것.</u></li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">-</code>
        <ul>
          <li>스칼라(단순히 부호로 방향을 나타냄)</li>
          <li>상대속도의 반대방향으로 작용. 멈추게 해야하니까.</li>
        </ul>
      </li>
      <li>\(d\)
        <ul>
          <li>스칼라</li>
          <li>덤핑계수</li>
          <li>상대속도를 0 으로 만드는 힘</li>
        </ul>
      </li>
      <li>\((v_i-v_j)\)
        <ul>
          <li>스칼라</li>
          <li>j🔵질점에서 느끼는 i🔵질점의 상대적인 속도</li>
          <li>상대속도</li>
          <li>상대속도가 클수록 상대속도를 0으로 만드려는 힘이 크게 작용할 것</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="질점이-2개일-때-">질점이 2개일 때 🔵🔵</h3>

<p><img src="https://user-images.githubusercontent.com/42318591/85232041-34304100-b437-11ea-970d-9f9b4385934f.png" alt="image" width="50%" height="50%" class="align-center" /></p>

<ul>
  <li>\[\vec{f_{ij,damping}}=-d{(\vec{v_i}-\vec{v_j})\cdot{\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}}×{\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}\]
    <ul>
      <li>외부의 힘을 받아 움직이는 두 질점 🔵🔵의 상대속도(속도 차이)를 0으로 만드는 힘</li>
      <li>\(\vec{x_j}\)(위치벡터)🔵로부터 \(\vec{x_i}\)(위치벡터)🔵로 향하는 <code class="language-plaintext highlighter-rouge">방향</code>을 가진 두 벡터의 상대 속도를 0으로 만드려는 힘을 가진 벡터</li>
      <li><code class="language-plaintext highlighter-rouge">-</code>
        <ul>
          <li>방향</li>
        </ul>
      </li>
      <li>\(d\)
        <ul>
          <li>스칼라</li>
          <li>덤핑계수</li>
        </ul>
      </li>
      <li>\((\vec{v_i}-\vec{v_j})\cdot{\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}\)
        <ul>
          <li>스칼라</li>
          <li>상대속도 벡터(\(\vec{v_i}-\vec{v_j}\))와 향하던 방향 벡터(\({\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert}\))끼리의 <u>벡터 내적값</u>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">양수</code>면 두 질점이 <u>멀어지고 있던 중</u>
                <ul>
                  <li>즉, 두 질점 사이의 <u>스프링이 팽창하고 있던 중</u></li>
                </ul>
              </li>
              <li><code class="language-plaintext highlighter-rouge">음수</code>면 두 질점이 <u>가까워지고 있던 중</u>
                <ul>
                  <li>즉, 두 질점 사이의 <u>스프링이 수축하고 있던 중</u></li>
                </ul>
              </li>
              <li>사실 양수건 음수건 이 내적값의 절대값이 크다는건 스프링이 수축하는 정도, 혹은 팽창하는 정도가 크다는 것이므로 스프링이 팍팍 움직이고 있다는 것을 의미한다.</li>
              <li>이런 상태일 수록 상대 속도를 0 으로 만드려는 힘을 가진 \(f_{ij,damping}\)의 크기 또한 커질 수 밖에 없다.</li>
              <li>벡터 내적의 자세한 설명은 <a href="https://ansohxxn.github.io/c++%20games/chapter3-2-2/">벡터내적 포스트 참고</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>\(\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert\)
        <ul>
          <li>방향</li>
          <li>\(\vec{f_{ij,damping}}\)벡터의 <code class="language-plaintext highlighter-rouge">방향</code>이 된다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-빨간-공이-노란-공을-당겨오도록-스프링-구현해보기">🔔 빨간 공🔴이 노란 공🟡을 당겨오도록 스프링 구현해보기</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/85249054-b5b2be00-b48d-11ea-9133-ad17ae51cfd5.png" alt="image" width="40%" height="40%" class="align-center" /></p>

<ul>
  <li><strong>질점을 1개</strong>로 하였다. 🔴<em>rb0</em>은 고정. 🟡<em>rb1</em>은 외부 힘(<u>중력</u>)에 의하여 움직이는 질점.</li>
  <li>🔴<em>rb0</em>와 🟡<em>rb1</em>은 선(스프링)으로 연결되어 있다.</li>
  <li>🟡공에 스프링 힘을 주기전엔 🟡가 중력의 영향을 받아 끝없이 자유낙하 하는 모습이 된다.
    <ul>
      <li>\(\vec{f_{ij,spring}}\)와 \(\vec{f_{ij,damping}}\)를 더한 스프링 힘을 주어 🟡이 <u>중력의 영향을 받더라도 스프링 힘에 의해 원래 위치로 돌아가게끔</u> 만들자.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "Game2D.h"
#include "Examples/PrimitivesGallery.h"
#include "RandomNumberGenerator.h"
#include "RigidCircle.h"
#include &lt;vector&gt;
#include &lt;memory&gt;
</span>
<span class="k">namespace</span> <span class="n">jm</span>
<span class="p">{</span>
	<span class="k">class</span> <span class="nc">Example</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Game2D</span>
	<span class="p">{</span>
	<span class="nl">public:</span>
		<span class="n">RigidCircle</span> <span class="n">rb0</span><span class="p">,</span> <span class="n">rb1</span><span class="p">;</span>

		<span class="n">Example</span><span class="p">()</span>
			<span class="o">:</span> <span class="n">Game2D</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">reset</span><span class="p">();</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">reset</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="c1">// Initial position and velocity</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">vel</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">::</span><span class="n">hotpink</span><span class="p">;</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">radius</span> <span class="o">=</span> <span class="mf">0.03</span><span class="n">f</span><span class="p">;</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">mass</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">;</span>

			<span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">::</span><span class="n">yellow</span><span class="p">;</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">radius</span> <span class="o">=</span> <span class="mf">0.03</span><span class="n">f</span><span class="p">;</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">mass</span> <span class="o">=</span> <span class="n">rb0</span><span class="p">.</span><span class="n">mass</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">radius</span> <span class="o">/</span> <span class="n">rb0</span><span class="p">.</span><span class="n">radius</span><span class="p">,</span> <span class="mf">2.0</span><span class="n">f</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">drawWall</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">setLineWidth</span><span class="p">(</span><span class="mf">5.0</span><span class="n">f</span><span class="p">);</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">},</span> <span class="n">Colors</span><span class="o">::</span><span class="n">blue</span><span class="p">,</span> <span class="p">{</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span> <span class="p">});</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">update</span><span class="p">()</span> <span class="k">override</span>
		<span class="p">{</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">getTimeStep</span><span class="p">()</span> <span class="o">*</span> <span class="mf">0.4</span><span class="n">f</span><span class="p">;</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">epsilon</span> <span class="o">=</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">;</span>

			<span class="c1">// physics update (Temporarily disabled)</span>
			<span class="c1">//rb0.update(dt); ⭐이부분은 필요 없다.</span>
			<span class="c1">//rb1.update(dt); ⭐공이 벽에 부딪칠때, 바닥에 부딪칠때를 처리하는 함수였으므로. 이 예제에선 필요 X</span>

			<span class="c1">// coefficients</span>
			<span class="k">const</span> <span class="n">vec2</span> <span class="n">gravity</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">9.8</span><span class="n">f</span><span class="p">);</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">l0</span> <span class="o">=</span> <span class="mf">0.5</span><span class="n">f</span><span class="p">;</span> <span class="c1">// l_0 원래의 초기길이</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">coeff_k</span> <span class="o">=</span> <span class="mf">100.0</span><span class="n">f</span><span class="p">;</span> <span class="c1">// 스프링의 딱딱한 정도</span>
			<span class="k">const</span> <span class="kt">float</span> <span class="n">coeff_d</span> <span class="o">=</span> <span class="mf">100.0</span><span class="n">f</span><span class="p">;</span> <span class="c1">// 스프링의 출렁거림을 줄여준다. 🟡속도를 낮추려는 힘.</span>

			<span class="c1">// update rb1 (Note: rb0 is fixed)</span>
			<span class="p">{</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">pos</span><span class="p">).</span><span class="n">getMagnitude</span><span class="p">();</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">/</span> <span class="n">distance</span><span class="p">;</span>

				<span class="c1">// compute stiffness force &amp; damping force</span>
				<span class="k">const</span> <span class="k">auto</span> <span class="n">spring_force</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">l0</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_k</span>  
																<span class="o">+</span> <span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="p">(</span><span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">-</span> <span class="n">rb0</span><span class="p">.</span><span class="n">vel</span><span class="p">).</span><span class="n">getDotProduct</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="o">*</span> <span class="n">coeff_d</span> <span class="p">;</span>

				<span class="k">const</span> <span class="k">auto</span> <span class="n">accel</span> <span class="o">=</span> <span class="n">gravity</span> <span class="o">+</span> <span class="n">spring_force</span> <span class="o">/</span> <span class="n">rb1</span><span class="p">.</span><span class="n">mass</span><span class="p">;</span>

				<span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">+=</span> <span class="n">accel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
				<span class="n">rb1</span><span class="p">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">rb1</span><span class="p">.</span><span class="n">vel</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
			<span class="p">}</span>

			<span class="c1">// draw</span>
			<span class="n">drawWall</span><span class="p">();</span>

			<span class="c1">// spring</span>
			<span class="n">drawLine</span><span class="p">(</span><span class="n">Colors</span><span class="o">::</span><span class="n">red</span><span class="p">,</span> <span class="n">rb0</span><span class="p">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">Colors</span><span class="o">::</span><span class="n">red</span><span class="p">,</span> <span class="n">rb1</span><span class="p">.</span><span class="n">pos</span><span class="p">);</span>

			<span class="c1">// mass points</span>
			<span class="n">rb0</span><span class="p">.</span><span class="n">draw</span><span class="p">();</span>
			<span class="n">rb1</span><span class="p">.</span><span class="n">draw</span><span class="p">();</span>

			<span class="c1">// reset button</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">isKeyPressedAndReleased</span><span class="p">(</span><span class="n">GLFW_KEY_R</span><span class="p">))</span> <span class="n">reset</span><span class="p">();</span>
		<span class="p">}</span>

	<span class="p">};</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">jm</span><span class="o">::</span><span class="n">Example</span><span class="p">().</span><span class="n">run</span><span class="p">();</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><em>const auto <u>distance</u> = (rb1.pos - rb0.pos).getMagnitude();</em>
    <ul>
      <li>\(\vert\vec{x_i}-\vec{x_j}\vert\)</li>
      <li>🟡 중심좌표에서 🔴 중심좌표 사이의 <code class="language-plaintext highlighter-rouge">거리</code></li>
      <li>가속도를 받아 계속 늘어났다 줄어들었다 할 것.</li>
    </ul>
  </li>
  <li><em>const auto <u>direction</u> = (rb1.pos - rb0.pos) / distance;</em>
    <ul>
      <li>\(\vec{x_i}-\vec{x_j}\over\vert\vec{x_i}-\vec{x_j}\vert\)</li>
      <li>🟡 중심좌표에서 🔴 중심좌표를 향하는 <code class="language-plaintext highlighter-rouge">방향</code></li>
    </ul>
  </li>
  <li><em>const auto <u>spring_force</u> = direction *  -(distance - l0) * coeff_k + direction * -(rb1.vel - rb0.vel).getDotProduct(direction) * coeff_d;</em>
    <ul>
      <li>\(=\vec{f_{ij,spring}}+\vec{f_{ij,damping}}\)</li>
      <li>\(k\), \(d\) 모두 고려하여 합한 총 <code class="language-plaintext highlighter-rouge">스프링 힘</code></li>
    </ul>
  </li>
  <li>가속도
    <ol>
      <li><code class="language-plaintext highlighter-rouge">중력</code> 가속도
        <ul>
          <li><em>gravity</em></li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">스프링힘</code>에 의한 가속도
        <ul>
          <li><em>spring_force/rb1.mass</em></li>
          <li>가속도 = 힘 / 질량</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>🟡의 속도 업데이트
    <ul>
      <li><em>rb1.vel += accel * dt;</em>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">중력</code> 가속도 + <code class="language-plaintext highlighter-rouge">스프링힘</code>에 의한 가속도</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>🟡의 위치 업데이트
    <ul>
      <li><em>rb1.pos += rb1.vel * dt;</em></li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET