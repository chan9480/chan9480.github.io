I""<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h2 id="자료형을-추론해주는-auto">자료형을 추론해주는 <code class="language-plaintext highlighter-rouge">auto</code></h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="k">auto</span> <span class="n">a</span><span class="p">;</span> <span class="c1">// 오류 ! ! !</span>

<span class="k">auto</span> <span class="nf">add</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">auto a = 123;</code>
    <ul>
      <li>초기화되는 값 123으로 인해 a가 int라는 것을 추론할 수 있다.</li>
      <li>a는 int가 됨</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">auto a;</code>
    <ul>
      <li>오류 ! ! a 가 어떤 데이터 타입인지 추론할 수 없다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">auto add (int x, int y)</code>
    <ul>
      <li>함수 리턴타입에도 auto를 쓸 수 있다.</li>
      <li>return x + y; 에서 리턴 값의 데이터 타입이 int라는 것을 추론할 수 있기 때문에</li>
      <li>파라미터는 auto로 불가능! 컴파일 타임시 자료형 추론이 불가능하니까.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">auto result = add(1, 2);</code>
    <ul>
      <li>add의 리턴 타입은 int이므로 result는 int가 됨</li>
    </ul>
  </li>
</ul>

<h3 id="리턴-타입이-auto인-함수에-템플릿-사용해보기">리턴 타입이 auto인 함수에 템플릿 사용해보기</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">int</span><span class="p">;</span>
<span class="k">auto</span> <span class="n">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">double</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>템플릿을 사용하여 앞에는 auto로 쓰고 뒤에 <code class="language-plaintext highlighter-rouge">-&gt; int;</code>, <code class="language-plaintext highlighter-rouge">-&gt; double;</code>
    <ul>
      <li><u>가독성</u> 떄문에 이렇게 쓰는 것 ! 입력(파라미터),  출력(리턴타입) 이 한 눈에 들어오게 !</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="형-변환">형 변환</h2>

<h3 id="암시적-형변환">암시적 형변환</h3>

<ul>
  <li>컴파일러가 알아서 형 변환
    <ul>
      <li>int a =  12. 3
        <ul>
          <li>double인 12.3 을 int 변수 <code class="language-plaintext highlighter-rouge">a</code> 에 대입하니</li>
          <li>12.3을 int인 12로 강제 형 변환해 <code class="language-plaintext highlighter-rouge">a</code> 에 쑤셔넣음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="명시적-형변환">명시적 형변환</h3>

<ul>
  <li>개발자가 직접 형변환</li>
</ul>

<h4 id="c스타일-형변환">C스타일 형변환</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="mf">4.0</span>
</code></pre></div></div>
<ul>
  <li>괄호를 데이터타입에 감싼다</li>
</ul>

<h4 id="c-스타일">C++ 스타일</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="p">(</span><span class="mf">4.0</span><span class="p">)</span>
<span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mf">4.0</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>괄호를 형변환할 값에 감쌈</li>
  <li>혹은 <code class="language-plaintext highlighter-rouge">static_cast&lt;데이터타입&gt;</code> 사용</li>
</ul>

<h3 id="형-변환시-주의사항">형 변환시 주의사항</h3>

<ul>
  <li>
    <p>작은 것을 큰 것에 넣으려는건 문제가 없지만 큰 것을 작은 것에 넣을 때는 데이터 손실이 발생해서 엉뚱한 값이 나올 수도 있다.</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">0.123456789</span> <span class="c1">// float에 더 큰 double을 넣으니 잘못된 값이 나온다.</span>
</code></pre></div>    </div>

    <ul>
      <li>float은 4byte, double은 8byte.
        <ul>
          <li>double이 정밀도가 더 높다.</li>
        </ul>
      </li>
      <li>0.123456879는 double 타입으로 float이 표현할 수 있는 정밀도를 넘어섰다.
        <ul>
          <li>이 때문에 f 를 출력하면 0.123456789 가 아닌 0.123456791043 이 나옴</li>
        </ul>
      </li>
    </ul>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span> <span class="o">-</span> <span class="mi">10</span> <span class="c1">//  -5 로 잘 제대로 출력된다.</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mi">5u</span> <span class="o">-</span> <span class="mi">10</span> <span class="c1">// 엉둥한 숫자가 출력된다.</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">5u - 10</code>
        <ul>
          <li>u 는 unsigned int
            <ul>
              <li>5u는 unsigned int 로서의 5를 뜻한다.</li>
            </ul>
          </li>
          <li>-5가 아닌 엉뚱한 값이 되는 이유
            <ul>
              <li><u>형 변환도 우선순위가 있기 때문에.</u>
                <ul>
                  <li>unsigned int 가 그냥 int 보다 우선순위가 높다 !</li>
                  <li>int &lt; unsigned int &lt; long &lt; unsinge long &lt; … &lt; float &lt; double</li>
                </ul>
              </li>
              <li>따라서 형변환을 10에 맞추는 것이 아닌 5u에 맞추게 된다.
                <ul>
                  <li>unsinged int 가 int 보다 형변환 우선순위가 높으므로 !</li>
                  <li>떄문에 signed int 로서 -5 가 되는 것이 아닌</li>
                  <li>형변환이 unsigned int 로 되기 떄문에 이상한 값이 나오는 것이다.
                    <ul>
                      <li>-5 는 음수라서 unsigned int 범위에 없는 수이므로 !</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET