I"<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-12-가상-함수들--derived-class-에서-출력-연산자-사용하기">chapter 12. 가상 함수들 : Derived Class 에서 출력 연산자 사용하기</h1>

<h2 id="-출력-연산자-오버로딩은-전역-함수로만-구현-가능">🔔 출력 연산자 오버로딩은 전역 함수로만 구현 가능</h2>

<blockquote>
  <p>입출력 연산자는 오버라이딩을 할 수 없다. 일반 전역 함수로만 구현할 수 있다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;&lt;</code> 연산자의 왼쪽 피연산자가 되는 <code class="language-plaintext highlighter-rouge">std::cout</code>이 <code class="language-plaintext highlighter-rouge">ostream</code>타입이기 때문에 <code class="language-plaintext highlighter-rouge">ostream</code>의 멤버로 해야 하는데, C++ 표준인 <code class="language-plaintext highlighter-rouge">ostream</code>클래스의 멤버 함수로 수정할 수가 없어서.
    <ul>
      <li>더 자세한 내용은 <a href="https://ansohxxn.github.io/cpp/chapter9-3/#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%97%B0%EC%82%B0%EC%9E%90%EB%8A%94-%EC%A0%84%EC%97%AD-%ED%95%A8%EC%88%98%EB%A1%9C%EB%A7%8C-%EA%B5%AC%ED%98%84%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0">입출력 연산자 오버로딩 참고</a></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-오버라이딩-하기-위한-대안">🔔 오버라이딩 하기 위한 대안</h2>

<ul>
  <li><u>출력 연산자 안에서는</u> <em>b.print()</em> 이런식으로 <u>함수 하나만 호출</u>하고 <u>정작 출력 오버로딩 내용은 이 함수 안에서 전부 구현</u>하도록 하기!
    <ul>
      <li>오버라이딩은 이 함수를 오버라이딩 하면 된다.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Base</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_base</span><span class="p">;</span>
<span class="nl">public:</span>
	<span class="n">Base</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">input</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
		<span class="o">:</span><span class="n">m_base</span><span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="p">{}</span>
	<span class="k">friend</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">Base</span><span class="o">&amp;</span> <span class="n">base</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">base</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">virtual</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">)</span> <span class="k">const</span>
	<span class="p">{</span>
		<span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">"Base"</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">out</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="k">virtual</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span>
	<span class="p">{</span>
		<span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">"Derived"</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">out</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Base</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>

    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>

    <span class="n">Base</span> <span class="o">&amp;</span> <span class="n">bref</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">bref</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Base
Derived
Derived
</code></pre></div></div>

<ul>
  <li>📜Base
    <ul>
      <li>출력연산자 오버로딩</li>
      <li>print 가상 함수</li>
    </ul>
  </li>
  <li>📜Derived
    <ul>
      <li>print 오버라이딩</li>
    </ul>
  </li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">std::cout &lt;&lt; d</code>
    <ul>
      <li>Base 의 출력연산자 오버로딩 호출</li>
    </ul>
  </li>
  <li>출력연산자 오버로딩의 인수에서 <code class="language-plaintext highlighter-rouge">const Base &amp; base = d</code> <u>다형성</u></li>
  <li><code class="language-plaintext highlighter-rouge">base.print(out)</code>
    <ul>
      <li>print는 가상함수이므로 Derived의 print 함수가 호출됨.</li>
    </ul>
  </li>
  <li>“Derived” 출력</li>
</ol>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET