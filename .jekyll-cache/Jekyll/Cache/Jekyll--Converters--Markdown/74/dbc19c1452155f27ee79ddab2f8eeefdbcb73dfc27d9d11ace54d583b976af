I"Ƙ<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-19-모던-c-필수-요소들">chapter 19. 모던 C++ 필수 요소들</h1>

<h1 id="작업-기반-비동기-프로그래밍-async-future-promise">작업 기반 비동기 프로그래밍 async, future, promise</h1>

<blockquote>
  <p>#include &lt;future&gt;</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Thread</code> vs <code class="language-plaintext highlighter-rouge">Future</code> vs <code class="language-plaintext highlighter-rouge">Promise</code></li>
  <li><strong>스레드 기반의 병렬 처리</strong>와 **<u>작업 기반의 병렬 처리<u>**의 차이를 이해하고 비교해보자.</u></u></li>
</ul>

<p><br /></p>

<h2 id="-동기-vs-비동기">🔔 동기 Vs. 비동기</h2>

<ul>
  <li><strong>동기적 실행</strong>
    <ul>
      <li>👉 한번에 하나씩 순차적으로 실행. A 작업이 실행 중이라면 그 뒤의 작업들은 A 작업이 끝난 후에야 실행됨</li>
    </ul>
  </li>
  <li><strong>비동기적 실행</strong>
    <ul>
      <li>👉 프로그램 실행이 여러갈래로 갈라져서 <u>동시에 진행되는 것</u></li>
    </ul>
  </li>
</ul>

<h3 id="동기적-실행">동기적 실행</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span> <span class="n">txt</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="s">"a.txt"</span><span class="p">);</span>                  <span class="c1">// 5ms</span>
<span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="n">do_something_with_txt</span><span class="p">(</span><span class="n">txt</span><span class="p">);</span>  <span class="c1">// 5ms</span>

<span class="n">do_other_computation</span><span class="p">();</span>  <span class="c1">// 5ms 걸림 (CPU 로 연산을 수행함)</span>
</code></pre></div></div>

<ul>
  <li>메모리(RAM)보다 하드디스크를 읽는 시간은 8 만배나 더 느리다.
    <ul>
      <li>read함수는 하드디스크를 읽기떄문에 매우 느릴 것이고</li>
      <li>txt를 비롯하여 밑에 result와 함수도 read가 수행을 마칠 때까지 기다려야한다.</li>
    </ul>
  </li>
  <li>이처럼 <u>순차적으로(=동기적으로) 하나씩 실행할땐 비효율적</u>이다.
    <ul>
      <li>상당히 오래 걸리는 파일 읽기 작업이 끝나기 전 까지 CPU는 아무것도 하지 않은 채로 기다려야 하기 때문이다.</li>
      <li>위 코드는 총 5+5+5 = 15ms 걸림</li>
    </ul>
  </li>
  <li>read 함수의 실행으로 <u>하드 디스크를 읽어 오는 동안 CPU가 놀지 않고 do_other_computation() 같은 다른 일을 먼저 하고있으면 어떨까?</u></li>
</ul>

<h3 id="비동기적-실행">비동기적 실행</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">file_read</span><span class="p">(</span><span class="n">string</span><span class="o">*</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">string</span> <span class="n">txt</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="s">"a.txt"</span><span class="p">);</span>  <span class="c1">// 1️⃣</span>
  <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">do_something_with_txt</span><span class="p">(</span><span class="n">txt</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">string</span> <span class="n">result</span><span class="p">;</span>
  <span class="kr">thread</span> <span class="n">t</span><span class="p">(</span><span class="n">file_read</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">);</span>  <span class="c1">// &amp;result는 file_read 함수의 string* result 매개 변수에 대입될 인자</span>
  <span class="n">do_other_computation</span><span class="p">();</span>  <span class="c1">// 2️⃣</span>

  <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">t</code> 스레드는 하드 디스크를 읽어오는 file_read 함수의 기능을 수행하는 역할이다.
    <ul>
      <li><em>thread t(file_read, &amp;result)</em>
        <ul>
          <li><em>string txt = read(“a.txt”)</em> 수행 👉 5ms</li>
          <li><em>*result = do_something_with_txt(txt)</em> 수행 👉 5ms</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">t</code> 스레드에게 하드 디스크를 읽는 작업을 시켜둔 동안 Main 스레드는 다른 일을 한다.
    <ul>
      <li><em>do_other_computation()</em></li>
    </ul>
  </li>
  <li>Main 스레드는 <em>do_other_computation()</em> 작업을 끝낸 후 <code class="language-plaintext highlighter-rouge">t</code>스레드의 하드 디스크를 읽는 작업이 다 끝나기를 기다림
    <ul>
      <li><em>t.join()</em></li>
    </ul>
  </li>
  <li>총 걸린 시간 10 ms
    <ul>
      <li>Main 스레드가 <em>do_other_computation()</em> 을 수행하는 동안 <code class="language-plaintext highlighter-rouge">t1</code> 스레드는 <em>string txt = read(“a.txt”)</em> 을 <u>동시에 병렬적으로 수행하는데</u> Main 스레드가 하는 일은 하드 디스크를 읽어오는 read 함수 보다는 더 빠른 시간내에 마무리 되므로<br />
  <em>string txt = read(“a.txt”)</em>연산시간인 5 ms 만 걸린다고 보면 된다.</li>
      <li>여기에 <em>*result = do_something_with_txt(txt)</em> 하는데 걸리는 시간 5 ms</li>
    </ul>
  </li>
  <li>이처럼 프로그램 시행이 여러갈래로 갈라져서 동시에 진행되는 것을 <code class="language-plaintext highlighter-rouge">비동기적 실행</code>이라고 한다.
    <ul>
      <li>CPU는 한순간도 놀지 않았다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-스레드-기반-비동기적-실행-vs-작업-기반-비동기적-실행">🔔 스레드 기반 비동기적 실행 Vs. 작업 기반 비동기적 실행</h2>

<blockquote>
  <p>둘 다 비동기적 실행이다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">std::thread</code>만 사용하는 <strong>스레드 기반</strong> 비동기적 실행
    <ul>
      <li>👉 스레드를 통해 어떤 일을 겪게 될지 알 수 없다. 병렬 처리로 어떤 값을 받게될지 알 수 없다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">std::async</code> 를 사용하는 <strong>작업 기반</strong> 비동기적 실행
    <ul>
      <li>👉 어떤 일을 할 것인가, 미래에 어떤 값을 받아낼 것인가에 더 관심이 있다. 병렬 처리간에 값을 주고 받기가 쉽다.</li>
      <li><u>스레드의 결과를 리턴으로 받는다.</u></li>
    </ul>
  </li>
</ul>

<h3 id="멀티-스레딩">멀티 스레딩</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1">// multi-threading</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
		<span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t</span><span class="p">([</span><span class="o">&amp;</span><span class="p">]</span> <span class="p">{</span><span class="n">result</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> <span class="p">});</span>  <span class="c1">// 모든 바깥 변수를 레퍼런스로 받으므로 result 값이 변화한다.</span>
		<span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>  
	<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">result</code>은 스레드 밖에 있기 때문에 <code class="language-plaintext highlighter-rouge">result</code> 입장에서 스레드를 통해 어떤일을 겪을지 알 수 없다.</p>
</blockquote>

<blockquote>
  <p><u>어떤 스레드</u>가 이 작업을 하게 될지를 중점으로 둔다.</p>
</blockquote>

<p>스레드 <code class="language-plaintext highlighter-rouge">t</code>의 작업으로 <code class="language-plaintext highlighter-rouge">result</code> 값이 3 이 됐다는 것을 알 수 없다. <strong>만약 여러 스레드들이 병렬로 처리 될 때</strong> 스레드 <code class="language-plaintext highlighter-rouge">t</code>의 작업의 결과로 <code class="language-plaintext highlighter-rouge">result</code> 값이 3 이 됐다는 것을 다른 스레드들이 알고 이 결과를 가지고 작업해야 하는 일이 생긴다면 차질이 생길 것이다. 모르니까! 그래서 <code class="language-plaintext highlighter-rouge">result</code>를 출력하는 작업을 하기 위해선 <code class="language-plaintext highlighter-rouge">t1</code> 스레드가 <code class="language-plaintext highlighter-rouge">result</code> 을 write 하는 작업을 해야하므로 <code class="language-plaintext highlighter-rouge">t.join()</code>, <code class="language-plaintext highlighter-rouge">t1</code> 스레드가 끝날 때 까지 기다려야 한다.</p>

<h3 id="작업-기반-stdasync-stdfuture">작업 기반 <code class="language-plaintext highlighter-rouge">std::async</code>, <code class="language-plaintext highlighter-rouge">std::future</code></h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1">// task-based parallellism</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">future</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">async</span><span class="p">([]</span> <span class="p">{</span><span class="k">return</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);});</span>  <span class="c1">//  auto future 쓰는게 더 간편</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">future</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>  <span class="c1">// 3 출력</span>
	<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">std::async</code> 👉 처리 결과를 리턴하는 스레드라고 볼 수 있다.</p>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">std::async</code>의 결과가 <code class="language-plaintext highlighter-rouge">futrue</code>에 리턴될 때까지 <code class="language-plaintext highlighter-rouge">future.get()</code> 작업은 실행하지 않고 기다린다.</p>
</blockquote>

<blockquote>
  <p><u>어떤 작업(Task)</u>을 할 것인가를 중점으로 둔다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">std::aync</code>
    <ul>
      <li>스레드보다 선호되는 추세다.</li>
      <li>처리 결과를 <code class="language-plaintext highlighter-rouge">std::future</code> 객체로 리턴한다.
        <ul>
          <li><u>일반적인 return 과는 다르다</u>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">return 1 + 2</code> 작업 앞에 더 오래 걸리는 복잡한 작업이 있다면 <code class="language-plaintext highlighter-rouge">return 1 + 2</code> 결과가 바로 <code class="language-plaintext highlighter-rouge">future</code>에 저장된다는 보장이 없다.</li>
              <li>즉, 리턴 값은 현재 받지 못하는 값일 수도 있음을, 미래에 받을 수도 있음을 염두해두고 기다린다.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><u>미래에 std::async 가 일처리를 다 끝내고 리턴값을 받을 때까지 기다렸다가</u> 그제서야 <code class="language-plaintext highlighter-rouge">future.get()</code>을 수행한다.
        <ul>
          <li>람다 함수의 리턴 타입이 void 인데도 불구하고 내부에서 <code class="language-plaintext highlighter-rouge">return 1 + 2</code> 하는 것을 확인할 수 있다. <code class="language-plaintext highlighter-rouge">std::aync</code>은 람다 함수 리턴 타입과 상관없이 <code class="language-plaintext highlighter-rouge">return</code>을 사용하기도 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Main스레드가 <code class="language-plaintext highlighter-rouge">return 1 + 2</code>작업은 <code class="language-plaintext highlighter-rouge">std::async</code>에게 병렬적으로 맡겨 놓고 <code class="language-plaintext highlighter-rouge">future.get()</code>을 출력하는 일을 바로 실행할 수 있음에도 불구하고 <code class="language-plaintext highlighter-rouge">return 1 + 2</code> 작업이 끝날 때까지 자동으로 기다려 준다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">join</code> 하는거나 마찬가지!</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">future</code>변수는 정확하게 <code class="language-plaintext highlighter-rouge">async</code>를 통해 자신이 어떤 일을 겪게 될지를 정확하게 알 수 있다.</li>
</ul>

<p><br /></p>

<h2 id="-stdpromise">🔔 std::promise</h2>

<blockquote>
  <p>✨<code class="language-plaintext highlighter-rouge">std::future</code>와 <code class="language-plaintext highlighter-rouge">std::thread</code> 스레드를 함게 사용하려면 반드시 <code class="language-plaintext highlighter-rouge">std::future</code>를 받을 수 있는 존재인 <code class="language-plaintext highlighter-rouge">std::promise</code>가 필요하다.✨</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">async</code>가 아닌 스레드를 사용할 때, 병렬 처리를 하는 동안 미래의 데이터(<code class="language-plaintext highlighter-rouge">future</code>)를 받은 후에 작업을 수행하려면 <code class="language-plaintext highlighter-rouge">promise</code>를 통해 스레드가 미래에 원하는 데이터를 돌려 주겠다는 <u>약속</u> 해야 한다. ✨즉, 스레드의 연산 결과를 <code class="language-plaintext highlighter-rouge">promise</code>을 통해 <code class="language-plaintext highlighter-rouge">future</code>에 담아둔다.✨</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">promise</code> 👉 생산자-소비자 패턴에서 마치 생산자 (producer) 의 역할을 수행</li>
  <li><code class="language-plaintext highlighter-rouge">future</code> 👉  소비자 (consumer) 의 역할을 수행</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;future&gt;
#include &lt;thread&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="c1">// future and promsise</span>
	<span class="p">{</span>	
		<span class="n">std</span><span class="o">::</span><span class="n">promise</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">prom</span><span class="p">;</span>
		<span class="k">auto</span> <span class="n">future</span> <span class="o">=</span> <span class="n">prom</span><span class="p">.</span><span class="n">get_future</span><span class="p">();</span>

		<span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([](</span><span class="n">std</span><span class="o">::</span><span class="n">promise</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;&amp;</span> <span class="n">prom</span><span class="p">)</span>
		<span class="p">{</span>
            <span class="n">prom</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
        <span class="p">},</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">prom</span><span class="p">));</span>
		
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">future</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>스레드의 결과를 <code class="language-plaintext highlighter-rouge">future</code>에 담으려 할 땐, <code class="language-plaintext highlighter-rouge">promise</code>에 결과를 담아야 한다. <u>그러려면 promise 를 R-Value Reference 으로 스레드가 수행할 함수의 인수로 넘겨주어야 한다.</u></p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">prom</code>
    <ul>
      <li><em>std::promise&lt;int&gt; prom</em></li>
      <li>안에 <code class="language-plaintext highlighter-rouge">future</code> 객체를 담고 있다. 미래에 결과를 이 곳에 담겠단느 약속.
        <ul>
          <li>스레드는 <code class="language-plaintext highlighter-rouge">async</code>와 다르게 <code class="language-plaintext highlighter-rouge">future</code>를 리턴하지 않기 때문에 스레드의 처리 결과를 <code class="language-plaintext highlighter-rouge">future</code>타입으로 <code class="language-plaintext highlighter-rouge">prom</code> 객체에 저장할 수 있도록 코드를 짜야 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">future</code>
    <ul>
      <li><em>std::future&lt;int&gt; future = prom.get_future()</em></li>
      <li>미래의 연산 결과를 담을 <code class="language-plaintext highlighter-rouge">future</code> 객체</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">t</code> 스레드
    <ul>
      <li>첫 번째 인수 👉 스레드가 수행할 작업인 람다 함수.
        <ul>
          <li><em><a href="std::promise\&lt;int&gt;&amp;&amp; prom"></a>{prom.set_value(1 + 2);}</em></li>
          <li><code class="language-plaintext highlighter-rouge">prom</code>을 <u>람다 함수 내부에서  R-Value Reference 타입으로 매개 변수 `prom`에서 받아 여기에 연산 결과를 담는다.</u>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">prom.set_value(1 + 2)</code></li>
            </ul>
          </li>
          <li><em>R-Value Reference 로 <code class="language-plaintext highlighter-rouge">prom</code>을 받는 이유는 빠른 속도를 가진 얕은 복사를 위해 그런 것으로 추측해본다..!</em></li>
        </ul>
      </li>
      <li>두 번째 인수 👉 <u>첫번째 인수로 넘긴 람다 함수에 필요한 인수다.</u> <strong><em>std::promise&lt;int&gt;&amp;&amp; prom = std::move(prom)</em></strong>
        <ul>
          <li><em>std::move(prom)</em></li>
          <li>람다 함수에서 내부에서 R-Value Reference 타입의 매개 변수 <code class="language-plaintext highlighter-rouge">prom</code>에 바깥에서 정의한 <code class="language-plaintext highlighter-rouge">prom</code>을 담아야 하므로 R-value로 넘겨주어야 한다.</li>
          <li>이처럼 스레드 내에서 <code class="language-plaintext highlighter-rouge">promise</code>를 사용하려면 <code class="language-plaintext highlighter-rouge">std::thread</code>의 두번째 인수로 <code class="language-plaintext highlighter-rouge">promise</code>를 R-value 타입으로 넘겨 주어야 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">future.get()</code>
    <ul>
      <li>앞서 연산하여 <code class="language-plaintext highlighter-rouge">prom</code>에 담아둔 <code class="language-plaintext highlighter-rouge">prom.set_value(1 + 2)</code> 값이 <code class="language-plaintext highlighter-rouge">future</code>에 남긴다.</li>
      <li><code class="language-plaintext highlighter-rouge">prom.set_value(1 + 2)</code> 연산을 담당한 <code class="language-plaintext highlighter-rouge">t</code> 스레드가 작업을 다 끝낼 때까지, 즉 <code class="language-plaintext highlighter-rouge">t</code>스레드의 연산 결과가 담길 <code class="language-plaintext highlighter-rouge">future</code> 값이 담길 때까지 <u>Main 스레드는 *cout &lt;&lt; future.get() &lt;&lt; endl* 을 실행하지 않고 동기적으로 기다린다.</u>
        <ul>
          <li>비동기적으로 일을 처리하되 특정 Task에 대해서는 그 결과를 사용하기 위해 Task가 완수되기를 기다리는 것이다.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">t</code>스레드로부터 연산 결과를 받으면 그제서야 Main 스레드는 <em>cout « future.get() « endl</em> 을 실행한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">t.join()</code>
    <ul>
      <li>Main 스레드는 <code class="language-plaintext highlighter-rouge">future.get()</code>에서 <code class="language-plaintext highlighter-rouge">t</code>스레드가 수행한 <code class="language-plaintext highlighter-rouge">prom</code> 값을 이미 기다리기 때문에 <code class="language-plaintext highlighter-rouge">join</code> 해주는게 큰 의미는 없지만</li>
      <li>그래도 스레드긴 스레드이기 때문에 <code class="language-plaintext highlighter-rouge">join()</code> 해주는게 안정적.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;future&gt;
#include &lt;thread&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="c1">// future and promsise</span>
	<span class="p">{</span>	
		<span class="n">std</span><span class="o">::</span><span class="n">promise</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">prom</span><span class="p">;</span>
		<span class="k">auto</span> <span class="n">future</span> <span class="o">=</span> <span class="n">prom</span><span class="p">.</span><span class="n">get_future</span><span class="p">();</span>

		<span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">async</span><span class="p">([](</span><span class="n">std</span><span class="o">::</span><span class="n">promise</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;&amp;</span> <span class="n">prom</span><span class="p">)</span>
			<span class="p">{</span><span class="n">prom</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>	<span class="p">},</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">prom</span><span class="p">));</span>
		
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">future</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="c1">//t.join();</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위 코드처럼 스레드를 <code class="language-plaintext highlighter-rouge">async</code>로 대체해도 문제 없다. 다만 이런 경우엔 <code class="language-plaintext highlighter-rouge">std::thread</code>가 아니므로 <code class="language-plaintext highlighter-rouge">join</code> 해 줄 필요가 없고, 사실  <code class="language-plaintext highlighter-rouge">async</code> 자체가 <code class="language-plaintext highlighter-rouge">future</code>를 리턴하기 때문에 굳이 <code class="language-plaintext highlighter-rouge">promise</code>를 사용할 필요가 없다. 문제 없는 코드긴 하지만 굳이..? 싶은 코드.</p>

<p><br /></p>

<h2 id="-stdthread-vs-stdasync-비교">🔔 <code class="language-plaintext highlighter-rouge">std::thread</code> Vs. <code class="language-plaintext highlighter-rouge">std::async</code> 비교</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">std::thread</code>
    <ul>
      <li>어떤 스레드가 끝나기를 기다리려면 <code class="language-plaintext highlighter-rouge">join</code> 함수를 통해 대기해야 한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">std::async</code>
    <ul>
      <li>알아서 <code class="language-plaintext highlighter-rouge">future</code> 객체를 리턴하므로 스레드처럼 <code class="language-plaintext highlighter-rouge">promise</code>를 사용할 필요가 없다.</li>
      <li>소멸자가 끝나는 것을 알아서 대기를 해준다.
        <ul>
          <li>따로 명시하지 않아도 자동으로 <code class="language-plaintext highlighter-rouge">future</code> 객체를 사용하기 전까지는 대기한다.</li>
        </ul>
      </li>
      <li>주의 📢 <code class="language-plaintext highlighter-rouge">async</code>는 <code class="language-plaintext highlighter-rouge">future</code>로 받지 않을 경우 sequential이라 생각하고 순서대로 진행이 된다.</li>
    </ul>
  </li>
</ul>

<h3 id="async">async</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
		<span class="k">auto</span> <span class="n">f1</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">async</span><span class="p">([]</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 1 start</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 2초 대기</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 1 end</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="p">});</span>
		<span class="k">auto</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">async</span><span class="p">([]</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 2 start</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// 1초 대기</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 2 end</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="p">});</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Main function</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>  <span class="c1">// 메인 스레드가 실행</span>

		<span class="c1">// async는 thread와 달리 join이 없음. 내부적으로 구동 원리 차이가 있음. </span>
	<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Main function
Async 1 start
Async 2 start
Async 2 end
Async 1 end
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">f1</code>, <code class="language-plaintext highlighter-rouge">f2</code>는 <code class="language-plaintext highlighter-rouge">future</code> 이다.</li>
  <li>비동기적 실행
    <ul>
      <li>미래의 연산 결과를 <code class="language-plaintext highlighter-rouge">f1</code>에 담기로 약속이 되므로 그 전까진 비동기적으로 다른 일인 <code class="language-plaintext highlighter-rouge">f2</code> 작업을 진행한다.
        <ul>
          <li>1초만 기다리는 <code class="language-plaintext highlighter-rouge">f2</code> 작업이 먼저끝남</li>
        </ul>
      </li>
      <li>Main 스레드가 작업하는 Main 출력이 먼저 시작되는 것을 볼 수 있다.</li>
    </ul>
  </li>
  <li>만약 <code class="language-plaintext highlighter-rouge">f1.get()</code> 혹은 <code class="language-plaintext highlighter-rouge">f2.get()</code> 처럼 미래의 연산 결과를 사용해야 하는 경우에는 작업이 다 끝날때까지 기다린다.</li>
</ul>

<h4 id="future-를-안-받는-async-의-경우">future 를 안 받는 async 의 경우</h4>

<blockquote>
  <p>주의 📢 <code class="language-plaintext highlighter-rouge">async</code>는 <code class="language-plaintext highlighter-rouge">future</code>로 받지 않을 경우 sequential이라 생각하고 순서대로 진행이 된다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">async</span><span class="p">([]</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 1 start</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 2초 대기</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 1 end</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="p">});</span>
		<span class="n">std</span><span class="o">::</span><span class="n">async</span><span class="p">([]</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 2 start</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// 1초 대기</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 2 end</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="p">});</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Main function!</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Main function
Async 1 start
Async 1 end
Async 2 start
Async 2 end
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">f1</code>, <code class="language-plaintext highlighter-rouge">f2</code>에 <code class="language-plaintext highlighter-rouge">future</code>를 리턴하지 않는 경우
    <ul>
      <li>출력 결과를 보면 그냥 순서대로, 동기적으로 실행되는 것을 볼 수 있다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="thread">thread</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
		<span class="k">auto</span> <span class="n">f1</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([]</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 1 start</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 2초 대기</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 1 end</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="p">});</span>
		<span class="k">auto</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([]</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 2 start</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// 1초 대기</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Async 2 end</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="p">});</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Main function</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>  <span class="c1">// 메인 스레드가 실행</span>

        <span class="n">f1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
        <span class="n">f2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

		<span class="c1">// async는 thread와 달리 join이 없음. 내부적으로 구동 원리 차이가 있음. </span>
	<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Async 1 start
Async 2 start
Main function
Async 2 end
Async 1 end
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎혹은 이렇게 출력되기도 한다💎

Async 1 start
Main function
Async 2 start
Async 2 end
Async 1 end
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">f1</code>, <code class="language-plaintext highlighter-rouge">f2</code>는 스레드 <code class="language-plaintext highlighter-rouge">thread</code> 이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">join</code> 필수</li>
    </ul>
  </li>
  <li>Main 스레드의 작업이 먼저 실행되었던 <code class="language-plaintext highlighter-rouge">async</code> 와 달리 <code class="language-plaintext highlighter-rouge">f1</code> 스레드부터 먼저 시작되는 것을 알 수 있다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">f1</code>, <code class="language-plaintext highlighter-rouge">f2</code> 스레드 시작 후 각자 sleep 한 후 Main 스레드가 작업하는 Main function 출력이 세번째로 됨</li>
      <li><u>이처럼 async와 thread는 내부적으로 실행순서가 다름</u></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-참고">🔔 참고</h2>

<ul>
  <li>모두의 코드 <a href="https://modoocode.com/284">https://modoocode.com/284</a></li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET