I"Q,<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h2 id="정적-배열">정적 배열</h2>
<ul>
  <li>컴파일 타임에 배열의 크기가 미리 정해져 있는.</li>
  <li>프로그램 실행 전 미리 배열의 크기만큼 스택 메모리로부터 메모리를 할당 받는다.</li>
  <li>따라서 <u>배열의 크기 지정이 필수</u></li>
</ul>

<p><br /></p>

<h2 id="stdarray">std::array</h2>
<ul>
  <li>#include &lt;array&gt;</li>
  <li>정적 배열을 <code class="language-plaintext highlighter-rouge">std::array</code>로 선언하면 배열을 다룰 때 편리할 여러 함수들을 사용할 수 있다.</li>
  <li>동적 배열과 달리 <u>배열의 크기가 컴파일 타임에 결정될 수 있도록 반드시 써주어야 한다. 변수 사용 불가. 상수나 리터럴만 가능</u></li>
</ul>

<h3 id="다른-배열로-값을-바꿀-수-있다">다른 배열로 값을 바꿀 수 있다.</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">array</span> <span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">my_arr</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">array</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>

<span class="n">array</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">};</span> <span class="c1">// ❌ 불가능.</span>
<span class="n">my_arr</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">};</span> <span class="c1">// ⭕ 가능</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">array = {2, 3, 4, 5, 6};</code> -&gt; ❌ 불가능.</p>
<ul>
  <li>정적 배열은 한번 초기화 되면 다른 것으로 초기화 할 수 없다.</li>
  <li>배열 이름 주소값을 바꿀 수 없음</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">my_arr = {2, 3, 4, 5, 6};</code> -&gt; ⭕가능</p>
<ul>
  <li>std::array로 선언된 정적 배열은 다른 배열로 초기화 할 수 있다.</li>
</ul>

<h3 id="파라미터로-stdarray를-보낼-때-원래-성질이-그대로-유지된다">파라미터로 std::array를 보낼 때 원래 성질이 그대로 유지된다.</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">printLength</span><span class="p">(</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="mi">5</span><span class="o">&gt;</span> <span class="n">my_arr</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="kt">void</span> <span class="nf">printLength</span><span class="p">(</span><span class="k">const</span> <span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="mi">5</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">my_arr</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="mi">5</span><span class="o">&gt;</span> <span class="n">my_arr</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>

    <span class="n">printLength</span><span class="p">(</span><span class="n">my_arr</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>일반 정적 배열을 매개변수 타입으로 정하는 것은 금지되어 있다. <a href="https://ansohxxn.github.io/c++/chapter6-7/#%ED%95%A8%EC%88%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EB%A1%9C-%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%84%98%EA%B8%B8-%EB%95%8C">참고</a></li>
  <li>그러나 <u>std::array인 정적 배열은 매개변수 타입이 될 수 있다.</u></li>
  <li>그러므로 <code class="language-plaintext highlighter-rouge">printLength(my_arr);</code> 이렇게 배열을 넘겨서 <code class="language-plaintext highlighter-rouge">array&lt;int,5&gt; my_arr</code> 매개변수로 받으면 배열 내용을 전부 복사 하게 되어 시간이 오래 걸린다. (call by value)</li>
  <li>따라서 매개변수 타입을 <code class="language-plaintext highlighter-rouge">참조</code> 혹은 <code class="language-plaintext highlighter-rouge">const 참조</code>로 하여 복사할일 없이 std::array 정적 배열을 참조할 수 있도록 하는 것이 성능면에서 좋다.
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">printLength</span><span class="p">(</span><span class="k">const</span> <span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="mi">5</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">my_arr</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="for-each-에도-돌릴-수-있다">for-each 에도 돌릴 수 있다</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span> <span class="n">element</span> <span class="o">:</span> <span class="n">my_arr</span><span class="p">){</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="함수">함수</h3>

<h4 id="ati">at(i)</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">array</span> <span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">my_arr</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
<span class="n">my_arr</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>std::array로 선언된 배열의 i번째 인덱스에 위치한 원소를 리턴한다.</li>
  <li>my_arr[i]와 같다.
    <ul>
      <li>다른 점은 at을 쓰면 over index시 예외처리를 해준다는 것이다.</li>
      <li>다만 예외처리를 해주니 조금 더 느리겠죠!</li>
    </ul>
  </li>
</ul>

<h4 id="size">size()</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">array</span> <span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">my_arr</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
<span class="n">my_arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>std::array로 선언된 배열의 원소 개수 리턴</li>
</ul>

<h4 id="정렬">정렬</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">array</span> <span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">my_arr</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
<span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">my_arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">my_arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</code></pre></div></div>

<ul>
  <li>begin() : std::arry 배열 원소의 첫번째 위치</li>
  <li>end() : std::arry 배열 원소의 마지막 위치</li>
  <li>std::sort 는 #include &lt;algorithm&gt; 하면 사용할 수 있는데 <code class="language-plaintext highlighter-rouge">begin()</code>과 <code class="language-plaintext highlighter-rouge">end()</code>를 이용하여 std::array 정적 배열을 정렬할 수 있다.</li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET