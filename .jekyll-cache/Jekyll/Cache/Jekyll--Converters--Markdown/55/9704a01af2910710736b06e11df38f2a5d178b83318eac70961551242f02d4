I"|:<blockquote>
  <p>출처 글 👉 <a href="https://victorydntmd.tistory.com/78?category=682764">https://victorydntmd.tistory.com/78?category=682764</a></p>
</blockquote>

<p>이 글은 victorydntmd님 블로그의 <code class="language-plaintext highlighter-rouge">git merge</code> 포스트를 거의 대부분 참고한 글입니다. <code class="language-plaintext highlighter-rouge">git branch</code>와 <code class="language-plaintext highlighter-rouge">git merge</code>를 이 분 블로그에서 공부했습니다. 이해가 쏙쏙 잘 되게 설명을 너무 잘해주셔서.. ㅠㅠㅠ 출처는 이 분 블로그임을 밝히며 개인적인 필기를 남기기 위한 용도로 이 분의 블로그 글을 정리하는 것임을 밝힙니다. <code class="language-plaintext highlighter-rouge">git merge</code> 설명은 링크 남긴 이 분의 블로그에서 보시는 것을 추천드립니다! (훨씬 설명 잘 되어있음!!!)</p>

<p><br /></p>

<h1 id="merge">merge</h1>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">merge</code> 👉 <strong>2 개의 브랜치를 하나로 합치는 것.</strong> <u>현재 위치한 브랜치를 기준으로 병합된다.</u></p>
</blockquote>

<ul>
  <li><u>2 개의 브랜치를 합칠 때</u> 만약 두 브랜치가 <u>같은 파일의 같은 곳을 수정했다면 충돌(merge conflict)가 발생</u>한다. 👉 <code class="language-plaintext highlighter-rouge">merge</code>의 중요한 이슈.
    <ul>
      <li>merge conflict 가 발생하면 관계자들이 상의하여 직접 코드를 수정하여 충돌을 해결해야한다.</li>
      <li>애초에 merge conflict 가 발생하지 않도록 즉 작업 내용이 겹치지 않도록 분담하는게 좋다.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">git merge 브랜치이름</code> 👉 현재 위치한 브랜치에 해당 브랜치를 가져와 merge 한다.</p>
</blockquote>

<p><br /></p>

<h2 id="merge-conflict">merge conflict</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;&lt;&lt;&lt;&lt;&lt; HEAD
블라블라
=======
뫄뫄뫄뫄
&gt;&gt;&gt;&gt;&gt;&gt; FOO
</code></pre></div></div>

<p>병합시 충돌이 일어났다면 병합을 진행하지 않고 이렇게 현재 위치 중인 브랜치의 내용 (<code class="language-plaintext highlighter-rouge">&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>)과 병합하려는 대상인 브랜치의 (<code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;&gt;&gt;&gt; 브랜치이름</code>)의 내용의 다른 점을 보여준다. 팀원들은 이걸 보고 어떻게 병합을 할지 상의하여 코드를 고쳐 충돌을 해결한 후 병합해야 한다.</p>

<p><br /></p>

<h2 id="fast-forward-방식으로-병합">Fast-Forward 방식으로 병합</h2>

<p><code class="language-plaintext highlighter-rouge">master</code> 브랜치를 부모로 하는 <code class="language-plaintext highlighter-rouge">test</code> 브랜치를 분기 생성했다고 가정해보자. 현재 <code class="language-plaintext highlighter-rouge">test</code> 브랜치의 작업물들은 <code class="language-plaintext highlighter-rouge">master</code> 브랜치의 작업물들의 내용과 역대 commit 내역이 동일한 상태일 것이다. 그 상태에서 <code class="language-plaintext highlighter-rouge">test</code> 브랜치의 작업물에 코드 한 줄을 추가하여 commit 했다고 가정해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout -b test
git add
git commit -m "test"

git checkout master
git merge test
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">test</code> 브랜치는 <code class="language-plaintext highlighter-rouge">master</code> 브랜치의 커밋 내역을 전부 다 포함하고 있고 그 상태에서 <code class="language-plaintext highlighter-rouge">test</code> 브랜치가 커밋을 한번 더 했기 때문에, <code class="language-plaintext highlighter-rouge">test</code> 브랜치가 <code class="language-plaintext highlighter-rouge">master</code> 브랜치 보다 더 최신 버전이고 앞선다고 볼 수 있다. 따라서 <code class="language-plaintext highlighter-rouge">master</code> 브랜치를 가져와 <code class="language-plaintext highlighter-rouge">test</code>브랜치에 병합한다. 두 브랜치를 병합시 커밋 내역이 더 앞서가고 있는 브랜치를 기준으로 병합하는 것을 Fast-forward 방식 병합이라고 한다.(뒤쳐져 있는 <code class="language-plaintext highlighter-rouge">master</code>를 빨리 감기하여 통합시킴)</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/42318591/100306682-449ca700-2fe7-11eb-91da-3ad2cff50389.png" alt="image" /></p>

<ul>
  <li>이렇게 분기된 브랜치가 부모 브랜치의 커밋 내역을 모두 포함할 수 있다면, 즉 부모 브랜치가 분기 이후 자신만의 커밋을 진행한 것이 없었다면, 위와 같이 통합할 수 있다. 위와 같이 통합되는 방식을 Fast-forward 라고 한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">master</code> 브랜치의 커밋 내역은 <em>A -&gt; B</em> 에서 병합 후 <em>A -&gt; B -&gt; C -&gt; D -&gt; E</em> 가 되었다. 빨리 감기 되어 껑충 뛴 셈.</li>
    </ul>
  </li>
  <li>현재의 가지는 <code class="language-plaintext highlighter-rouge">master</code>이며 이 가지는 <code class="language-plaintext highlighter-rouge">test</code>로도, <code class="language-plaintext highlighter-rouge">master</code>로도 불릴 수 있는 가지가 되었기 때문에 두 브랜치가 중복되므로 <code class="language-plaintext highlighter-rouge">test</code> 로컬 브랜치는 삭제해주는 것이 좋다. (push 한 후 삭제하면 원격 저장소에 <code class="language-plaintext highlighter-rouge">test</code> 커밋 내역은 보존할 수 있기 때문에 문제 없고 로컬 브랜치로서의 <code class="language-plaintext highlighter-rouge">test</code>만 삭제하면 된다.)</li>
</ul>

<p><br /></p>

<h2 id="non-fast-forward-방식으로-병합--merge-conflict-발생-우려">Non Fast-Forward 방식으로 병합 (👉 Merge Conflict 발생 우려)</h2>

<p>통합 하려는 두 브랜치가 서로 다른 커밋 내역을 가지고 있을 경우 (서로 포함 불가능한) Non Fast-Forward 방식으로 병합할 수 밖에 없다. <u>서로 다른 커밋 내역을 가지고 있기 때문에, 그리고 동일한 부분을 다르게 코딩했을 가능성도 있기 때문에 병합할 때 충돌이 발생할 수 있다.</u></p>

<p><strong>Merge Conflict</strong> 👉 동일한 코드를 서로 다른 내용으로 바꿨다면 Merge시 어떻게 해야할지 알 수 없기 때문에 충돌이 발생한다. 이럴땐 팀원들이 서로 충돌되는 두 코드를 어떻게 합칠지 의논 후 수동적으로 직접 해당 코드를 Merge 하여야 한다. 충돌 문제가 해결 되어야 Git 에서 Merge를 해줄 수 있다. 애초에 이런 작업을 최소화 하기 위해 최대한 팀원들이 맡은 작업이 서로 겹치지 않도록 해야 한다.</p>

<h3 id="merge-commit">Merge Commit</h3>

<blockquote>
  <p>분기 후 부모 브랜치에서도 부모 브랜치 본인의 커밋 내역들이 진행됐을 경우에는 Fast-Forward 방식으로 병합할 수 없다. <u>부모 브랜치의 커밋 내역을 자식 브랜치가 모두 포함할 수가 없기 때문이다.</u></p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/42318591/100307294-d0fb9980-2fe8-11eb-975a-c7297888703d.png" alt="image" /></p>

<p>이런 경우에는 Fast-Forward 방식으로 병합 되지 않는다.</p>

<p><img src="https://user-images.githubusercontent.com/42318591/100307301-d5c04d80-2fe8-11eb-8ebf-8c27a0c6bc21.png" alt="image" /></p>

<p><strong>Non Fast-Forward 방식</strong> 👉 두 브랜치를 하나로 합친 새로운 커밋을 진행한다.</p>

<ul>
  <li>두 브랜치의 최근 상태(커밋 G, 커밋 E)를 합친 결과물을 만든 후 이를 새롭게 H 로 커밋한다. 이를 병합 커밋이라고 한다.</li>
  <li>Non Fast-Forward 이기 때문에 병합 후 부모 브랜치는 자식 브랜치만의 커밋 내역을 품지 못한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">master</code> 브랜치에서 병합을 했다면
        <ul>
          <li><code class="language-plaintext highlighter-rouge">master</code> 브랜치의 커밋 내역은 <em>A -&gt; B -&gt; F -&gt; G -&gt; H</em> 가된다. <code class="language-plaintext highlighter-rouge">master</code> 브랜치의 커밋 내역으로서 <em>C -&gt; D -&gt; E</em> 커밋 내역은 품지 않는다. (다만 커밋 H 에 <em>C -&gt; D -&gt; E</em> 을 거쳐 완성된 <em>E</em> 커밋 결과물이 반영이 되어서 통합 되있을 것이다!)</li>
          <li><code class="language-plaintext highlighter-rouge">test</code> 브랜치의 커밋 내역은 <em>A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; H</em> 가 된다.</li>
        </ul>
      </li>
      <li>두 브랜치가 동일해졌으므로 나머지 하나인 <code class="language-plaintext highlighter-rouge">test</code> 로컬 브랜치는 삭제해 주는 것이 좋다. (<code class="language-plaintext highlighter-rouge">test</code>의 커밋 내역을 원격 저장소에 보존하고 싶다면 <code class="language-plaintext highlighter-rouge">push</code> 후 로컬 <code class="language-plaintext highlighter-rouge">test</code> 삭제하기)</li>
    </ul>
  </li>
  <li>Fast-Forward 방식은 Merge Commit 이 생략된다. 앞선 브랜치로 빨리 감기 될 뿐이다.</li>
</ul>

<p><br /></p>

<h3 id="rebase-로-merge">rebase 로 Merge</h3>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">rebase</code>는 말그대로 브랜치의 base (부모 브랜치)를 바꾸는 작업이다. <u>rebase로 부모 브랜치를 바꿔주어 브랜치를 통일한 후 Merge 하는식으로 작업한다.</u></p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/42318591/100315291-c39bda80-2ffb-11eb-905e-79e1df673658.png" alt="image" /></p>

<p>Merge Commit 을 만드는 방식으로 두 브랜치를 Merge 시킨 경우다. 이 같은 경우 위와 같이 두 브랜치의 이력이 남게 된다. 이력 조작을 하지 않고 그냥 했던 그대로 정확한 이력을 남기고 싶은 경우에는 괜찮지만 이런 커밋 이력이 많아지면 복잡해진다. 두 브랜치를 이미 통합했음에도 불구하고 <em>A -&gt;B -&gt; F</em> 라는 이력도 있고.. <em>A -&gt; B-&gt; C-&gt; D -&gt; E -&gt; F</em> 라는 이력도 남는 것이기 때문에 복잡하다. <u>두 브랜치를 통합할 때, 이런 커밋 이력들 또한 하나의 가지로 통일한다면 더 보기 좋을 것이다.</u></p>

<p><img src="https://user-images.githubusercontent.com/42318591/100316152-47a29200-2ffd-11eb-9b2e-4ae7a80d2eb2.png" alt="image" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">git rebase 브랜치 이름</code> 👉 현재 브랜치를 base 즉, 부모 브랜치를 해당 브랜치로 바꾼다.</p>
</blockquote>

<p>1️⃣ <strong><em>git rebase master</em></strong> (현재 브랜치 <code class="language-plaintext highlighter-rouge">test</code>)</p>

<p><code class="language-plaintext highlighter-rouge">test</code> 브랜치의 부모 브랜치를 <code class="language-plaintext highlighter-rouge">master</code> 브랜치로 바꾸었다. <u>두 브랜치가 한 줄로 연결</u>되었다. <code class="language-plaintext highlighter-rouge">test</code> 브랜치는 <code class="language-plaintext highlighter-rouge">master</code> 브랜치 뒤에 위치하게 되었으므로 <code class="language-plaintext highlighter-rouge">test</code> 브랜치의 커밋 이력들은 각각 <code class="language-plaintext highlighter-rouge">master</code> 브랜치의 최신 커밋인 F 커밋와 Merge 되어 새로운 커밋 이력 C’ D’ E’ 가 되어서 <code class="language-plaintext highlighter-rouge">master</code> 뒤에 붙게 된다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">master</code> 이력 👉 <em>A -&gt; B -&gt; F</em></li>
  <li><code class="language-plaintext highlighter-rouge">test</code> 이력 👉 <em>A -&gt; B -&gt; F -&gt; C’ -&gt; D’ -&gt; E’</em></li>
</ul>

<p>2️⃣ <strong><em>git merge master</em></strong></p>

<p><code class="language-plaintext highlighter-rouge">master</code>와 <code class="language-plaintext highlighter-rouge">test</code>를 merge 하면, <code class="language-plaintext highlighter-rouge">master</code>보다 <code class="language-plaintext highlighter-rouge">test</code>가 더 최신이고 앞서 있고, <code class="language-plaintext highlighter-rouge">test</code>는 <code class="language-plaintext highlighter-rouge">master</code>의 커밋 이력을 다 품을 수 있기 때문에 (1️⃣에서 rebase 했기 때문에) Fast-Forward 방식의 merge 되어 <code class="language-plaintext highlighter-rouge">master</code>는 <code class="language-plaintext highlighter-rouge">test</code>와 동일한 커밋 이력을 갖게 된다. <em>A -&gt; B -&gt; F -&gt; C’ -&gt; D’ -&gt; E’</em></p>

<h4 id="rebase-와-merge-의-차이">rebase 와 merge 의 차이</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">merge</code>만 하기 (merge commit 생성)
    <ul>
      <li>변경 내용의 이력이 있는 그대로 모두 남기 때문에 정확하지만 이력이 복잡해진다. 여러 줄기에 제각각 남아서.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">rebase</code>로 한 줄로 만든 후에 <code class="language-plaintext highlighter-rouge">merge</code> 하기 (한 줄기로 만든 후 fast-forward merge)
    <ul>
      <li>커밋 이력이 한 줄기로 착착 보기 좋게 정리되는 장점이 있다.</li>
      <li>다만 정확한 커밋 이력을 남겨야할 필요가 있을 땐 사용 X</li>
    </ul>
  </li>
</ul>

<h4 id="커밋-이력-조작하기">커밋 이력 조작하기</h4>

<blockquote>
  <p>참고하기 <a href="https://victorydntmd.tistory.com/279?category=682764">https://victorydntmd.tistory.com/279?category=682764</a></p>
</blockquote>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET