I"J~<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-15-의미론적-이동과-스마트-포인터">chapter 15. 의미론적 이동과 스마트 포인터</h1>

<h1 id="157-스마트-포인터3️⃣-stdweak_ptr">15.7 스마트 포인터3️⃣ std::weak_ptr</h1>

<blockquote>
  <p>#include &lt;memory&gt;</p>
</blockquote>

<h2 id="-참고">🚀 참고</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/104432818-bac39000-55cc-11eb-82cd-c22ac5bad05b.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/104432839-c1ea9e00-55cc-11eb-90ea-a4f4dedf99f1.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/104432862-c911ac00-55cc-11eb-86db-7c982fd4ac7c.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/104432890-d29b1400-55cc-11eb-9d51-a89c9ba6a11c.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/104432921-d9c22200-55cc-11eb-967f-94517aa183c4.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/42318591/104538668-ab415700-565f-11eb-9d23-5f54279b15e1.png" alt="image" /></p>

<p>내가 쓴 답변이다. <a href="https://jungwoong.tistory.com/50?category=1102341">이 블로그</a> 이 이 답변을 작성하는데에 도움 되었다. <code class="language-plaintext highlighter-rouge">std::shared_ptr</code>에 대해 더 자세한 것은 링크 된 블로그에서 참고하기.</p>

<p><br /></p>

<h2 id="-shared_ptr의-순환-의존성-문제">🔔 shared_ptr의 순환 의존성 문제</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_name</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">m_partner</span><span class="p">;</span>
	<span class="c1">//std::weak_ptr&lt;Person&gt; m_partner;</span>

<span class="nl">public:</span>
	<span class="n">Person</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="p">)</span> <span class="o">:</span> <span class="n">m_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" created</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="o">~</span><span class="n">Person</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" destroyed</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">friend</span> <span class="kt">bool</span> <span class="n">partnerUp</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p2</span><span class="p">)</span> <span class="c1">// ⭐⭐</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p1</span> <span class="o">||</span> <span class="o">!</span><span class="n">p2</span><span class="p">)</span>
			<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
		
		<span class="n">p1</span><span class="o">-&gt;</span><span class="n">m_partner</span> <span class="o">=</span> <span class="n">p2</span><span class="p">;</span>
		<span class="n">p2</span><span class="o">-&gt;</span><span class="n">m_partner</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>

		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p1</span><span class="o">-&gt;</span><span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" is partnered with "</span> <span class="o">&lt;&lt;</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">m_name</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li><strong>partnerUp</strong> 함수
    <ul>
      <li>Person 객체를 소유하는 인수로 들어온 shared_ptr 스마트 포인터를 참조하는 <code class="language-plaintext highlighter-rouge">p1</code>과 <code class="language-plaintext highlighter-rouge">p2</code>
        <ul>
          <li>서로를 서로의 파트너로 지정하는 역할을 하는 함수다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">p1</code>의 m_partner 을 <code class="language-plaintext highlighter-rouge">p2</code>로 설정</li>
              <li><code class="language-plaintext highlighter-rouge">p2</code>의 m_partner 을 <code class="language-plaintext highlighter-rouge">p1</code>로 설정</li>
              <li><strong>m_partner</strong>는 <code class="language-plaintext highlighter-rouge">shared_ptr</code>인 멤버다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><strong>순환 참조성 문제</strong> 👉 shared_ptr로 서로가 서로를 참조할시 <u>소유권이 순환이 되서 영원히 두 객체를 delete 할 수 없는 문제.</u></p>
</blockquote>

<ul>
  <li>서로가 서로를 가리키는 <code class="language-plaintext highlighter-rouge">shared_ptr</code>을 가지고 있다면 <code class="language-plaintext highlighter-rouge">use_count()</code> 값은 절대 0 이 되지 않으므로 메모리는 영원히 해제 되지 않는 문제가 발생 한다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">auto</span> <span class="n">lucy</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Lucy"</span><span class="p">);</span>
	<span class="k">auto</span> <span class="n">ricky</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Ricky"</span><span class="p">);</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Lucy created
Ricky created
Ricky destroyed
Lucy destroyed
</code></pre></div></div>

<ul>
  <li>위와 같이 <strong>partnerUp</strong> 함수를 실행하지 않았을 때는, 즉 두 shared_ptr <code class="language-plaintext highlighter-rouge">lucy</code>, <code class="language-plaintext highlighter-rouge">ricky</code>가 서로가 서로를 참조하고 있지 않을 때는 둘 다 블록 밖을 벗어날 때 정상적으로 <em>delete</em> 된 것을 볼 수 있다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">auto</span> <span class="n">lucy</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Lucy"</span><span class="p">);</span>
	<span class="k">auto</span> <span class="n">ricky</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Ricky"</span><span class="p">);</span>
	
	<span class="n">partnerUp</span><span class="p">(</span><span class="n">lucy</span><span class="p">,</span> <span class="n">ricky</span><span class="p">);</span> <span class="c1">// ⭐⭐</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Lucy created
Ricky created
Lucy is partnered with Ricky
</code></pre></div></div>

<ul>
  <li>두 소멸자가 호출 되지 않은 것으로 보아 두 Person 객체가 <u>delete 되지 않은 것을 알 수 있다.</u>
    <ul>
      <li><strong>partnerUp 함수로 인하여 서로를 참조하게 된 것이 문제.</strong>
        <ul>
          <li>“Lucy” 객체에 대한 소유권은 <code class="language-plaintext highlighter-rouge">lucy</code>, <code class="language-plaintext highlighter-rouge">ricky</code> 둘 다 가지고 있게 됨</li>
          <li>“Ricky” 객체에 대한 소유권은 <code class="language-plaintext highlighter-rouge">lucy</code>, <code class="language-plaintext highlighter-rouge">ricky</code> 둘 다 가지고 있게 됨</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>블록 밖을 벗어나거나 프로그램 종료시
    <ul>
      <li><code class="language-plaintext highlighter-rouge">auto lucy = std::make_shared&lt;Person&gt;("Lucy")</code> 가 소멸 되려고 할 때
        <ul>
          <li>👉 “Lucy”에 대한 소유권이 ricky에게도 있으므로 아직 소유하고 있는 포인터가 남아 있으므로 “Lucy” 객체는 delete 되지 않음.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">auto ricky = std::make_shared&lt;Person&gt;("Ricky")</code>  가 소멸 되려고 할 때.
        <ul>
          <li>👉 “Ricky”에 대한 소유권이 lucy에게도 있으므로 
아직 소유하고 있는 포인터가 남아 있으므로 “Ricky” 객체는 delete 되지 않음.</li>
        </ul>
      </li>
      <li>이렇게 영원히 참조 개수가 0 이 될 수 없어서 이러지도 저러지도 못하는 상황이 된다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-stdweak_ptr">🔔 std::weak_ptr</h2>

<blockquote>
  <p>shared_ptr의 순환 의존성 문제를 해결해준다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_name</span><span class="p">;</span>
	
	<span class="c1">//std::shared_ptr&lt;Person&gt; m_partner;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">m_partner</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">Person</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="p">)</span> <span class="o">:</span> <span class="n">m_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" created</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="o">~</span><span class="n">Person</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" destroyed</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">friend</span> <span class="kt">bool</span> <span class="n">partnerUp</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p2</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p1</span> <span class="o">||</span> <span class="o">!</span><span class="n">p2</span><span class="p">)</span>
			<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
		
		<span class="n">p1</span><span class="o">-&gt;</span><span class="n">m_partner</span> <span class="o">=</span> <span class="n">p2</span><span class="p">;</span>
		<span class="n">p2</span><span class="o">-&gt;</span><span class="n">m_partner</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>

		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p1</span><span class="o">-&gt;</span><span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" is partnered with "</span> <span class="o">&lt;&lt;</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">m_name</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">auto</span> <span class="n">lucy</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Lucy"</span><span class="p">);</span>
	<span class="k">auto</span> <span class="n">ricky</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Ricky"</span><span class="p">);</span>
	
	<span class="n">partnerUp</span><span class="p">(</span><span class="n">lucy</span><span class="p">,</span> <span class="n">ricky</span><span class="p">);</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Lucy created
Ricky created
Lucy is partnered with Ricky
Ricky destroyed
Lucy destroyed
</code></pre></div></div>

<ul>
  <li><strong>m_partner</strong>를 shared_ptr 에서 <code class="language-plaintext highlighter-rouge">weak_ptr</code>로 바꿔주니 순환 참조 문제가 제거 되었다. <u>두 객체가 잘 delete 된 것을 알 수 있다.</u>
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">m_partner</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">weak_ptr</code>
    <ul>
      <li><u>하나 이상의 shared_ptr</u> 스마트 포인터가 소유하는 객체에 대한 접근을 제공하지만 <u>소유자의 수에는 포함되지 않는다. 레퍼런스 카운트에 포함되지 않는다.</u></li>
      <li>일반 포인터와 shared_ptr 사이에 위치한 스마트 포인터이다.
        <ul>
          <li>스마트 포인터처럼 자동으로 delete도 해주고 객체를 안전하게 참조할 수 있게 해주지만</li>
          <li><u>shared_ptr과 달리 참조 개수를 늘리지 않는다.</u>
            <ul>
              <li>따라서 위의 예제에서 <strong>m_partner</strong>는 <code class="language-plaintext highlighter-rouge">weak_ptr</code>이므로 카운트에 세지 않기 때문에 2 개가 되는 것이 아닌 1 개로 유지하게 된다. 그렇기 때문에 나중에 블록 밖을 벗어날시 0 개가 되어 성공적으로 두 객체가 <em>delete</em> 될 수 있게 된 것이다.</li>
              <li>👉 약한 참조</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>partnerUp</strong> 함수의 결과로
    <ul>
      <li><code class="language-plaintext highlighter-rouge">lucy</code>는 “Lucy” 객체를 강하게 참조하지만 “Ricky”는 약하게 참조한다. (👉 공유하는 객체로 카운트 되진 않는다.)</li>
      <li><code class="language-plaintext highlighter-rouge">ricky</code>는 “Ricky” 객체를 강하게 참조하지만 “Lucy”는 약하게 참조한다. (👉 공유하는 객체로 카운트 되진 않는다.)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="주의할-점">주의할 점</h3>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">weak_ptr</code> 자체로는 소유하고 있는 객체의 멤버나 포인터에 접근할 수 없어서 그러기 위해선 반드시 <code class="language-plaintext highlighter-rouge">shared_ptr</code>로 변환해서 사용하여야 한다. 👈 <strong>lock 함수를 통하여 실현</strong></p>
</blockquote>

<p><u>weak_ptr은 오직 shared_ptr이나 weak_ptr만 대입 및 할당 받을 수 있다. weak_ptr엔 직접적인 데이터의 주소를 대입할 수 없다.</u> 복사 생성자, 대입 연산자 오버로딩도 shared_ptr이나 weak_ptr만 파라미터로 받게끔 내부적으로 구현이 되어 있음. 그리고 직접적인 데이터는 <em>lock</em> 함수 <code class="language-plaintext highlighter-rouge">shared_ptr</code>을 리턴 받아서 또 이를 통해 두 다리 건너 접근해야 한다.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weak_ptr</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span> <span class="n">m_partner</span> <span class="p">=</span> 
</code></pre></div></div>

<h4 id="lock-함수">lock 함수</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">weak_ptr</code> 자체 안에서 정의가 되어 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">weak_ptr</code>이 가리키는 객체가 아직 메모리에 살아있다면
    <ul>
      <li><em>해당 객체를 가리키는</em> <code class="language-plaintext highlighter-rouge">shared_ptr</code>을 리턴한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">weak_ptr</code>이 가리키는 객체가 이미 메모리에서 해제되었다면
    <ul>
      <li><em>아무것도 가리키지 않는</em> <code class="language-plaintext highlighter-rouge">shared_ptr</code>을 리턴한다.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_name</span><span class="p">;</span>
	
	<span class="c1">//std::shared_ptr&lt;Person&gt; m_partner;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">m_partner</span><span class="p">;</span> <span class="c1">// ⭐⭐⭐</span>

<span class="nl">public:</span>
	<span class="n">Person</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="p">)</span> <span class="o">:</span> <span class="n">m_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" created</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="o">~</span><span class="n">Person</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" destroyed</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">friend</span> <span class="kt">bool</span> <span class="n">partnerUp</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p2</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p1</span> <span class="o">||</span> <span class="o">!</span><span class="n">p2</span><span class="p">)</span>
			<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
		
		<span class="n">p1</span><span class="o">-&gt;</span><span class="n">m_partner</span> <span class="o">=</span> <span class="n">p2</span><span class="p">;</span>
		<span class="n">p2</span><span class="o">-&gt;</span><span class="n">m_partner</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>

		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p1</span><span class="o">-&gt;</span><span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">" is partnered with "</span> <span class="o">&lt;&lt;</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">m_name</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">getPartner</span><span class="p">()</span> <span class="k">const</span> <span class="c1">// ⭐⭐⭐</span>
	<span class="p">{</span>                                            
		<span class="k">return</span> <span class="n">m_partner</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span> <span class="c1">// ⭐⭐ lock 함수 실행</span>
	<span class="p">}</span>                                            

	<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">m_name</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">auto</span> <span class="n">lucy</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Lucy"</span><span class="p">);</span>
	<span class="k">auto</span> <span class="n">ricky</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Ricky"</span><span class="p">);</span>
	
	<span class="n">partnerUp</span><span class="p">(</span><span class="n">lucy</span><span class="p">,</span> <span class="n">ricky</span><span class="p">);</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">auto</span> <span class="n">lucy</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Lucy"</span><span class="p">);</span>
	<span class="k">auto</span> <span class="n">ricky</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Ricky"</span><span class="p">);</span>
	
	<span class="n">partnerUp</span><span class="p">(</span><span class="n">lucy</span><span class="p">,</span> <span class="n">ricky</span><span class="p">);</span>

	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">lucy</span><span class="o">-&gt;</span><span class="n">getPartner</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="c1">// Ricky 출력</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💎출력💎

Lucy created
Ricky created
Lucy is partnered with Ricky
Ricky
Ricky destroyed
Lucy destroyed
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">lucy-&gt;getPartner()-&gt;getName()</code>
    <ul>
      <li><strong><em>getPartner</em></strong>함수의 <strong>return m_partner.</strong><code class="language-plaintext highlighter-rouge">lock()</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">weak_ptr</code>인 <strong>m_partner</strong>의 <code class="language-plaintext highlighter-rouge">lock()</code>함수 호출</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">lucy</code>가 소유하는 객체의 멤버인 <code class="language-plaintext highlighter-rouge">m_partner</code>는 현재 소유하고 있는 객체 <code class="language-plaintext highlighter-rouge">ricky</code>가 있다.
        <ul>
          <li>따라서 <code class="language-plaintext highlighter-rouge">lock()</code>함수는 이를 <code class="language-plaintext highlighter-rouge">shared_ptr</code>로서 임시 변환되어 리턴한다.
            <ul>
              <li>✨<code class="language-plaintext highlighter-rouge">weak_ptr</code>로는 <u>소유하고 있는 객체의 멤버에 접근하는 것이 불가능 한데</u> <code class="language-plaintext highlighter-rouge">lucy-&gt;getPartner()</code> 이렇게 shared_ptr로서 리턴되어 <code class="language-plaintext highlighter-rouge">getName()</code> 멤버 함수에 접근할 수 있게 되었다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>포인터로 접근하려면 shared_ptr로 변환된 후 <code class="language-plaintext highlighter-rouge">get()</code> 함수를 거쳐야 한다.</li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET