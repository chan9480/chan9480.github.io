I")N<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-9-연산자-오버로딩--첨자-연산자-오버로딩">chapter 9. 연산자 오버로딩 : 첨자 연산자 오버로딩</h1>

<blockquote>
  <p>첨자 연산자 : <code class="language-plaintext highlighter-rouge">[]</code></p>
</blockquote>

<p>추가적인 설명은 이전 포스트인 <a href="https://ansohxxn.github.io/cpp/chapter9-1/">9.1 연산자 오버로딩 시작하기</a> 참고하기</p>

<p><strong>객체의 배열이나 벡터인 멤버</strong>를 <code class="language-plaintext highlighter-rouge">객체[index]</code>로 바로 접근하고 싶을 때 사용하는 연산자 오버로딩이다.</p>

<p><br /></p>

<h2 id="-연산자-오버로딩을-사용하지-않은-경우">🔔 연산자 오버로딩을 사용하지 않은 경우</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">IntList</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_list</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>

<span class="nl">public:</span>
	<span class="kt">void</span> <span class="n">setItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="n">m_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">int</span> <span class="n">getItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">m_list</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
	<span class="p">}</span>

	<span class="kt">int</span> <span class="o">*</span> <span class="n">getList</span><span class="p">()</span> 
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">m_list</span><span class="p">;</span> 
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">IntList</span> <span class="n">my_list</span><span class="p">;</span>

	<span class="n">my_list</span><span class="p">.</span><span class="n">setItem</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_list</span><span class="p">.</span><span class="n">getItem</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">my_list</span><span class="p">.</span><span class="n">getList</span><span class="p">()[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">//포인터로 array를 꺼낸뒤에 값을 바꿔준다. </span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_list</span><span class="p">.</span><span class="n">getList</span><span class="p">()[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>IntList 클래스의 <code class="language-plaintext highlighter-rouge">private</code> 배열 멤버인 <em>m_list</em> 의 원소에 접근하기 위해선 접근할 수 있는 <strong>접근 전용 멤버 함수들을 만들어야 한다.</strong> setter, getter.</p>
</blockquote>

<ul>
  <li><em>void setItem(int index, int value)</em>
    <ul>
      <li>👉 <em>my_list.setItem(3, 1);</em>
        <ul>
          <li>my_list.m_list[3] = 1 이나 마찬가지.
            <ul>
              <li>(근데 <code class="language-plaintext highlighter-rouge">private</code>멤버라 실제로는 이렇게 못하기 때문에 함수 사용)</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>int getItem(int index)</em>
    <ul>
      <li>👉 <em>my_list.getItem(3)</em>
        <ul>
          <li>my_list 객체의 m_list[3] 을 리턴 받음</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>int * getList()</em>
    <ul>
      <li>배열 멤버 <em>my_list</em> 이름을 리턴한다.</li>
      <li>즉 <strong>배열 멤버 <em>my_list</em> 의 포인터</strong>를 리턴한다.</li>
      <li>👉 <em>my_list.getList()[3] = 1;</em>
        <ul>
          <li>my_list.m_list[3] = 1 이나 마찬가지.
            <ul>
              <li>(근데 <code class="language-plaintext highlighter-rouge">private</code>멤버라 실제로는 이렇게 못하기 때문에 함수 사용)</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>👉 * my_list.getList()[3]*
        <ul>
          <li>my_list 객체의 m_list[3] 을 리턴 받음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="--연산자-오버로딩--멤버-함수로-구현하기">🔔 [] 연산자 오버로딩 : 멤버 함수로 구현하기</h2>

<blockquote>
  <p>함수를 거치지 않고 <code class="language-plaintext highlighter-rouge">객체[index]</code> 만으로도 바로 해당 객체의 배열 멤버에 접근할 수 있도록 <code class="language-plaintext highlighter-rouge">[]</code>연산자를 오버로딩 한다.</p>
</blockquote>

<blockquote>
  <p>📢 주의사항 : <code class="language-plaintext highlighter-rouge">[]</code>연산자 오버로딩은 <u>멤버 함수로만 구현이 가능하다.</u>이유는 모르겠지만😱 전역 함수로 구현하는 것은 막혀있다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">IntList</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_list</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>

<span class="nl">public:</span>
	<span class="kt">int</span> <span class="o">&amp;</span> <span class="k">operator</span> <span class="p">[]</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">m_list</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">IntList</span> <span class="n">my_list</span><span class="p">;</span>

	<span class="n">my_list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>피연산자는 2개다.
    <ol>
      <li>IntList 타입의 객체</li>
      <li>인덱스 (const int)
        <ul>
          <li>멤버 함수로 구현하므로 인덱스로 쓸 int만 인수 1개 받는다.</li>
        </ul>
      </li>
    </ol>
  </li>
  <li><strong>리턴 타입</strong> 👉 <code class="language-plaintext highlighter-rouge">int &amp;</code> <strong>참조</strong>
    <ul>
      <li><strong>my_list[3]</strong>
        <ul>
          <li>my_list 객체의 멤버 m_list[3] 값을 <u>참조로 리턴한다.</u></li>
        </ul>
      </li>
      <li><u>참조로 리턴해야 리턴되는 데이터를 L-value처럼 사용할 수 있다.</u>
        <ul>
          <li>참조로 리턴해야 <em>my_list[3] = 10;</em> 이런식으로 L-value처럼 사용할 수 있다.
            <ul>
              <li>L-value로 리턴되니 리턴 되는 곳에 바로 값을 대입할 수 있다.</li>
            </ul>
          </li>
          <li>참조로 리턴하지 않고 그냥 int로 리턴했다면 리턴 결과값이 임시 공간에 복사되어 그 임시 공간이 R-value로 리턴되기 때문에 <em>my_list[3] = 10;</em> 이런식으로 사용할 수 없다.</li>
          <li><a href="https://ansohxxn.github.io/cpp/chapter8-7/#%EC%9D%BC%EB%B0%98-%EB%A6%AC%ED%84%B4">참고 포스트</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-배열-멤버-읽기만-가능하게-만들기--const">🔔 배열 멤버 읽기만 가능하게 만들기 : const</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">IntList</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_list</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span> <span class="p">,</span> <span class="mi">10</span> <span class="p">};</span>

<span class="nl">public:</span>
	<span class="kt">int</span> <span class="o">&amp;</span> <span class="k">operator</span> <span class="p">[]</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="c1">//입력받는것은 어떤 프로그램이냐에 따라 바뀔 수있음</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">m_list</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
	<span class="p">}</span>

	<span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="k">operator</span> <span class="p">[]</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="k">const</span> <span class="c1">// 함수 안에서 멤버의 값을 바꾸지 않겠다는 것을 보장한다.</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">m_list</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="n">IntList</span> <span class="n">my_list</span><span class="p">;</span>  <span class="c1">// 뒤에 const가 붙은 멤버 함수만 호출한다.</span>

    <span class="n">my_list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 👈💥에러!!💥 수정할 수 없다.</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 읽기만 가능 </span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><strong>리턴 타입</strong> 👉 <code class="language-plaintext highlighter-rouge">const int &amp;</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">const int &amp;</code>은 <strong>참조하는 대상의 값을 변경할 수 없다.</strong></li>
      <li><strong>my_list[3] = 10;</strong>
        <ul>
          <li>따라서 이렇게 값을 변경하는게 불가능하다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">const</code>
    <ul>
      <li><strong>멤버의 값을 바꾸지 않는 함수라는게 보장된다.</strong></li>
      <li>뒤에 <code class="language-plaintext highlighter-rouge">const</code>가 붙으므로 <code class="language-plaintext highlighter-rouge">const</code>객체는 이 멤버 함수만 호출할 수 있다.
        <ul>
          <li>따라서 <em>const IntList <code class="language-plaintext highlighter-rouge">my_list</code>;</em> 객체는 <code class="language-plaintext highlighter-rouge">const</code>가 뒤에 붙은 두번째로 오버로딩 된 []연산자를 오버로드 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-런타임-에러-방지--assert">🔔 런타임 에러 방지 : assert</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;cassert&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">IntList</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_list</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span> <span class="p">,</span> <span class="mi">10</span> <span class="p">};</span>

<span class="nl">public:</span>
	<span class="kt">int</span> <span class="o">&amp;</span> <span class="k">operator</span> <span class="p">[]</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> 
	<span class="p">{</span>
		<span class="n">assert</span><span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span>
		<span class="n">assert</span><span class="p">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">);</span>

		<span class="k">return</span> <span class="n">m_list</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
	<span class="p">}</span>

	<span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="k">operator</span> <span class="p">[]</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="k">const</span> 
	<span class="p">{</span>
		<span class="n">assert</span><span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span>
		<span class="n">assert</span><span class="p">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">);</span>

		<span class="k">return</span> <span class="n">m_list</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="n">IntList</span> <span class="n">my_list</span><span class="p">;</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>배열 인덱스를 음수 혹은 배열 크기를 넘는 큰 인덱스를 <code class="language-plaintext highlighter-rouge">[]</code> 오버로딩의 인수로 넘기지 않도록 미리 <code class="language-plaintext highlighter-rouge">assert</code>를 두어 잘못된 인덱스를 넘겼을시 에러를 발생하게 한다.</li>
  <li>더 자세한 내용은 <a href="https://ansohxxn.github.io/cpp/chapter7-12/">assert 포스트 참고</a></li>
</ul>

<p><br /></p>

<h2 id="-포인터-객체를-사용할-때-주의-사항">🔔 포인터 객체를 사용할 때 주의 사항</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">InList</span> <span class="o">*</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InList</span><span class="p">;</span>

<span class="n">list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>   <span class="c1">// 에러</span>
<span class="p">(</span><span class="o">*</span><span class="n">list</span><span class="p">)[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 🙆‍♂️ 이렇게 써야 한다.</span>
</code></pre></div></div>
<p>객체를 동적으로 할당 받아 포인터로 참조할 때, <em>list[3]</em>이 아닌 <em>(*list)[3]</em>로 접근해야 한다. <code class="language-plaintext highlighter-rouge">객체[]</code> 로 호출해야하기 때문에!</p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>

<p><br /></p>
:ET