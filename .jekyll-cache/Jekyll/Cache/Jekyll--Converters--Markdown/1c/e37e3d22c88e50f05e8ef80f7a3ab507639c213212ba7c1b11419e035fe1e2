I"#H<p class="notice--warning">인프런에 있는 이재환님의 강의 <strong>게임 디자인 패턴 with Unity</strong> 를 듣고 정리한 필기입니다. 😀</p>

<h1 id="chapter-7-prototype-pattern">Chapter 7. Prototype Pattern</h1>

<h2 id="-prototype-pattern">🔔 Prototype Pattern</h2>

<p><img src="https://user-images.githubusercontent.com/42318591/87653137-12a14b80-c790-11ea-8697-06937a82b160.png" alt="image" width="70%" height="70%" class="align-center" /></p>

<blockquote>
  <p>오브젝트를 새로 생성할시 기존 오브젝트의 복사본으로 생성하여 내용만 조금 수정해준다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Prototype</code>을 상속 받아 clone() 메소드를 구현하는 <code class="language-plaintext highlighter-rouge">ConcretePrototype</code>으로 구성되어 있다.</li>
  <li>원형을 하나 가지고 있고, 원형의 <code class="language-plaintext highlighter-rouge">Prototype</code>을 상속 받아  clone() 메소드를 구현한 상태라면 <code class="language-plaintext highlighter-rouge">Client</code> 에서 원할 때 원형으로 클론을 만들어 사용할 수 있다.</li>
</ul>

<h3 id="사용하는-이유">사용하는 이유</h3>

<ul>
  <li>인스턴스 만들 때 <code class="language-plaintext highlighter-rouge">new</code>나 <code class="language-plaintext highlighter-rouge">Instantiate</code>을 사용하면 그만인데 <u>왜 프로토타입 패턴을 사용할까?</u>
    <ul>
      <li>
        <blockquote>
          <p>프로토타입 패턴은 비슷한 오브젝트를 지속적으로 생성해야 할 때 유용하게 사용할 수 있다.</p>
        </blockquote>
        <ul>
          <li><u>아예 새로운 오브젝트를 지속적으로 생성 new 하는건 부담스러운 일이기 때문.</u></li>
          <li>그보다 싼 비용인 <u>본래의 오브젝트의 복사본을 만들어 내어 (서로 다른 인스턴스), 각 객체에 따라 데이터 수정</u>을 해주는 방식으로 오브젝트를 생성한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">동적 클래스 확장</code>
    <ul>
      <li>약간의 설정 변경으로 비슷하지만 다른 클래스로의 확장이 가능한 경우, 세부 클래스를 미리 명세하지 않고</li>
      <li>런타임 때 원형을 복제해서 그 복사본을 수정함으로써 동적으로 오브젝트를 생성함.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-예제-1">🔔 예제 1</h2>

<h3 id="구조">구조</h3>

<ul>
  <li>📜IUnit.cs
    <ul>
      <li>🧾Iunit 인터페이스
        <ul>
          <li><strong>Clone() 함수</strong>
            <ul>
              <li><u>모든 유닛들은 Clone()함수를 가진다.</u></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>🧾Marine
        <ul>
          <li>👉🏻 🧾Iunit 인터페이스 상속
            <ul>
              <li><strong>Clone() 함수</strong> 오버라이딩</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>🧾Firebat
        <ul>
          <li>👉🏻 🧾Iunit 인터페이스 상속
            <ul>
              <li><strong>Clone() 함수</strong> 오버라이딩</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>📜UnitManager.cs
    <ul>
      <li><code class="language-plaintext highlighter-rouge">원형 패턴</code> 사용!
        <ul>
          <li>설명은 밑에서 확인</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="unitcs">📜Unit.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="c1">// 'IPrototype' interface</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IUnit</span>
<span class="p">{</span>
    <span class="c1">// Method for cloning</span>
    <span class="n">IUnit</span> <span class="nf">Clone</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// 'ConcretePrototype1' class implements IPrototype interface</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Marine</span> <span class="p">:</span> <span class="n">IUnit</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Hp</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">AttackPower</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">// Implement shallow cloning method</span>
    <span class="k">public</span> <span class="n">IUnit</span> <span class="nf">Clone</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// Shallow Copy</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nf">MemberwiseClone</span><span class="p">()</span> <span class="k">as</span> <span class="n">IUnit</span><span class="p">;</span>

        <span class="c1">// Deep Copy</span>
        <span class="c1">// Implement Memberwise clone method for every reference type object </span>
        <span class="c1">// return ..</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Firebat</span> <span class="p">:</span> <span class="n">IUnit</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">AttackPower</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">// Implement shallow cloning method</span>
    <span class="k">public</span> <span class="n">IUnit</span> <span class="nf">Clone</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// Shallow Copy </span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nf">MemberwiseClone</span><span class="p">()</span> <span class="k">as</span> <span class="n">IUnit</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="memberwiseclone-함수-in-c">MemberwiseClone() 함수 in C#</h4>

<blockquote>
  <p>해당 객체를 <u>얕은 복사</u>로 <u>단순 복사본 객체를 생성하고 리턴</u>한다.</p>
</blockquote>

<ul>
  <li><u>객체 복사</u>를 위해 C# Object 클래스에서 지원하는 함수
    <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nf">MemberwiseClone</span><span class="p">()</span> <span class="k">as</span> <span class="n">IUnit</span><span class="p">;</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">IUnit</code> 타입으로 <code class="language-plaintext highlighter-rouge">this</code>(Firebat, Marine 객체)의 사본을 생성한다.</li>
    </ul>
  </li>
  <li>깊은 복사를 하려면 이 함수 말고 따로 개발자가 직접 깊은 복사 내용을 구현해야 한다.</li>
</ul>

<p><br /></p>

<h3 id="unitmanagercs">📜UnitManager.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UnitManager</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>

	<span class="k">void</span> <span class="nf">Start</span> <span class="p">()</span> <span class="p">{</span>
        <span class="n">Marine</span> <span class="n">marine</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Marine</span><span class="p">();</span>
        <span class="n">marine</span><span class="p">.</span><span class="n">Hp</span> <span class="p">=</span> <span class="m">25</span><span class="p">;</span>
        <span class="n">marine</span><span class="p">.</span><span class="n">AttackPower</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>

        <span class="c1">// clone Marine object with Clone method</span>
        <span class="c1">// If you will not set the new value for any field the it will take the default value</span>
        <span class="c1">// from original object</span>
        <span class="n">Marine</span> <span class="n">marineClone</span> <span class="p">=</span> <span class="p">(</span><span class="n">Marine</span><span class="p">)</span><span class="n">marine</span><span class="p">.</span><span class="nf">Clone</span><span class="p">();</span>
        <span class="n">marineClone</span><span class="p">.</span><span class="n">Hp</span> <span class="p">=</span> <span class="m">30</span><span class="p">;</span>  <span class="c1">// 값만 수정해준다.</span>
        <span class="n">marineClone</span><span class="p">.</span><span class="n">AttackPower</span> <span class="p">=</span> <span class="m">6</span><span class="p">;</span>  <span class="c1">// 값만 수정해준다.</span>

        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Marine Details"</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">LogFormat</span><span class="p">(</span><span class="s">"Age: {0} / AttackPower: {1}"</span><span class="p">,</span><span class="n">marine</span><span class="p">.</span><span class="n">Hp</span><span class="p">,</span> <span class="n">marine</span><span class="p">.</span><span class="n">AttackPower</span><span class="p">);</span>

        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Cloned Marine Details"</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">LogFormat</span><span class="p">(</span><span class="s">"Age: {0} / AttackPower: {1}"</span><span class="p">,</span> <span class="n">marineClone</span><span class="p">.</span><span class="n">Hp</span><span class="p">,</span> <span class="n">marineClone</span><span class="p">.</span><span class="n">AttackPower</span><span class="p">);</span>

        <span class="c1">// you can perform the same operation for Firebat</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>마린 최초의 생성은 <code class="language-plaintext highlighter-rouge">new</code>를 사용하여 생성한다.</li>
  <li><u>두번째 마린부터는 새로 생성하지 않고 기존 마린으로부터 복사본을 만든 후 내용만 수정해준다.</u></li>
  <li>원본인 <code class="language-plaintext highlighter-rouge">marine</code>과 복사본인 <code class="language-plaintext highlighter-rouge">marineClone</code>은 별개의 객체이다.</li>
</ul>

<p><br /></p>

<h2 id="-예제-2">🔔 예제 2</h2>

<ul>
  <li>유니티에서 🟦프리팹은 이미 <u>프로토 타입</u>을 따르고 있었다.
    <ul>
      <li>원형인 🟦프리팹을 <u>복사해서</u> ⬜오브젝트로 찍어내는 것이기 때문.</li>
      <li>프리팹이 <code class="language-plaintext highlighter-rouge">Instantiate</code>되어 생성된 오브젝트들은 모두 프리팹의 복사본이다.</li>
      <li>여기서 내용만 조금 수정될 뿐.</li>
    </ul>
  </li>
</ul>

<h3 id="marinecs">📜Marine.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Marine</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">float</span> <span class="n">r</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0.0f</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">g</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0.0f</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">b</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0.0f</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">);</span>

        <span class="n">Renderer</span> <span class="n">rend</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Renderer</span><span class="p">&gt;();</span>
        <span class="n">rend</span><span class="p">.</span><span class="n">material</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Color</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="m">0f</span><span class="p">);</span>   
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">OnCollisionEnter</span><span class="p">(</span><span class="n">Collision</span> <span class="n">collision</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"OnCollisionEnter"</span><span class="p">);</span>
        <span class="nf">Destroy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">gameObject</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>게임이 시작되면 위 📜Marine.cs 스크립트가 붙는 오브젝트의 색상이 랜덤하게 설정된다.</li>
  <li>📜Marine.cs 스크립트가 붙는 오브젝트가 어떤 물체와 충돌하면 오브젝트를 파괴한다.</li>
</ul>

<p><br /></p>

<h3 id="unitmanagercs-1">📜UnitManager.cs</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UnitManager</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>

    <span class="k">public</span> <span class="n">GameObject</span> <span class="n">unit</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">Transform</span> <span class="n">tr</span><span class="p">;</span>

	<span class="k">void</span> <span class="nf">Start</span> <span class="p">()</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">CreateUnit</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">GameObject</span> <span class="n">obj</span> <span class="p">=</span> <span class="nf">Instantiate</span><span class="p">(</span><span class="n">unit</span><span class="p">);</span>
        <span class="n">obj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">=</span> <span class="n">tr</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unit</code>에 프리팹을 드래그 앤 드롭하여 연결한다.</li>
  <li><code class="language-plaintext highlighter-rouge">unit</code> 프리팹을 복사하여 <code class="language-plaintext highlighter-rouge">obj</code> 오브젝트를 만들어낸다.</li>
  <li>CreateUnit() 이 함수는 버튼 이벤트로 연결할 것.</li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET