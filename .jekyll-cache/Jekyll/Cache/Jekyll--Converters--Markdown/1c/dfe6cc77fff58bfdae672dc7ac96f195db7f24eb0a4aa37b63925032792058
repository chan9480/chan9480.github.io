I""+<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-17-stdstring-문자열-클래스">chapter 17. std::string 문자열 클래스</h1>

<h1 id="문자-접근하기와-배열로의-변환">문자 접근하기와 배열로의 변환</h1>

<h2 id="-문자-접근하기">🔔 문자 접근하기</h2>

<h3 id="-연산자로-접근하기">[] 연산자로 접근하기</h3>

<ul>
  <li>std::string 또한 배열처럼 인덱스로 접근이 가능하다.</li>
  <li>my_str[3] = ‘Z’ 바꿔치기도 가능
    <ul>
      <li>“abcdefg” → “abcZefg”</li>
    </ul>
  </li>
  <li><strong>다만, “” 빈 문자열일 때 <code class="language-plaintext highlighter-rouge">[i]</code>로 접근하려 하면 런타임 에러가 발생하니 주의할 것!</strong>
    <ul>
      <li>아직 없는 공간에 접근하려고 하니 에러가 발생한다.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">string</span> <span class="n">my_str</span><span class="p">(</span><span class="s">"abcdefg"</span><span class="p">);</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// a</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_str</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// d</span>

	<span class="n">my_str</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'Z'</span><span class="p">;</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// abcZefg</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="ati과-i의-차이점">at(i)과 [i]의 차이점</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">str[i]</code>
    <ul>
      <li><u>예외를 throw 하지 않아</u> 예외처리를 할 수 없다.
        <ul>
          <li>따라서 <code class="language-plaintext highlighter-rouge">catch</code>문에도 잡히지 않는다.</li>
          <li>빈 문자열이나 문자열의 길이보다 큰 <code class="language-plaintext highlighter-rouge">i</code>값으로 접근하려고 하면 예외가 발생하는데 이에 대한 처리를 해줄 수 없다는게 단점이다.</li>
        </ul>
      </li>
      <li>대신 성능이 좋고 빠르다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">str.at(i)</code>
    <ul>
      <li><u>예외를 throw 한다.</u> 따라서 예외처리를 할 수 있다.
        <ul>
          <li>빈 문자열이나 문자열의 길이보다 큰 <code class="language-plaintext highlighter-rouge">i</code>값으로 접근하려고 하면 예외가 발생하는데 이에 대한 처리를 할 수 있다.</li>
        </ul>
      </li>
      <li>안정적이긴 하나 <code class="language-plaintext highlighter-rouge">[i]</code>보단 느리다.</li>
    </ul>
  </li>
  <li>이와 같은 차이는 <code class="language-plaintext highlighter-rouge">vector</code>같은 다른 컨테이너에서도 똑같다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span> <span class="nf">my_str</span><span class="p">(</span><span class="s">"abcdefg"</span><span class="p">);</span>  <span class="c1">// 길이 7</span>

<span class="k">try</span>
<span class="p">{</span>
	<span class="c1">//my_str[100] = 'X'; -&gt; 길이가 7 뿐이니 예외 발생. 근데 catch에 안잡힌다. 여전히 런타임 에러 발생</span>
	<span class="n">my_str</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="o">=</span> <span class="sc">'X'</span>  <span class="c1">// -&gt; 예외를 던져주어 catch에 걸릴 것이다. </span>
<span class="p">}</span>
<span class="k">catch</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>  <span class="c1">// 예외 처리</span>
<span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 예외 내용 출력</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="-c언어-스타일-문자열배열로-바꾸기">🔔 C언어 스타일 문자열(배열)로 바꾸기</h2>

<h3 id="c_str-함수-사용하기">c_str() 함수 사용하기</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">c_str()</code> 👉🏻 C 스타일 문자열 버전으로 리턴한다.
    <ul>
      <li>문자열 끝에 <code class="language-plaintext highlighter-rouge">\0</code>가 붙어있는 <code class="language-plaintext highlighter-rouge">char</code>배열
        <ul>
          <li>따라서 <code class="language-plaintext highlighter-rouge">size = length + 1</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
	<span class="n">string</span> <span class="n">my_str</span><span class="p">(</span><span class="s">"abcdefg"</span><span class="p">);</span> 

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_str</span><span class="p">.</span><span class="n">c_str</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">arr</span> <span class="o">=</span> <span class="n">my_str</span><span class="p">.</span><span class="n">c_str</span><span class="p">()</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// g</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// '\0'</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="data-함수-사용하기">data() 함수 사용하기</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">c_str()</code> 함수와 하는 일 똑같다. 👉🏻 C 스타일 문자열 버전으로 리턴한다.</li>
</ul>

<h3 id="copy-함수-사용하기">copy() 함수 사용하기</h3>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">str.copy(buf, int a, int b)</code> 👉🏻 <code class="language-plaintext highlighter-rouge">str</code>문자열의 <code class="language-plaintext highlighter-rouge">b</code>인덱스부터 시작하여 <code class="language-plaintext highlighter-rouge">a</code>개의 문자를 <code class="language-plaintext highlighter-rouge">buf</code> 문자열(<strong>char []</strong>)에 복사하고 복사된 길이를 리턴한다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span> <span class="nf">my_str</span><span class="p">(</span><span class="s">"abcdefg"</span><span class="p">);</span>

<span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>

<span class="n">my_str</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

<span class="n">buf</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span><span class="sc">'\0'</span>

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">buf</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">char buf[20]</code>;
    <ul>
      <li>복사할 빈 C스타일의 <strong>char []</strong> 문자열을 만든다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">my_str.copy(buf, 5, 1)</code>;
    <ul>
      <li><code class="language-plaintext highlighter-rouge">buf</code> 빈 문자열 배열에 <code class="language-plaintext highlighter-rouge">my_str</code> string 문자열 중 5글자를 복사. 1번째 인덱스부터 복사 시작.</li>
      <li>“bcdefg”가 buf에 복사 된다.</li>
      <li>두번째 매개변수 : 문자열의 길이</li>
      <li>세번째 매개변수 : 복사를 시작할 위치</li>
      <li><u>실제로 복사된 길이를 반환.</u> (buf의 길이)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">buf[5] = '\0'</code>
    <ul>
      <li>‘\0’은 복사해주지 않으므로 직접 마지막에 붙여준다. (std::string은 ‘\0’가 없다)</li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET