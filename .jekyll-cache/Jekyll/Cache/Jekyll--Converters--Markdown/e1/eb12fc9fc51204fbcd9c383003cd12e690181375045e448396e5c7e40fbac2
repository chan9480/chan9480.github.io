I"
<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-9-연산자-오버로딩--괄호-연산자-오버로딩과-함수-객체">chapter 9. 연산자 오버로딩 : 괄호 연산자 오버로딩과 함수 객체</h1>

<blockquote>
  <p>괄호 연산자 : <code class="language-plaintext highlighter-rouge">()</code></p>
</blockquote>

<p>추가적인 설명은 이전 포스트인 <a href="https://ansohxxn.github.io/cpp/chapter9-1/">9.1 연산자 오버로딩 시작하기</a> 참고하기</p>

<p><code class="language-plaintext highlighter-rouge">()</code> 괄호 연산자는 보통 함수 호출할 때 사용된다. <code class="language-plaintext highlighter-rouge">객체(인수)</code>로 함수처럼 동작하고 싶을 때 사용하는 연산자 오버로딩이다.</p>

<p><br /></p>

<h2 id="-멤버-함수로-구현하기">🔔 멤버 함수로 구현하기</h2>

<blockquote>
  <p>📢 주의사항 : <code class="language-plaintext highlighter-rouge">()</code>연산자 오버로딩은 <u>멤버 함수로만 구현이 가능하다.</u>이유는 모르겠지만😱 전역 함수로 구현하는 것은 막혀있다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Accumulator</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="kt">int</span> <span class="n">m_counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="kt">int</span> <span class="k">operator</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> 
    <span class="p">{</span> 
        <span class="k">return</span> <span class="p">(</span><span class="n">m_counter</span> <span class="o">+=</span> <span class="n">i</span><span class="p">);</span> 
    <span class="p">}</span> 
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Accumulator</span> <span class="n">acc</span><span class="p">;</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">acc</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 10 출력</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">acc</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 30 출력</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Accumulator 타입의 객체 <code class="language-plaintext highlighter-rouge">acc</code>
    <ul>
      <li><em>acc(10)</em>
        <ul>
          <li><em>int operator<code class="language-plaintext highlighter-rouge">()</code> (int i)</em> 이 호출된다.</li>
          <li>10 을 리턴</li>
        </ul>
      </li>
      <li><em>acc(20)</em>
        <ul>
          <li><em>int operator<code class="language-plaintext highlighter-rouge">()</code> (int i)</em> 이 호출된다.</li>
          <li>30 을 리턴</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>

<p><br /></p>
:ET