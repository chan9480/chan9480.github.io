I"sH<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-8-객체-지향의-기초--캡슐화-접근-지정자-접근-함수">chapter 8. 객체 지향의 기초 : 캡슐화, 접근 지정자, 접근 함수</h1>

<h2 id="-캡슐화">🔔 캡슐화</h2>

<blockquote>
  <p>외부로부터 중요한 데이터와 기능을 보호하고 은닉하는 것.</p>
</blockquote>

<p>우리는 연관있고 공통적인 데이터와 기능들을 묶어서 <code class="language-plaintext highlighter-rouge">클래스</code>로 추상화 하였다. 데이터와 기능들 중에서 <u>접근할 수 있는 영역을 제한 하고 외부로부터 은닉하는 것</u>을 것을 <code class="language-plaintext highlighter-rouge">캡슐화</code>라고 한다.</p>

<p><br /></p>

<h2 id="접근-지정자">🔔접근 지정자</h2>

<blockquote>
  <p>접근 지정자를 명시해주지 않으면 디폴트로 <code class="language-plaintext highlighter-rouge">private</code>으로 지정된다.</p>
</blockquote>

<ol>
  <li><code class="language-plaintext highlighter-rouge">public</code>
    <ul>
      <li>외부의 모든 곳에서 접근 허용</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">private</code>
    <ul>
      <li>클래스 내의 멤버 함수에서만 접근 가능</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">protected</code>
    <ul>
      <li>클래스 내의 멤버 함수에서 접근 가능</li>
      <li>이 클래스를 상속 받는 자식 클래스의 멤버 함수에서 접근 가능.</li>
    </ul>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Date</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">m_year</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="kt">int</span> <span class="n">m_month</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_day</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Date</span> <span class="n">today</span><span class="p">;</span> 

	<span class="n">today</span><span class="p">.</span><span class="n">m_day</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>

    <span class="n">today</span><span class="p">.</span><span class="n">m_year</span> <span class="o">=</span> <span class="mi">1994</span><span class="p">;</span> <span class="c1">// 에러 ✨</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_month</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 에러 ✨</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">public</code> 👉 <em>int m_month</em>, <em>int m_day</em>
    <ul>
      <li><em>today.m_day = 25;</em> 는 가능하지만</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">private</code> 👉 <em>int m_year</em>
    <ul>
      <li><em>today.m_year = 1994;</em> 는 에러 발생.
        <ul>
          <li>멤버 변수 <em>m_year</em>은 <code class="language-plaintext highlighter-rouge">private</code> 하기 때문에 외부에서 직접 값을 수정할 수 없다.</li>
        </ul>
      </li>
      <li><em>cout « m_month « endl;</em> 는 에러 발생.
        <ul>
          <li>멤버 변수 <em>m_month</em>은 <code class="language-plaintext highlighter-rouge">private</code> 하기 때문에 외부에서 직접 명시하여 사용할 수 없다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-접근-함수-setter-getter">🔔 접근 함수 Setter, Getter</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">private</code> 멤버 변수들은 <code class="language-plaintext highlighter-rouge">public</code>한 <u>접근 함수들을 만들어 이를 통해 간접적으로 접근</u>하자.</p>
</blockquote>

<h3 id="setter--private-멤버-변수-값-바꾸기">Setter : private 멤버 변수 값 바꾸기</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Date</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">m_month</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_day</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_year</span><span class="p">;</span>
<span class="nl">public:</span>
	<span class="kt">void</span> <span class="n">setDate</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">month_input</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">day_input</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">year_input</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">m_month</span> <span class="o">=</span> <span class="n">month_input</span><span class="p">;</span>
		<span class="n">m_day</span> <span class="o">=</span> <span class="n">day_input</span><span class="p">;</span>
		<span class="n">m_year</span> <span class="o">=</span> <span class="n">year_input</span><span class="p">;</span>
	<span class="p">}</span>
    <span class="n">voic</span> <span class="n">setYear</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">year_input</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">m_year</span> <span class="o">=</span> <span class="n">year_input</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Date</span> <span class="n">today</span><span class="p">;</span> 

	<span class="n">today</span><span class="p">.</span><span class="n">setDate</span><span class="p">(</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2025</span> <span class="p">);</span> <span class="c1">// 멤버 3개를 각각 초기화 해준다.</span>
    <span class="n">today</span><span class="p">.</span><span class="n">setYear</span><span class="p">(</span><span class="mi">2020</span><span class="p">);</span>  <span class="c1">// m_year 멤버변수의 값을 2020으로 바꾼다.  </span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>매개변수를 받아 <code class="language-plaintext highlighter-rouge">private</code>한 멤버들의 값을 초기화하거나 바꿔줄 수 있는 <code class="language-plaintext highlighter-rouge">public</code> 접근 함수 <u>set땡땡 함수</u>를 만든다.
    <ul>
      <li>이제 이 함수들을 통해 <code class="language-plaintext highlighter-rouge">private</code>한 멤버들의 값을 초기화하거나 바꿔줄 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="getter--private-멤버-변수-리턴-받기">Getter : private 멤버 변수 리턴 받기</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Date</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">m_month</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_day</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_year</span><span class="p">;</span>
<span class="nl">public:</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">getYear</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">m_year</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Date</span> <span class="n">today</span><span class="p">;</span> 

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">today</span><span class="p">.</span><span class="n">getYear</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// m_year 멤버를 리턴 받는다.</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>매개변수를 받아 <code class="language-plaintext highlighter-rouge">private</code>한 멤버들의 값을 불러올 수 있는 <code class="language-plaintext highlighter-rouge">public</code> 접근 함수 <u>getter 함수</u>를 만든다.
    <ul>
      <li>이제 이 함수들을 통해 <code class="language-plaintext highlighter-rouge">private</code>한 멤버들의 값을 불러올 수 있다.</li>
    </ul>
  </li>
  <li>getter 접근 함수는 리턴 타입을 <code class="language-plaintext highlighter-rouge">const int &amp;</code>로 하는 것을 권장한다.
    <ul>
      <li>멤버 변수 값을 변경하는 것 없이 리턴만 받을 거라서 <code class="language-plaintext highlighter-rouge">const</code>로 지정해도 무방하고</li>
      <li>복사 과정을 줄여 메모리 성능을 높이기 위해 <code class="language-plaintext highlighter-rouge">참조</code>로 받아주자.</li>
    </ul>
  </li>
</ul>

<h3 id="다른-객체의-멤버들을-복사해오는-접근-함수">다른 객체의 멤버들을 복사해오는 접근 함수</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Date</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">m_month</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_day</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_year</span> <span class="p">;</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">setDate</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">month_input</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">day_input</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">year_input</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">m_month</span> <span class="o">=</span> <span class="n">month_input</span><span class="p">;</span>
		<span class="n">m_day</span> <span class="o">=</span> <span class="n">day_input</span><span class="p">;</span>
		<span class="n">m_year</span> <span class="o">=</span> <span class="n">year_input</span><span class="p">;</span>
	<span class="p">}</span>

    <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">getMonth</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">m_month</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">getDay</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">m_day</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">getYear</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">m_year</span><span class="p">;</span>
    <span class="p">}</span>

	<span class="kt">void</span> <span class="n">copyFrom</span><span class="p">(</span><span class="k">const</span> <span class="n">Date</span><span class="o">&amp;</span> <span class="n">original</span><span class="p">)</span> <span class="c1">// ⭐⭐⭐</span>
	<span class="p">{</span>
		<span class="n">m_month</span> <span class="o">=</span> <span class="n">original</span><span class="p">.</span><span class="n">m_month</span><span class="p">;</span>  
		<span class="n">m_day</span> <span class="o">=</span> <span class="n">original</span><span class="p">.</span><span class="n">m_day</span><span class="p">;</span>
		<span class="n">m_year</span> <span class="o">=</span> <span class="n">original</span><span class="p">.</span><span class="n">m_year</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Date</span> <span class="n">today</span><span class="p">;</span>     <span class="c1">// today 객체</span>
    <span class="n">Date</span> <span class="n">tomorrow</span><span class="p">;</span>  <span class="c1">// tomorrow 객체</span>

    <span class="n">today</span><span class="p">.</span><span class="n">setDate</span><span class="p">(</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2025</span> <span class="p">);</span>
    <span class="n">tomorrow</span><span class="p">.</span><span class="n">copyFrom</span><span class="p">(</span><span class="n">today</span><span class="p">);</span>
    <span class="c1">// tommorow.setDate(today.getMonth(), today.getDay(). today.getYear())</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><em>void copyFrom(const Date&amp; original)</em>
    <ul>
      <li>Date 클래스 타입의 다른 객체를 매개변수로 받아와 그 객체의 멤버 값들을 내 멤버에 복사</li>
    </ul>
  </li>
  <li><em>tomorrow.copyFrom(today);</em>
    <ul>
      <li>today 객체의 멤버 값들을 복사해온다.
        <ul>
          <li>original = today 가 된다.</li>
        </ul>
      </li>
      <li>이제 tomorrow 객체의 멤버 값들도 각각 m_month = 8, m_day = 4, m_year = 2025 가 된다.</li>
    </ul>
  </li>
  <li><em>tommorow.setDate(today.getMonth(), today.getDay(). today.getYear())</em> 해줄 필요 없이 <em>tomorrow.copyFrom(today)</em>만 해주면 되어 간단하다.</li>
</ul>

<blockquote>
  <p>✨<u>서로 다른 별개의 객체더라도 클래스 타입이 동일하다면 각 멤버는 서로의 private 멤버 변수에 접근이 가능하다.</u>✨</p>
</blockquote>

<ul>
  <li>접근 지정자의 접근 제어 기준은 그때 그때 생성된 인스턴스의 기준이 아니라 클래스 기준이기 때문이다.</li>
  <li>tomorrow 객체의 <em>copyFrom</em> 함수 내부에서 today 객체의 멤버들을 사용하고 접근할 수 있는 이유다.
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">copyFrom</span><span class="p">(</span><span class="k">const</span> <span class="n">Date</span><span class="o">&amp;</span> <span class="n">original</span><span class="p">)</span> <span class="c1">// ⭐⭐⭐</span>
<span class="p">{</span>
      <span class="n">m_month</span> <span class="o">=</span> <span class="n">original</span><span class="p">.</span><span class="n">m_month</span><span class="p">;</span>  
      <span class="n">m_day</span> <span class="o">=</span> <span class="n">original</span><span class="p">.</span><span class="n">m_day</span><span class="p">;</span>
      <span class="n">m_year</span> <span class="o">=</span> <span class="n">original</span><span class="p">.</span><span class="n">m_year</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="-캡슐화를-사용하면-좋은-점">🔔 캡슐화를 사용하면 좋은 점</h2>

<p>클래스 내의 멤버 변수 이름을 바꿔야 할 일이 생긴다면 해당 멤버를 직접 접근하여 사용한 부분들도 다 이름을 바꿔줘야 하는 수고가 따른다. 멤버들을 전부 private으로 설정한 후 접근 함수를 통해서만 접근하게 한다면 멤버 변수 명을 바꿔야 할 때도 그냥 클래스 내부에서만 바꾸어 주면 되기 때문에 편하고 안전하다. <u>멤버 변수(데이터)들은 private 으로 막아두는 것을 권장한다.</u></p>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET