I"gY<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-17-stdstring-문자열-클래스">chapter 17. std::string 문자열 클래스</h1>

<h1 id="stdstring의-여러가지-생성자들과-형변환">std::string의 여러가지 생성자들과 형변환</h1>

<h2 id="-stdstring-생성자-종류">🔔 std::string 생성자 종류</h2>

<blockquote>
  <p>여러 생성자들로 문자열을 다양한 방식으로 초기화 할 수 있다.</p>
</blockquote>

<h3 id="디폴트-생성자">디폴트 생성자</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">my_string</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_string</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// 아무것도 출력 안함</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><u>빈 문자열</u>을 생성한다. <code class="language-plaintext highlighter-rouge">my_string</code>은 빈 문자열이므로 아무것도 출력하지 않는다.</li>
</ul>

<p><br /></p>

<h3 id="매개-변수-1개-생성자">매개 변수 1개 생성자</h3>

<ul>
  <li><strong>문자열 리터럴</strong>을 넘길 때
    <ul>
      <li>해당 문자열 리터럴로 초기화 한다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str1</span><span class="p">(</span><span class="s">"my string"</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str1</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// my string 출력</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>std::string</strong>객체를 넘길 때
    <ul>
      <li><u>복사 생성자</u>가 호출된다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str1</span><span class="p">(</span><span class="s">"my string"</span><span class="p">);</span>
	
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str2</span><span class="p">(</span><span class="n">str1</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">second_string</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// my string 출력</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="매개-변수-2개-생성자">매개 변수 2개 생성자</h3>

<ul>
  <li>어떤 문자열의 <strong>반복자 2 개</strong>를 넘기면 두 반복자가 표현하는 범위만큼의 문자열을 생성한다.
    <ul>
      <li>[ 시작반복자, 끝반복자 )
        <ul>
          <li>시작 반복자를 포함한 위치에서 끝 반복자의 바로 이전 위치까지.
            <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
  <span class="n">or</span> <span class="p">(</span><span class="k">auto</span> <span class="n">e</span> <span class="o">:</span> <span class="s">"Today is a good day"</span><span class="p">)</span>
      <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>  <span class="c1">// 빈 벡터 vec에 "Today is a good day" 한글자 한글자씩 원소로 삽입</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">second_string</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="n">vec</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>   <span class="c1">// vec[3] ~ 마지막 원소까지</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">second_string</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// ay is a good day 출력</span>
          
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">third_string</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="sc">'g'</span><span class="p">));</span>  <span class="c1">// 시작 부터 'g'가 있는 위치 전까지 </span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">third_string</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// Today is a  출력</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="매개변수-3개-생성자">매개변수 3개 생성자</h3>

<ul>
  <li><strong>(문자열, 정수1, 정수2)</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">정수 1</code> 번째 이후부터(<code class="language-plaintext highlighter-rouge">정수 1</code>번째는 포함 안됨) 저장하되 <code class="language-plaintext highlighter-rouge">정수 2</code> 개의 문자를 저장
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">my_stirng</span> <span class="o">=</span> <span class="s">"my string"</span><span class="p">;</span>  <span class="c1">// &lt;- C스타일 문자열에도 잘 작동한다.</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">second_string</span><span class="p">(</span><span class="n">my_string</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>  <span class="c1">// my_string의 4번째 글자 이후부터 2 글자만 </span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">second_string</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// tr 출력</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-stdstring-형변환">🔔 std::string 형변환</h2>

<h3 id="다른-데이터-타입--문자열">다른 데이터 타입 👉🏻 문자열</h3>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">to_string(A)</code> : A가 어떤 데이터 타입이던간에 <code class="language-plaintext highlighter-rouge">string</code>으로 변환시켜 준다.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">to_string</code> 함수가 수 많은 데이터 타입으로 오버로딩 되있기에 가능한 일.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">my_str</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="mi">1004</span><span class="p">));</span> <span class="c1">// "1004" 문자열이 된다.</span>

	<span class="n">my_str</span> <span class="o">+=</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="mi">128</span><span class="p">);</span> <span class="c1">// "1004"에 "128" 더해진다. 문자열끼리 더한 것이므로 이어 붙여지고 "1004128"이 된다.</span>

	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_str</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// "1004128" 출력</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="문자열--다른-데이터-타입">문자열 👉🏻 다른 데이터 타입</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">stoi</code> 👉🏻 문자열을 정수로 변환한다.
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">my_str</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="mi">1004</span><span class="p">));</span>

  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">my_str</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// 1004 출력</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">stof</code> 👉🏻 문자열을 실수(float)로 변환한다.
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">my_str</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="mi">1004</span><span class="p">))</span>

  <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stof</span><span class="p">(</span><span class="n">my_str</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// 1004.0 출력</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h3 id="형변환-함수-직접-만들기--sstream-헤더">형변환 함수 직접 만들기 : sstream 헤더</h3>

<blockquote>
  <p>#include &lt;sstream&gt;</p>
</blockquote>

<ul>
  <li>문자열에서 원하는 정보만 빼낼 때 유용하게 사용할 수 있는 헤더다.</li>
  <li><code class="language-plaintext highlighter-rouge">ostringstream</code>, <code class="language-plaintext highlighter-rouge">istregstream</code> 클래스를 가지고 있다.</li>
</ul>

<h4 id="다른-데이터-타입--문자열-함수-만들기--ostringstream">다른 데이터 타입 👉🏻 문자열 함수 만들기 : ostringstream</h4>

<ul>
  <li><u>std::ostringstream</u> 타입인 <code class="language-plaintext highlighter-rouge">oss</code> 객체에
    <ul>
      <li><code class="language-plaintext highlighter-rouge">oss &lt;&lt; x</code> 어떤 데이터 타입이든 무언가를 <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> 연산자를 통해 <code class="language-plaintext highlighter-rouge">oss</code>에 넣으면</li>
      <li><code class="language-plaintext highlighter-rouge">oss.str()</code> 넣어 주었던 <code class="language-plaintext highlighter-rouge">x</code>를  std::string 타입으로 형변환하여 리턴한다.</li>
    </ul>
  </li>
  <li>다양한 데이터 타입을 받기 위해 템플릿 함수로 구현해보자.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">MyToString</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">oss</span><span class="p">;</span>

	<span class="n">oss</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">oss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">my_str</span><span class="p">(</span><span class="n">MyToString</span><span class="p">(</span><span class="mf">3.141592</span><span class="p">));</span>

	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">my_str</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="문자열--다른-데이터-타입-함수-만들기--istreagstream">문자열 👉🏻 다른 데이터 타입 함수 만들기 : istreagstream</h4>

<ul>
  <li>인수로 받은 <code class="language-plaintext highlighter-rouge">str</code> 문자열을 담고 있는 <u>std::istringstream</u> 타입인 <code class="language-plaintext highlighter-rouge">iss</code> 객체</li>
  <li>인수로 문자열과, 문자열을 변환하여 넣을 다른 데이터 타입의 변수를 넘기면 첫번째 인수로 넘긴 문자열을 형변환하여 두번째 인수로 넘긴 변수가 담을 수 있도록 만드는 템플릿 함수를 구현해보자.
    <ul>
      <li><em>bool FromString(const std::string &amp; str, T &amp; x)</em>
        <ul>
          <li>문자열 <code class="language-plaintext highlighter-rouge">str</code>을 형변환하여<code class="language-plaintext highlighter-rouge">X</code>에 담을 것
            <ul>
              <li>참조로 받으므로 인수에도 적용 된다.</li>
            </ul>
          </li>
          <li>성공하면 True, 실패하면 False 리턴</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">(iss &gt;&gt; x) ? true : false</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">str</code>을 <code class="language-plaintext highlighter-rouge">X</code>에 형 변환하여 넣는 것에 성공했다면 true, 실패했다면 false 리턴.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="kt">bool</span> <span class="nf">FromString</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">str</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span><span class="n">iss</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">)</span> <span class="o">?</span> <span class="nb">true</span> <span class="o">:</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">my_str</span><span class="p">(</span><span class="s">"3.141592"</span><span class="p">);</span>

	<span class="kt">double</span> <span class="n">d</span><span class="p">;</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">FromString</span><span class="p">(</span><span class="n">my_str</span><span class="p">,</span> <span class="n">d</span><span class="p">))</span>  <span class="c1">// "3.141592"를 double형 3.141592로 바꾸려는 경우</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c1">// 3.14159 출력</span>
	<span class="k">else</span>    <span class="c1">// "Hello" 이런걸 정수로 바꾸려는 경우엔 실패할 것</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cannot covert string to double"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET