I"R<p class="notice--warning">인프런에 있는 홍정모 교수님의 <strong>홍정모의 따라 하며 배우는 C++</strong> 강의를 듣고 정리한 필기입니다. 😀  <br />
<a href="https://www.inflearn.com/course/following-c-plus">🌜 [홍정모의 따라 하며 배우는 C++]강의 들으러 가기!</a></p>

<p><br /></p>

<h1 id="chapter-13-템플릿--클래스-템플릿">chapter 13. 템플릿 : 클래스 템플릿</h1>

<h2 id="-일반화와-구체화">🔔 일반화와 구체화</h2>

<h3 id="일반화">일반화</h3>

<p>📜MyArray.h</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">MyArray</span>
<span class="p">{</span>
<span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">m_length</span><span class="p">;</span>
    <span class="n">T</span> <span class="o">*</span> <span class="n">m_data</span><span class="p">;</span>   <span class="c1">// ⭐</span>
<span class="nl">public:</span>
    <span class="n">MyArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">m_data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">length</span><span class="p">];</span> <span class="c1">// ⭐</span>
        <span class="n">m_length</span> <span class="o">=</span> <span class="n">length</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="o">~</span><span class="n">MyArray</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">reset</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">reset</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">delete</span> <span class="p">[]</span> <span class="n">m_data</span><span class="p">;</span>
        <span class="n">m_data</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="n">m_length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">T</span> <span class="o">&amp;</span> <span class="k">operator</span> <span class="p">[]</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="c1">// ⭐</span>
    <span class="p">{</span>
        <span class="n">assert</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">m_length</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">m_data</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">getLength</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">m_length</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m_length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>여러 자료형으로 <u>일반화</u>할 부분들은 <code class="language-plaintext highlighter-rouge">T</code>로 넣어놨다.</li>
  <li>꼭 이름이 <code class="language-plaintext highlighter-rouge">typename</code>과 <code class="language-plaintext highlighter-rouge">T</code>일 필요는 없다. 근데 보통 이렇게 씀!</li>
</ul>

<blockquote>
  <p>주의사항 📢 <u>클래스 템플릿은 그 자체로 클래스는 아니다. 클래스 틀일 뿐, 클래스인건 아니다.</u></p>
</blockquote>

<p><br /></p>

<h3 id="구체화">구체화</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "MyArray.h"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">MyArray</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">my_array</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">my_array</span><span class="p">.</span><span class="n">getLength</span><span class="p">();</span><span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">my_array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">65</span><span class="p">;</span>

    <span class="n">my_array</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><strong><em>MyArray&lt;char&gt; my_array(10);</em></strong>
    <ul>
      <li>MyArray 클래스 템플릿이 <code class="language-plaintext highlighter-rouge">char</code> 타입으로 <u>구체화</u> 됐다.
        <ul>
          <li>이말은 즉, 이 클래스를 <u>인스턴스화 할 때 메모리를 얼만큼 할당 받아야 하는지 알게 되었다는 얘기</u>다.✨</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>my_array[i] = i + 65;</em>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">[]</code>연산자 오버로딩이 되어 있어서 <code class="language-plaintext highlighter-rouge">객체 이름[]</code>으로 바로 동적 배열 멤버의 원소에 접근할 수 있다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="-클래스-템플릿은-헤더파일-cpp로-분리하지-않는게-좋다">🔔 클래스 템플릿은 헤더파일, cpp로 분리하지 않는게 좋다.</h2>

<h3 id="단순히-헤더-파일-cpp로-분리한-경우--링킹-에러-발생">단순히 헤더 파일, cpp로 분리한 경우 👉 링킹 에러 발생</h3>

<blockquote>
  <p>print() 멤버 함수의 선언과 정의를 각각 헤더파일과 cpp 파일로 분리해보자.</p>
</blockquote>

<p>📜MyArray.h</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">MyArray</span>
<span class="p">{</span>
    <span class="p">...</span>  <span class="c1">// 다른 부분들은 위와 동일</span>

    <span class="kt">void</span> <span class="n">print</span><span class="p">();</span>  <span class="c1">// ⭐ 선언만</span>
<span class="p">};</span>
</code></pre></div></div>

<p>📜MyArray.cpp</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "MyArray.h"
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="n">MyArray</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">print</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m_length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>📜main.cpp</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "MyArray.h"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">MyArray</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">my_array</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">my_array</span><span class="p">.</span><span class="n">getLength</span><span class="p">();</span><span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">my_array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">65</span><span class="p">;</span>

    <span class="n">my_array</span><span class="p">.</span><span class="n">print</span><span class="p">();</span> <span class="c1">// 💥 링킹 에러 발생</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>컴파일엔 문제가 없으나 💥<u>링킹 에러</u> 발생💥</p>
</blockquote>

<ul>
  <li>링킹 에러 이유
    <ul>
      <li>👉 <strong>📜MyArray.cpp 파일을 컴파일 할 때, 어떤 자료형으로 클래스를 구체화 해야하는지 몰라서 print() 함수의 바디 부분이 메모리에 정의가 되지 않았기 때문이다.</strong>
        <ul>
          <li><strong><em>컴파일</em></strong>
            <ul>
              <li>헤더 파일은 컴파일 하지 않으며
                <ul>
                  <li>cpp 파일에 내에서 include 한 헤더 파일 내용이 복사될 뿐이다.</li>
                </ul>
              </li>
              <li><u>cpp 파일들만 컴파일</u>한다.
                <ul>
                  <li>각각의 cpp 파일들이 <u>독립적으로</u> <code class="language-plaintext highlighter-rouge">컴파일</code> 된 이후에</li>
                  <li>컴파일이 완료된 같은 프로젝트 내의 cpp 파일들끼리 <code class="language-plaintext highlighter-rouge">링킹</code>이 된다.</li>
                </ul>
              </li>
              <li><u>문법 체크</u> + <u>static 한 영역들 메모리 할당</u> 일을 수행한다.
                <ul>
                  <li><u>컴파일시 메모리를 정의하려면 구체적인 자료형을 알아야지만</u> 얼만큼 메모리를 할당할지 알 수 있는데</li>
                  <li>📜MyArray.cpp 파일은 템플릿 타입만 달랑 있어서 어느 정도로 할당해야 할지 알 수가 없기 때문에 <u>print() 바디 부분이 메모리에 정의가 되지 못 하고 그냥 넘어가게 된다.</u></li>
                  <li>따라서 링킹시 print()의 바디 부분을 알 수 없어 링킹 에러가 난다.
                    <ul>
                      <li>컴파일 에러는 없다. 📜main.cpp에서 📜MyArray.h를 include 하고 있기 때문에 print()라는 멤버 함수가 있다는건 알고 있기 때문.</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="해결-방법-1">해결 방법 1</h3>

<p>📜main.cpp</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "MyArray.h"
#include "MyArray.cpp"
</span></code></pre></div></div>

<ul>
  <li>📜MyArray.cpp 파일도 직접 include 해주는 것이다. 이러면 링킹 에러가 발생하지 않는다.
    <ul>
      <li>📜main.cpp에 📜MyArray.cpp의 내용을 복사해오는 것이므로!</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>그러나 이 방법은 추천하지 않는다. <code class="language-plaintext highlighter-rouge">.cpp</code>파일까지 포함하는 일은 프로그램이 커질 시 매우 복잡해진다.</p>
</blockquote>

<p><br /></p>

<h3 id="해결-방법-2">해결 방법 2</h3>

<blockquote>
  <p>explicit instantiation</p>
</blockquote>

<p>📜MyArray.cpp</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "MyArray.h"
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="n">MyArray</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">print</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m_length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">template</span> <span class="kt">void</span> <span class="n">MyArray</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">&gt;</span><span class="o">::</span><span class="n">print</span><span class="p">();</span>
<span class="k">template</span> <span class="kt">void</span> <span class="n">MyArray</span><span class="o">&lt;</span><span class="kt">double</span><span class="p">&gt;</span><span class="o">::</span><span class="n">print</span><span class="p">();</span>
</code></pre></div></div>

<p>이렇게 📜MyArray.cpp 내에서 직접 특정 자료형들을 구체화 해두어 📜MyArray.cpp 컴파일시 각각 메모리가 미리 잡히도록 해주는 방법이 있다. char로도, double로도.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "MyArray.h"
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="n">MyArray</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">print</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m_length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">template</span> <span class="k">class</span> <span class="nc">MyArray</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">&gt;;</span>
<span class="k">template</span> <span class="k">class</span> <span class="nc">MyArray</span><span class="o">&lt;</span><span class="kt">double</span><span class="p">&gt;;</span>
</code></pre></div></div>

<p>이렇게 클래스 단위로 구체화 시킬 수도 있다.</p>

<p><br /></p>

<h3 id="해결-방법-3--가장-추천-">해결 방법 3 : 가장 추천 ✨</h3>

<p>가장 추천하는 방법은 그냥 <u>클래스 템플릿은 헤더 파일 내에서 전부 구현하는 것이다.</u> 클래스 템플릿은 선언부, 구현부 각각 헤더파일, cpp 파일로 나누어 작성하지 말고 그냥 <u>헤더 파일내에 선언 + 구현까지 전부 해놓자.</u></p>

<blockquote>
  <p>클래스 템플릿은 전부 한 파일 내에서 다 구현해주자.</p>
</blockquote>

<p>📜MyArray.h</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">MyArray</span>
<span class="p">{</span>

    <span class="p">...</span>

    <span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m_length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a>
<br /></p>
:ET