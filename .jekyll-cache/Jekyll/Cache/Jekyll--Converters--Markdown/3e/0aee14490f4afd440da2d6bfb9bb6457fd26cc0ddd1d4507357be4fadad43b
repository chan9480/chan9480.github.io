I"Z_<p class="notice--warning">이득우님의 책 <strong>이득우의 언리얼 C++ 게임 개발의 정석</strong> 을 공부하고 정리한 필기입니다. 😀<br />
<strong>언리얼 엔진 공식 문서</strong> <a href="https://docs.unrealengine.com/ko/index.html">https://docs.unrealengine.com/ko/index.html</a></p>

<h1 id="chater-3-움직이는-액터의-제작">Chater 3. 움직이는 액터의 제작</h1>

<h2 id="-로깅-환경의-설정">🔔 로깅 환경의 설정</h2>

<ul>
  <li>디버깅이 편하도록 로깅 환경 구축</li>
</ul>

<h3 id="츨력-로그">츨력 로그</h3>

<ul>
  <li>창 - 개발자 툴 - 출력로그 메뉴로 출력되는 로그들 확인 가능
    <ul>
      <li>log 파일로 Saced/Logs 폴더에 저장되기도 한다.</li>
    </ul>
  </li>
  <li><em>카테고리</em>
    <ul>
      <li>로그들도 카테고리로 분류가 되어있다.</li>
    </ul>
  </li>
  <li><em>로깅 수준</em>
    <ul>
      <li>메세지, 경고, 에러</li>
    </ul>
  </li>
</ul>

<h4 id="로그-카테고리-선언하기">로그 카테고리 선언하기</h4>

<p>📜ArenaBattle.h 프로젝트 헤더 파일</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DECLAUE_LOG_CATEGORY_EXTERN</span><span class="p">(</span><span class="n">ArenaBattle</span><span class="p">,</span> <span class="n">Log</span><span class="p">,</span> <span class="n">All</span><span class="p">);</span>
</code></pre></div></div>

<p>📜ArenaBattle.cpp 프로젝트 cpp 파일</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DEFINE_LOG_CATEGORY_EXTERN</span><span class="p">(</span><span class="n">ArenaBattle</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="로그-사용">로그 사용</h4>

<h5 id="ue_log-사용">UE_LOG 사용</h5>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">UE_LOG</code>(카테고리, 로깅 수준, 형식 문자열, 인자…)</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UE_LOG</code> 매크로이며 로그를 출력한다.</li>
</ul>

<p>📜Fountain.cpp</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">AFountain</span><span class="o">::</span><span class="n">BeginPlay</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Super</span><span class="o">::</span><span class="n">BeginPlay</span><span class="p">();</span>
    <span class="n">UE_LOG</span><span class="p">(</span><span class="n">ArenaBattle</span><span class="p">,</span> <span class="n">Warning</span><span class="p">,</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">"Actor Name : %s, ID : %d, Location X : %.3f"</span><span class="p">),</span> <span class="o">*</span><span class="n">GetName</span><span class="p">(),</span> <span class="n">ID</span><span class="p">,</span> <span class="n">GetActorLocation</span><span class="p">().</span><span class="n">X</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>게임이 시작되자마자 처음 실행되는 함수인 <code class="language-plaintext highlighter-rouge">BeginPlay</code>이벤트 함수에 의해 게임이 시작되자마자 위 출력 메세지가 로그창에 찍히게 된다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">BeginPlay</code>는 유니티에의 Start() 함수 격. 밑에서 또 다룸.</li>
    </ul>
  </li>
  <li><a href="https://ansohxxn.github.io/gameengine/unreal-list/#fstringprintf">FString::printf 참고</a></li>
</ul>

<h5 id="ablog">ABLOG</h5>

<blockquote>
  <p>특정 카테고리를 고정으로 하고 로그를 남길 때 제작하는 매크로.</p>
</blockquote>

<p>p103~104 참고</p>

<h4 id="assertion">assertion</h4>

<blockquote>
  <p>C++의 assert와 비슷. 반드시 확인하고 넘거아야 하는 점검 코드.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cheack</code></li>
  <li><code class="language-plaintext highlighter-rouge">ensure</code></li>
  <li>에픽게임즈 런처 옵션에서 <u>디버깅을 위한 편집기 기호</u>를 선택한 후 설치를 먼저 해야 사용할 수 있다.</li>
</ul>

<p><br /></p>

<h2 id="-액터의-주요-이벤트-함수">🔔 액터의 주요 이벤트 함수</h2>

<ul>
  <li><a href="https://docs.unrealengine.com/ko/Programming/UnrealArchitecture/Actors/ActorLifecycle/index.html">액터의 생명 주기 참고</a></li>
  <li><strong>BeginPlay</strong>
    <ul>
      <li>액터가 게임에 참여할 때 자동 호출</li>
      <li>유니티의 Start</li>
    </ul>
  </li>
  <li><strong>Tick</strong>
    <ul>
      <li>매 프레임마다 호출됨</li>
      <li>유니티의 Update</li>
    </ul>
  </li>
  <li><strong>EndPlay</strong>
    <ul>
      <li>액터가 게임에서 퇴장하여 메모리에서 소멸될 때 자동 호출</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>액터 클래스에 이 같은 이벤트 함수들이 가상 함수 <code class="language-plaintext highlighter-rouge">virtual</code>로 선언이 되어있다. 액터의 자식들은 이를 상속 받아 반드시 오버라이딩 해야 한다.</p>
</blockquote>

<p>📜Fountain.h</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">virtual</span> <span class="kt">void</span> <span class="n">BeginPlay</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span>
<span class="k">virtual</span> <span class="kt">void</span> <span class="n">Tick</span><span class="p">(</span><span class="kt">float</span> <span class="n">DeltaTime</span><span class="p">)</span> <span class="k">override</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>함수 실행마다 알 수 있도록 로그 찍는 방법 p110</li>
</ul>

<p><br /></p>

<h2 id="-움직이는-액터-설계">🔔 움직이는 액터 설계</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Tick</code> : 매 프레임마다 실행되는 이벤트 함수.</p>
</blockquote>

<h3 id="속도-값-멤버-변수">속도 값 멤버 변수</h3>

<ul>
  <li>속도 값을 표현할 멤버 변수 <code class="language-plaintext highlighter-rouge">RotateSpeed</code> 선언해주기</li>
  <li><code class="language-plaintext highlighter-rouge">Meta = (AllowPrivateAccess = true)</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">priavte</code> 은닉성을 유지하나 에디터에서 편집할 수 있게 해주는 키워드</li>
    </ul>
  </li>
</ul>

<p>📜Fountain.h</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">private:</span>
	<span class="n">UPROPERTY</span><span class="p">(</span><span class="n">EditAnywhere</span><span class="p">,</span> <span class="n">Category</span> <span class="o">=</span> <span class="n">Stat</span><span class="p">,</span> <span class="n">Meta</span> <span class="o">=</span> <span class="p">(</span><span class="n">AllowPrivateAccess</span> <span class="o">=</span> <span class="nb">true</span><span class="p">))</span>
	<span class="kt">float</span> <span class="n">RotateSpeed</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="액터를-z-축으로-회전시키기">액터를 Z 축으로 회전시키기</h3>

<blockquote>
  <p>언리얼에서는 인수를 (Y축, Z축, X축) 순으로 넘긴다. 즉, 좌우 회전, 상하 회전, 정면 회전 이 순서로.</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AddActorLocalRotation</code> 함수
    <ul>
      <li>액터를 인수만큼 추가로 회전시킴.</li>
    </ul>
  </li>
</ul>

<p>📜Fountain.cpp</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">AFountain</span><span class="o">::</span><span class="n">AFountain</span><span class="p">()</span>
<span class="p">{</span>
    <span class="p">...</span>
    <span class="n">RotateSpeed</span> <span class="o">=</span> <span class="mf">30.0</span><span class="n">f</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">...</span>

<span class="kt">void</span> <span class="n">AFountain</span><span class="o">::</span><span class="n">Tick</span><span class="p">(</span><span class="kt">float</span> <span class="n">DeltaTime</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">Super</span><span class="o">::</span><span class="n">Tick</span><span class="p">(</span><span class="n">DeltaTime</span><span class="p">);</span>
    <span class="n">AddActorLocalRotation</span><span class="p">(</span><span class="n">FRotator</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="n">RotateSpeed</span> <span class="o">*</span> <span class="n">DeltaTime</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">));</span>  <span class="c1">// Z 축으로 30도 * 프레임당 시간 만큼 회전</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="-최종-코드">🔔 최종 코드</h2>

<h3 id="fountainh">📜Fountain.h</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Fill out your copyright notice in the Description page of Project Settings.</span>

<span class="cp">#pragma once
</span>
<span class="cp">#include "ArenaBattle.h"
#include "GameFramework/RotatingMovementComponent.h"
#include "GameFramework/Actor.h"
#include "Fountain.generated.h"
</span>
<span class="n">UCLASS</span><span class="p">()</span>
<span class="k">class</span> <span class="nc">ARENABATTLE_API</span> <span class="n">AFountain</span> <span class="o">:</span> <span class="k">public</span> <span class="n">AActor</span>
<span class="p">{</span>
	<span class="n">GENERATED_BODY</span><span class="p">()</span>
	
<span class="nl">public:</span>	
	<span class="c1">// Sets default values for this actor's properties</span>
	<span class="n">AFountain</span><span class="p">();</span>

<span class="nl">protected:</span>
	<span class="c1">// Called when the game starts or when spawned</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">BeginPlay</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">EndPlay</span><span class="p">(</span><span class="k">const</span> <span class="n">EEndPlayReason</span><span class="o">::</span><span class="n">Type</span> <span class="n">EndPlayReason</span><span class="p">)</span> <span class="k">override</span><span class="p">;</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">PostInitializeComponents</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span>

<span class="nl">public:</span>	
	<span class="c1">// Called every frame</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">Tick</span><span class="p">(</span><span class="kt">float</span> <span class="n">DeltaTime</span><span class="p">)</span> <span class="k">override</span><span class="p">;</span>

	<span class="n">UPROPERTY</span><span class="p">(</span><span class="n">VisibleAnywhere</span><span class="p">)</span>
	<span class="n">UStaticMeshComponent</span> <span class="o">*</span><span class="n">Body</span><span class="p">;</span>

	<span class="n">UPROPERTY</span><span class="p">(</span><span class="n">VisibleAnywhere</span><span class="p">)</span>
	<span class="n">UStaticMeshComponent</span> <span class="o">*</span><span class="n">Water</span><span class="p">;</span>

	<span class="n">UPROPERTY</span><span class="p">(</span><span class="n">VisibleAnywhere</span><span class="p">)</span>
	<span class="n">UPointLightComponent</span> <span class="o">*</span><span class="n">Light</span><span class="p">;</span>

	<span class="n">UPROPERTY</span><span class="p">(</span><span class="n">VisibleAnywhere</span><span class="p">)</span>
	<span class="n">UParticleSystemComponent</span> <span class="o">*</span><span class="n">Splash</span><span class="p">;</span>

	<span class="n">UPROPERTY</span><span class="p">(</span><span class="n">VisibleAnywhere</span><span class="p">)</span>
	<span class="n">URotatingMovementComponent</span><span class="o">*</span> <span class="n">Movement</span><span class="p">;</span>

	<span class="n">UPROPERTY</span><span class="p">(</span><span class="n">EditAnywhere</span><span class="p">,</span> <span class="n">Category</span><span class="o">=</span><span class="n">ID</span><span class="p">)</span>
	<span class="n">int32</span> <span class="n">ID</span><span class="p">;</span>

<span class="nl">private:</span>
	<span class="n">UPROPERTY</span><span class="p">(</span><span class="n">EditAnywhere</span><span class="p">,</span> <span class="n">Category</span> <span class="o">=</span> <span class="n">Stat</span><span class="p">,</span> <span class="n">Meta</span> <span class="o">=</span> <span class="p">(</span><span class="n">AllowPrivateAccess</span> <span class="o">=</span> <span class="nb">true</span><span class="p">))</span>
	<span class="kt">float</span> <span class="n">RotateSpeed</span><span class="p">;</span>
<span class="p">};</span>

</code></pre></div></div>

<h3 id="fountaincpp">📜Fountain.cpp</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Fill out your copyright notice in the Description page of Project Settings.</span>

<span class="cp">#include "Fountain.h"
</span>

<span class="c1">// Sets default values</span>
<span class="n">AFountain</span><span class="o">::</span><span class="n">AFountain</span><span class="p">()</span>
<span class="p">{</span>
 	<span class="c1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	<span class="n">PrimaryActorTick</span><span class="p">.</span><span class="n">bCanEverTick</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

	<span class="n">Body</span> <span class="o">=</span> <span class="n">CreateDefaultSubobject</span><span class="o">&lt;</span><span class="n">UStaticMeshComponent</span><span class="o">&gt;</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"BODY"</span><span class="p">));</span>
	<span class="n">Water</span> <span class="o">=</span> <span class="n">CreateDefaultSubobject</span><span class="o">&lt;</span><span class="n">UStaticMeshComponent</span><span class="o">&gt;</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"WATER"</span><span class="p">));</span>
	<span class="n">Light</span> <span class="o">=</span> <span class="n">CreateDefaultSubobject</span><span class="o">&lt;</span><span class="n">UPointLightComponent</span><span class="o">&gt;</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"LIGHT"</span><span class="p">));</span>
	<span class="n">Splash</span> <span class="o">=</span> <span class="n">CreateDefaultSubobject</span><span class="o">&lt;</span><span class="n">UParticleSystemComponent</span><span class="o">&gt;</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"SPLASH"</span><span class="p">));</span>
	<span class="n">Movement</span> <span class="o">=</span> <span class="n">CreateDefaultSubobject</span><span class="o">&lt;</span><span class="n">URotatingMovementComponent</span><span class="o">&gt;</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"MOVEMENT"</span><span class="p">));</span>

	<span class="n">RootComponent</span> <span class="o">=</span> <span class="n">Body</span><span class="p">;</span>
	<span class="n">Water</span><span class="o">-&gt;</span><span class="n">SetupAttachment</span><span class="p">(</span><span class="n">Body</span><span class="p">);</span>
	<span class="n">Light</span><span class="o">-&gt;</span><span class="n">SetupAttachment</span><span class="p">(</span><span class="n">Body</span><span class="p">);</span>
	<span class="n">Splash</span><span class="o">-&gt;</span><span class="n">SetupAttachment</span><span class="p">(</span><span class="n">Body</span><span class="p">);</span>

	<span class="n">Water</span><span class="o">-&gt;</span><span class="n">SetRelativeLocation</span><span class="p">(</span><span class="n">FVector</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">135.0</span><span class="n">f</span><span class="p">));</span>
	<span class="n">Light</span><span class="o">-&gt;</span><span class="n">SetRelativeLocation</span><span class="p">(</span><span class="n">FVector</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">195.0</span><span class="n">f</span><span class="p">));</span>
	<span class="n">Splash</span><span class="o">-&gt;</span><span class="n">SetRelativeLocation</span><span class="p">(</span><span class="n">FVector</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">195.0</span><span class="n">f</span><span class="p">));</span>

	<span class="k">static</span> <span class="n">ConstructorHelpers</span><span class="o">::</span><span class="n">FObjectFinder</span><span class="o">&lt;</span><span class="n">UStaticMesh</span><span class="o">&gt;</span> <span class="n">SM_BODY</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"/Game/InfinityBladeGrassLands/Environments/Plains/Env_Plains_Ruins/StaticMesh/SM_Plains_Castle_Fountain_01.SM_Plains_Castle_Fountain_01"</span><span class="p">));</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">SM_BODY</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">())</span>
	<span class="p">{</span>
		<span class="n">Body</span><span class="o">-&gt;</span><span class="n">SetStaticMesh</span><span class="p">(</span><span class="n">SM_BODY</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">static</span> <span class="n">ConstructorHelpers</span><span class="o">::</span><span class="n">FObjectFinder</span><span class="o">&lt;</span><span class="n">UStaticMesh</span><span class="o">&gt;</span> <span class="n">SM_WATER</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"/Game/InfinityBladeGrassLands/Effects/FX_Meshes/Env/SM_Plains_Fountain_02.SM_Plains_Fountain_02"</span><span class="p">));</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="n">SM_WATER</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">())</span>
	<span class="p">{</span>
		<span class="n">Water</span><span class="o">-&gt;</span><span class="n">SetStaticMesh</span><span class="p">(</span><span class="n">SM_WATER</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">static</span> <span class="n">ConstructorHelpers</span><span class="o">::</span><span class="n">FObjectFinder</span><span class="o">&lt;</span><span class="n">UParticleSystem</span><span class="o">&gt;</span> <span class="n">PS_SPLASH</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">"/Game/InfinityBladeGrassLands/Effects/FX_Ambient/Water/P_Water_Fountain_Splash_Base_01.P_Water_Fountain_Splash_Base_01"</span><span class="p">));</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">PS_SPLASH</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">())</span>
	<span class="p">{</span>
		<span class="n">Splash</span><span class="o">-&gt;</span><span class="n">SetTemplate</span><span class="p">(</span><span class="n">PS_SPLASH</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">RotateSpeed</span> <span class="o">=</span> <span class="mf">30.0</span><span class="n">f</span><span class="p">;</span>
	<span class="n">Movement</span><span class="o">-&gt;</span><span class="n">RotationRate</span> <span class="o">=</span> <span class="n">FRotator</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="n">RotateSpeed</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Called when the game starts or when spawned</span>
<span class="kt">void</span> <span class="n">AFountain</span><span class="o">::</span><span class="n">BeginPlay</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Super</span><span class="o">::</span><span class="n">BeginPlay</span><span class="p">();</span>

	<span class="n">ABLOG_S</span><span class="p">(</span><span class="n">Warning</span><span class="p">);</span>
	<span class="n">ABLOG</span><span class="p">(</span><span class="n">Warning</span><span class="p">,</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">"Actor Name : %s, ID : %d, Location X : %.3f"</span><span class="p">),</span> <span class="o">*</span><span class="n">GetName</span><span class="p">(),</span> <span class="n">ID</span><span class="p">,</span> <span class="n">GetActorLocation</span><span class="p">().</span><span class="n">X</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">AFountain</span><span class="o">::</span><span class="n">EndPlay</span><span class="p">(</span><span class="k">const</span> <span class="n">EEndPlayReason</span><span class="o">::</span><span class="n">Type</span> <span class="n">EndPlayReason</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">Super</span><span class="o">::</span><span class="n">EndPlay</span><span class="p">(</span><span class="n">EndPlayReason</span><span class="p">);</span>
	<span class="n">ABLOG_S</span><span class="p">(</span><span class="n">Warning</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">AFountain</span><span class="o">::</span><span class="n">PostInitializeComponents</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Super</span><span class="o">::</span><span class="n">PostInitializeComponents</span><span class="p">();</span>
	<span class="n">ABLOG_S</span><span class="p">(</span><span class="n">Warning</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Called every frame</span>
<span class="kt">void</span> <span class="n">AFountain</span><span class="o">::</span><span class="n">Tick</span><span class="p">(</span><span class="kt">float</span> <span class="n">DeltaTime</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">Super</span><span class="o">::</span><span class="n">Tick</span><span class="p">(</span><span class="n">DeltaTime</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />
<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우 
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>
:ET