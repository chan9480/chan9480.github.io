<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-10T21:59:19+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">배우자 그리고 써먹자</title><subtitle>포트폴리오</subtitle><author><name>옹달샘👱🏼‍♂️</name></author><entry><title type="html">1x1 conv, 그리고 conv2d conv3d의 이해</title><link href="http://localhost:4000/ds/1by1conv/" rel="alternate" type="text/html" title="1x1 conv, 그리고 conv2d conv3d의 이해" /><published>2022-04-09T00:00:00+09:00</published><updated>2022-04-09T00:00:00+09:00</updated><id>http://localhost:4000/ds/1by1conv</id><content type="html" xml:base="http://localhost:4000/ds/1by1conv/"><![CDATA[<h2 id="1by1-conv는-어떻게-생긴거냐">1by1 conv는 어떻게 생긴거냐</h2>
<p>처음엔 1by1 사이즈의 필터가 CNN에서 의미가 있나 생각했다.<br />
근데 그게 아니라 1by1byN 모양의 필터였던 것!<br />
피쳐맵의 길이를 줄일 수 있고, 이를 포함하는 CNN구조들은 비교적 더 이후에 나온 구조이기도 하고,<br />
연산량을 줄이고 속도를 높이는 역할을 할까?</p>

<h2 id="2차원-필터는-conv2d-3차원-필터는-conv3d">2차원 필터는 conv2d, 3차원 필터는 conv3d</h2>
<p>내가 이해한게 맞다면 conv2d는 피쳐맵길이는 같거나, 증가할 수 밖에 없고<br />
conv3d는 감소, 동일, 증가 모두 가능하다.</p>

<h2 id="1by1-conv의-예시">1by1 conv의 예시</h2>
<p>3by3 필터를 사용하는<br />
input이 (7,7,32), output 사이즈가 (7,7,64)라고 해보자(same padding)<br />
conv2d를 사용하면 파라미터는  (3x3)x32x64+64 = 18496.<br />
conv3d를 사용해도 식의 의미는 다르지만 (3x3x32)x64+64 = 18496.</p>

<p>1x1 conv를 사용하여 (7,7,16) 으로 변환 후 (7,7,64) 로 바꾼다면<br />
(1x1x32x16+16) + (3x3x16x64+64) = 528 + 9280 = 9808.</p>

<p>파라미터의 수를 상당히 줄일 수 있다</p>

<p>VGGnet에서 Resnet은 VGGnet 대비 기울기 소실을 막음으로써 모델을 더 깊게 쌓을 수 있었다면,<br />
1by1 conv의 경우에는 파라미터의 수를 줄임으로써 모델을 더 깊게 쌓을 수 있을 것.</p>

<h2 id="fire-module">fire module</h2>

<p>1x1 conv를 사용하는 대표적인 예시가 fire module인데,  3x3 convㄹ</p>

<p>미완 참고중 :<br />
https://hoya012.github.io/blog/deeplearning-classification-guidebook-3/</p>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="ds" /><summary type="html"><![CDATA[1by1 conv는 어떻게 생긴거냐 처음엔 1by1 사이즈의 필터가 CNN에서 의미가 있나 생각했다. 근데 그게 아니라 1by1byN 모양의 필터였던 것! 피쳐맵의 길이를 줄일 수 있고, 이를 포함하는 CNN구조들은 비교적 더 이후에 나온 구조이기도 하고, 연산량을 줄이고 속도를 높이는 역할을 할까?]]></summary></entry><entry><title type="html">YOLO를 이해하기 위한 CNN 객체인식 모델</title><link href="http://localhost:4000/ds/YOLO/" rel="alternate" type="text/html" title="YOLO를 이해하기 위한 CNN 객체인식 모델" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T00:00:00+09:00</updated><id>http://localhost:4000/ds/YOLO</id><content type="html" xml:base="http://localhost:4000/ds/YOLO/"><![CDATA[<h2 id="유명-이미지-데이터">유명 이미지 데이터</h2>
<p>cifar10, 100 : 클래스 10, 100개의 갖는 사물 이미지(32,32) 데이터 셋 (학습용 50000개)<br />
imagenet :  클래스 훨씬 다양(몇천, 몇만), 백만개가 넘음.</p>

<h2 id="객체-인식-모델의-전반적인-생김새">객체 인식 모델의 전반적인 생김새</h2>
<p><img src="/assets/images/source_34.png" height="100%" />
&lt; 2stage와 1stage 구조 그림&gt;</p>

<ol>
  <li>
    <p>2-stage detector : region proposal network를 포함한다. 이는 자주 탐지되는 부분을 학습한다는 의미. + localization과 classification을 ‘각각’ 진행한다는 의미.</p>
  </li>
  <li>
    <p>single(1-stage) detector : localization과 classification을 동시에 진행.</p>
  </li>
</ol>

<h2 id="객체-분류-backbone">객체 분류 (Backbone)</h2>
<ul>
  <li>
    <p>VGGnet : 3x3 conv만 사용하여 구조가 단순한데 비해 기능은 준수함.</p>
  </li>
  <li>
    <p>Resnet : 3x3 conv를 포함하며 conv를 무시 후 지나가는 shortcut을 갖는 residual block 으로 구성됨. (Resnet152에서는 1x1 conv를 포함하는 residual block을 사용함) 기울기 손실 방지를 통해 깊이를 깊게 쌓을 수 있게 됨.</p>
  </li>
</ul>

<p><img src="/assets/images/source_35.png" width="50%" /></p>

<ul>
  <li>Dense net : Resnet같이 relu가 아닌, concat으로 이전 정보를 가져간다는 차이가 있음.</li>
</ul>

<p><img src="/assets/images/source_36.png" height="100%" /></p>

<ul>
  <li>CSP-Darknet : Densenet을 기초로 CSP를 적용시킴</li>
  <li>CSP 방법 : 분리된 feature map을 다시 병합해주다?</li>
</ul>

<h2 id="neck">Neck</h2>
<p><img src="/assets/images/source_38.png" width="50%" />
<img src="/assets/images/source_39.png" height="70%" /></p>
<ol>
  <li>
    <p>additional blocks : 다양한 크기의 피쳐맵들을 만들어 정보를 수집 SPP : 아하<br />
(사진 예시(좌) : SPP, 모든 피쳐맵들을 몇가지 경우의 grid로 나누어 flatten한 후 평균을 냄 )</p>
  </li>
  <li>
    <p>path-aggregation blocks : bottom-up path 와 top-down path에서 정보를 수집<br />
(사진 예시(우) : PAN, 기존 FPN 네트워크에서 빨간선, 초록선과 같이 low-level-feature를 high-level-feature에 전달하여 성능을 향상시킴.)</p>
  </li>
</ol>

<h2 id="head">Head</h2>
<ol>
  <li>영역 제한 faster R-CNN<br />
자주 생성되는 위치를 학습한다. region proposal net</li>
  <li>사이즈 제한 YOLO  <br />
정해진 그리드로 나누어 CNN으로 처리한다.</li>
</ol>

<p>미완, 참고중 :<br />
https://herbwood.tistory.com/24<br />
https://deep-learning-study.tistory.com/528<br />
https://ganghee-lee.tistory.com/34</p>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="ds" /><summary type="html"><![CDATA[유명 이미지 데이터 cifar10, 100 : 클래스 10, 100개의 갖는 사물 이미지(32,32) 데이터 셋 (학습용 50000개) imagenet : 클래스 훨씬 다양(몇천, 몇만), 백만개가 넘음.]]></summary></entry><entry><title type="html">클라우드 데이터베이스, SQL</title><link href="http://localhost:4000/de/CloudDB/" rel="alternate" type="text/html" title="클라우드 데이터베이스, SQL" /><published>2022-04-02T00:00:00+09:00</published><updated>2022-04-02T00:00:00+09:00</updated><id>http://localhost:4000/de/CloudDB</id><content type="html" xml:base="http://localhost:4000/de/CloudDB/"><![CDATA[<h1 id="클라우드-데이터베이스">클라우드 데이터베이스</h1>
<p>말 그대로 온라인으로 접근할 수 있는 데이터베이스를 말한다.</p>
<ol>
  <li>관계형 데이터베이스  (oracle DB, mySQL, PostgreSQL 등)</li>
  <li>NoSQL  (MongoDB, Redis, Hbase Neo4j등)</li>
</ol>

<h2 id="관계형-데이터베이스-rdb--relational-database">관계형 데이터베이스 (RDB : Relational DataBase)</h2>
<p>스키마의 형태로 데이터들의 연관성을 고려해서 데이터를 저장한다.<br />
데이터를 관리하기 위해 SQL언어를 사용해야한다.</p>

<blockquote>
  <p>스키마 이미지<br />
<img src="/assets/images/source_33.png" width="70%" /></p>
</blockquote>

<h2 id="nosql">NoSQL</h2>
<p>말그대로 SQL에 한정되지 않겠다는 의지를 담은 데이터베이스</p>

<p>형식의 자유로운 데이터들을 딕셔너리와 같이 Key와 값의 관계로 저장해서,<br />
Key로 하여금 데이터를 불러올 수 있는 구조를 말한다.</p>

<p>그 형태에 따라 Key-value(key하나의 value에 여러 column값들을 가짐), document(하나의 doc은 여러 key:value 세트를 갖는 dict형), wide-column(key-value와 비슷한데 좀 더 형식이 더해져, 덜 유연한 구조), graph 등의 종류가 있다.</p>

<h2 id="데이타-베이스-구조의-유연함의-의미">데이타 베이스 구조의 유연함의 의미</h2>
<p>유연 up &lt;-&gt; 확장성 up , 무결성, 안정성, 관리용이성 down</p>

<p>확장성에 대해서는 수평적으로 용이한지, 수직적으로 용이한지 애매할 수 있다.</p>

<p>RDB의 경우 상대적으로 덜 유연하더라도 수직적 확장으로는 더 강점이 있다고 할 수 있다.</p>

<h1 id="sql-문법-이모저모">SQL 문법 이모저모</h1>

<p>FROM
WHERE
GROUP BY
HAVING
SELECT
ORDER BY</p>

<h1 id="python에서-클라우드-데이터베이-사용">python에서 클라우드 데이터베이 사용</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="de" /><summary type="html"><![CDATA[클라우드 데이터베이스 말 그대로 온라인으로 접근할 수 있는 데이터베이스를 말한다. 관계형 데이터베이스 (oracle DB, mySQL, PostgreSQL 등) NoSQL (MongoDB, Redis, Hbase Neo4j등)]]></summary></entry><entry><title type="html">wiki데이터를 이용한 이미지 캡셔닝</title><link href="http://localhost:4000/pj/image_captioning/" rel="alternate" type="text/html" title="wiki데이터를 이용한 이미지 캡셔닝" /><published>2022-03-28T00:00:00+09:00</published><updated>2022-03-28T00:00:00+09:00</updated><id>http://localhost:4000/pj/image_captioning</id><content type="html" xml:base="http://localhost:4000/pj/image_captioning/"><![CDATA[<h3 id="mac-gpu-사용가능확인-1이면-사용가능">mac gpu 사용가능확인 (1이면 사용가능)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Num GPUs Available: "</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">experimental</span><span class="p">.</span><span class="n">list_physical_devices</span><span class="p">(</span><span class="s">'GPU'</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Num GPUs Available:  0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>
<span class="n">drive</span><span class="p">.</span><span class="n">mount</span><span class="p">(</span><span class="s">'/content/drive'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mounted at /content/drive
</code></pre></div></div>

<h1 id="import">import</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tensorflow.compat.v2 를 사용
</span><span class="kn">import</span> <span class="nn">tensorflow.compat.v2</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">time</span>
</code></pre></div></div>

<h1 id="dataset">dataset</h1>
<blockquote>
  <p>각 train 데이터 ( train_1 ~ train_10) 는 small_data.ipynb 에서 따로 처리하여 만들어짐.<br />
영어만 추출, image_url 과 caption_feature 만 추출.</p>
</blockquote>

<p>출처 : https://www.kaggle.com/c/wikipedia-image-caption/code?competitionId=29705&amp;searchQuery=tensor</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># caption_feature를 보면
# 1. [SEP] 으로 나뉘어져 있는데, 그 뒤에 있는 내용에 대해 할 것. (BERT)에서 사용하는 스페셜 토큰인데 파인튜닝은 안할 것이므로..
# 2. 숫자정보는 제외하자 대부분 특수한 경우에 쓰이거나 주소 등이다.
</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'/content/drive/MyDrive/dataset/wiki/train_1.tsv'</span><span class="p">,</span> <span class="n">delimiter</span> <span class="o">=</span> <span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">'\[SEP\].+'</span><span class="p">)</span> <span class="c1"># \로 감싸진 곳은
</span><span class="n">df</span><span class="p">[</span><span class="s">'caption_title_and_reference_description'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">'caption_title_and_reference_description'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span>
                                <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s">'&lt;start&gt; '</span> <span class="o">+</span>
                                        <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="s">'\d+'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">group</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">'[SEP] '</span><span class="p">,</span> <span class="s">''</span><span class="p">)).</span><span class="n">lower</span><span class="p">()</span>
                                        <span class="o">+</span><span class="s">' &lt;end&gt;'</span>
                                        <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">group</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span><span class="p">[</span><span class="s">'[SEP] '</span><span class="p">,</span> <span class="s">''</span><span class="p">]</span> <span class="k">else</span> <span class="bp">None</span><span class="p">)</span>
<span class="n">df</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(301484, 2)
</code></pre></div></div>

<div id="df-e23dee60-b000-4f2a-9687-a1c1871c9bd4">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>image_url</th>
      <th>caption_title_and_reference_description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>https://upload.wikimedia.org/wikipedia/commons...</td>
      <td>&lt;start&gt; downtown deer park &lt;end&gt;</td>
    </tr>
    <tr>
      <th>1</th>
      <td>https://upload.wikimedia.org/wikipedia/commons...</td>
      <td>&lt;start&gt; jürgen ovens's justitia, -, museumsber...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>https://upload.wikimedia.org/wikipedia/commons...</td>
      <td>&lt;start&gt;  mv agusta  raid &lt;end&gt;</td>
    </tr>
    <tr>
      <th>4</th>
      <td>https://upload.wikimedia.org/wikipedia/commons...</td>
      <td>&lt;start&gt; seth macfarlane's logo &lt;end&gt;</td>
    </tr>
    <tr>
      <th>6</th>
      <td>https://upload.wikimedia.org/wikipedia/commons...</td>
      <td>&lt;start&gt; erskine river at lorne &lt;end&gt;</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-e23dee60-b000-4f2a-9687-a1c1871c9bd4')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-e23dee60-b000-4f2a-9687-a1c1871c9bd4 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-e23dee60-b000-4f2a-9687-a1c1871c9bd4');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">urllib</span> <span class="kn">import</span> <span class="n">request</span>

<span class="k">def</span> <span class="nf">url_to_image</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="s">'''
    url 에서 이미지를 추출하여, (512,512,3) 의 rgb ndarray로 리턴
    '''</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">read</span><span class="p">()),</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'uint8'</span><span class="p">)</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imdecode</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_COLOR</span><span class="p">)</span><span class="c1">#/255.0
</span>    <span class="k">return</span> <span class="n">image</span>
    <span class="c1">#return cv2.resize(image, (512,512))
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 가장 긴 캡션과 그의 이미지 출력해보기 (모델상에서는 실행안해도됨.)
</span><span class="kn">from</span> <span class="nn">google.colab.patches</span> <span class="kn">import</span> <span class="n">cv2_imshow</span>
<span class="n">long_caption</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'caption_title_and_reference_description'</span><span class="p">],</span> <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">'caption_title_and_reference_description'</span><span class="p">]</span> <span class="o">==</span> <span class="n">long_caption</span> <span class="p">][</span><span class="s">'image_url'</span><span class="p">]</span>
<span class="c1">#a = df[df['caption_title_and_reference_description'] == 'Downtown Deer Park']['image_url']
</span><span class="n">x</span> <span class="o">=</span> <span class="n">url_to_image</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_caption</span><span class="p">)</span>
<span class="n">cv2_imshow</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">long_caption</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;start&gt; figure : genomic context scheme of smrc and its closest homologues in other organisms. the αr rna genes are represented by red arrows and the flanking orfs by arrows on different colors depending on their product function (legend). numbers indicate the αr rna gene's and flanking orfs coordinates in each organism genome database. the gene strand is represented with the file direction. on the left of the figure identification names are used which correspond to a certain organism: αr_smrc = sinorhizobium meliloti  (nc_), αr_smedrc = sinorhizobium medicae wsm chromosome (nc_), αr_sfrc = sinorhizobium fredii ngr chromosome (nc_), αr_atrc = agrobacterium tumefaciens str. c chromosome linear (nc_), αr_reciatrc = rhizobium etli ciat  (nc_), αr_arrc = agrobacterium radiobacter k chromosome  (nc_), αr_rltrc = rhizobium leguminosarum bv. trifolii wsm (nc_), αr_avrc = agrobacterium vitis s chromosome  (nc_), αr_rlvrc = rhizobium leguminosarum bv. viciae  (nc_), αr_rltrc = rhizobium leguminosarum bv. trifolii wsm (nc_), αr_recfnrc = rhizobium etli cfn  (nc_), αr_mlrc = mesorhizobium loti maff chromosome (nc_), αr_mcrc = mesorhizobium ciceri biovar biserrulae wsm chromosome (nc_), αr_bcrcii = brucella canis atcc  chromosome ii (nc_), αr_bsrcii = brucella suis atcc  chromosome ii (nc_), αr_bmmrcii = brucella melitensis bv.  str. m chromosome ii (nc_), αr_basrcii = brucella abortus s chromosome  (nc_), αr_bmrcii = brucella melitensis atcc  chromosome ii (nc_), αr_bsrcii = brucella suis  chromosome ii (nc_), αr_barcii = brucella abortus bv.  str. - chromosome ii (nc_), αr_bmarcii = brucella melitensis biovar abortus  chromosome ii (nc_), αr_borcii = brucella ovis atcc  chromosome ii (nc_), αr_bmircii = brucella microti ccm  chromosome  (nc_), αr_oarc = ochrobactrum anthropi atcc  chromosome  (nc_), αr_msbncrc = mesorhizobium sp. bnc (nc_), αr_bahrc = bartonella henselae str. houston- (nc_), αr_bacrc = bartonella clarridgeiae  (nc_), αr_batrc = bartonella tribocorum cip  (nc_), αr_baqrc = bartonella quintana str. toulouse (nc_), αr_babrc = bartonella bacilliformis kc (nc_), αr_bagrc = bartonella grahamii asaup (nc_), αr_acrc = azorhizobium caulinodans ors  (nc_), αr_stnrc = starkeya novella dsm  chromosome (nc_), αr_xarc = xanthobacter autotrophicus py chromosome (nc_), αr_mesrc = methylocella silvestris bl chromosome (nc_), αr_beirc = beijerinckia indica subsp. indica atcc  chromosome (nc_), αr_rhprc = rhodopseudomonas palustris bisa chromosome (nc_). &lt;end&gt;
</code></pre></div></div>

<p><img src="/assets/images/project/source_2.png" width="30%" height="30%" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(7992, 1080, 3)
2492
</code></pre></div></div>

<h1 id="전처리">전처리</h1>
<blockquote>
  <p>위에서 확인했듯, caption 이 제일 긴 행에 대해</p>
  <ol>
    <li>이미지가 너무 크다(7992,1080). &gt;  512,512 로 압축하게 되면 심각하게 찌그러 질것,</li>
    <li>caption이 너무 길다. 3011자.</li>
  </ol>
</blockquote>

<blockquote>
  <p>해결방법</p>
  <ol>
    <li>caption이 너무 긴 행(100자 이상)은 삭제.</li>
    <li>image 파일이 너무 큰(가로 세로 비율이 2:1 혹은 1:2 를 초과) 경우는 삭제</li>
  </ol>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 위 url_to_image 다시 정의
</span><span class="k">def</span> <span class="nf">url_to_image</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="s">'''
    url 에서 이미지를 추출하여, (512,512,3) 의 rgb ndarray로 리턴
    '''</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">read</span><span class="p">()),</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'uint8'</span><span class="p">)</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imdecode</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_COLOR</span><span class="p">)</span><span class="c1">#/255.0
</span>    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="o">==</span> <span class="nb">type</span><span class="p">(</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="bp">None</span><span class="p">])</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="o">/</span><span class="mf">255.0</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">)</span> <span class="ow">or</span> <span class="p">(</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="p">):</span>  <span class="c1"># 가로세로 비율이 1:2, 2:1을 벗어난다면
</span>        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="bp">None</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="p">(</span><span class="mi">299</span><span class="p">,</span><span class="mi">299</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_pre_train</span><span class="o">=</span><span class="p">[]</span>
<span class="n">y_train</span><span class="o">=</span><span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">((</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1500</span><span class="p">:</span><span class="mi">2000</span><span class="p">][</span><span class="s">'image_url'</span><span class="p">])):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">url_to_image</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">if</span> <span class="bp">None</span> <span class="ow">in</span> <span class="n">temp</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
          <span class="n">X_pre_train</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
          <span class="n">y_train</span><span class="p">.</span><span class="n">append</span><span class="p">(</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">'caption_title_and_reference_description'</span><span class="p">]</span> <span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
          <span class="k">pass</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">X_pre_train</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">X_pre_train</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">y_train</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">y_train</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>

<span class="c1"># png 파일일 경우 libpng경고가 나오는데 무시해도 좋을듯하다.
# srv 파일의 경우
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>388
(299, 299, 3)
388
&lt;start&gt;  mv agusta  raid &lt;end&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">image_model</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">applications</span><span class="p">.</span><span class="n">InceptionV3</span><span class="p">(</span><span class="n">include_top</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                                                <span class="n">weights</span><span class="o">=</span><span class="s">'imagenet'</span><span class="p">)</span>
<span class="n">new_input</span> <span class="o">=</span> <span class="n">image_model</span><span class="p">.</span><span class="nb">input</span>
<span class="n">hidden_layer</span> <span class="o">=</span> <span class="n">image_model</span><span class="p">.</span><span class="n">layers</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">output</span>

<span class="n">image_features_extract_model</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">Model</span><span class="p">(</span><span class="n">new_input</span><span class="p">,</span> <span class="n">hidden_layer</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5
87916544/87910968 [==============================] - 1s 0us/step
87924736/87910968 [==============================] - 1s 0us/step
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># imagenet 가중치를 사용하여 특성추출
</span><span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">image_dataset</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">Dataset</span><span class="p">.</span><span class="n">from_tensor_slices</span><span class="p">(</span><span class="n">X_pre_train</span><span class="p">)</span>
<span class="n">image_dataset</span> <span class="o">=</span> <span class="n">image_dataset</span><span class="p">.</span><span class="n">batch</span><span class="p">(</span><span class="n">BATCH_SIZE</span><span class="p">)</span>
<span class="n">np_batch_features</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">64</span><span class="p">,</span><span class="mi">2048</span><span class="p">))])</span>   <span class="c1"># 여기서 64는 batch_size가 아니라 InceptionV3의 마지막 레이어 아웃풋 모양
</span><span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">image_dataset</span><span class="p">:</span>
    <span class="n">batch_features</span> <span class="o">=</span> <span class="n">image_features_extract_model</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
    <span class="n">batch_features</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">batch_features</span><span class="p">,</span>
                              <span class="p">(</span><span class="n">batch_features</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">batch_features</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span>
    <span class="k">for</span> <span class="n">temp_img</span> <span class="ow">in</span> <span class="n">batch_features</span><span class="p">:</span>
      <span class="n">np_batch_features</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">np_batch_features</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">temp_img</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">2048</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="n">np_batch_features</span> <span class="o">=</span> <span class="n">np_batch_features</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np_batch_features</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(388, 64, 2048)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># y_train 은 캡션 문장인데, 토크나이저를 통해 문장들을 단어별 벡터화 해준다. (cap_vector)
</span>
<span class="n">top_k</span> <span class="o">=</span> <span class="mi">5000</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">preprocessing</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">Tokenizer</span><span class="p">(</span><span class="n">num_words</span><span class="o">=</span><span class="n">top_k</span><span class="p">,</span>
                                                  <span class="n">oov_token</span><span class="o">=</span><span class="s">"&lt;unk&gt;"</span><span class="p">,</span>
                                                  <span class="n">filters</span><span class="o">=</span><span class="s">'!"#$%&amp;*+.-;?@[]^`{}~ '</span><span class="p">)</span>
<span class="n">tokenizer</span><span class="p">.</span><span class="n">fit_on_texts</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">train_seqs</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="p">.</span><span class="n">texts_to_sequences</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">cap_vector</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">preprocessing</span><span class="p">.</span><span class="n">sequence</span><span class="p">.</span><span class="n">pad_sequences</span><span class="p">(</span><span class="n">train_seqs</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'post'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">y_train</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cap_vector</span><span class="p">))</span>
<span class="n">cap_vector</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;start&gt; erskine river at lorne &lt;end&gt;
388





array([  2, 304,  31,   9, 305,   3,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0], dtype=int32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#size_test = int( 0.01 * len(cap_vector))
</span><span class="n">size_test</span> <span class="o">=</span> <span class="mi">1</span>       <span class="c1"># test 는 딱 마지막에 확인용으로 사용하자.
</span><span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">np_batch_features</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="n">size_test</span><span class="p">]</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">np_batch_features</span><span class="p">)[</span><span class="n">size_test</span><span class="p">:]</span>
<span class="n">y_test</span> <span class="o">=</span> <span class="n">cap_vector</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">size_test</span><span class="p">]</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="n">cap_vector</span><span class="p">[</span><span class="n">size_test</span><span class="p">:]</span>
<span class="nb">len</span><span class="p">(</span><span class="n">X_test</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">y_test</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">X_train</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1, 1, 387, 387)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1, 64, 2048)
</code></pre></div></div>

<h1 id="전역변수">전역변수</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">BUFFER_SIZE</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">embedding_dim</span> <span class="o">=</span> <span class="mi">512</span>
<span class="n">units</span> <span class="o">=</span> <span class="mi">512</span>
<span class="n">vocab_size</span> <span class="o">=</span> <span class="n">top_k</span> <span class="o">+</span> <span class="mi">1</span>
<span class="n">num_steps</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span> <span class="o">//</span> <span class="n">BATCH_SIZE</span>
<span class="n">features_shape</span> <span class="o">=</span> <span class="mi">2048</span>
<span class="n">attention_features_shape</span> <span class="o">=</span> <span class="mi">64</span>
</code></pre></div></div>

<h2 id="데이터셋-지정">데이터셋 지정</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dataset</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">Dataset</span><span class="p">.</span><span class="n">from_tensor_slices</span><span class="p">((</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">))</span>
<span class="n">dataset</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">BUFFER_SIZE</span><span class="p">).</span><span class="n">batch</span><span class="p">(</span><span class="n">BATCH_SIZE</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="optimizer-loss-func">optimizer, loss func..</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optimizer</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">optimizers</span><span class="p">.</span><span class="n">Adam</span><span class="p">()</span>
<span class="n">loss_object</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">losses</span><span class="p">.</span><span class="n">SparseCategoricalCrossentropy</span><span class="p">(</span>
    <span class="n">from_logits</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">reduction</span><span class="o">=</span><span class="s">'none'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">loss_function</span><span class="p">(</span><span class="n">real</span><span class="p">,</span> <span class="n">pred</span><span class="p">):</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">math</span><span class="p">.</span><span class="n">logical_not</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">math</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="n">real</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
    <span class="n">loss_</span> <span class="o">=</span> <span class="n">loss_object</span><span class="p">(</span><span class="n">real</span><span class="p">,</span> <span class="n">pred</span><span class="p">)</span>

    <span class="n">mask</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">cast</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="n">dtype</span> <span class="o">=</span> <span class="n">loss_</span><span class="p">.</span><span class="n">dtype</span><span class="p">)</span>
    <span class="n">loss_</span> <span class="o">*=</span> <span class="n">mask</span>

    <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_mean</span><span class="p">(</span><span class="n">loss_</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="model-정의">model 정의</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BahdanauAttention</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">units</span><span class="p">):</span>
    <span class="s">'''
    W1, W2, V 는 학습가능한 가중치벡터
    '''</span>
    <span class="nb">super</span><span class="p">(</span><span class="n">BahdanauAttention</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>   <span class="c1"># 부모클래스 (tf.keras.Model.init()사용)
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">W1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="p">)</span>      <span class="c1"># units(전역) 수 의 node를 갖는 W1 가중치
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">W2</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="p">)</span>      <span class="c1"># 위와 동 w2 가중치
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">V</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>           <span class="c1"># V가중치는 하나로.
</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">features</span><span class="p">,</span> <span class="n">hidden</span><span class="p">):</span>
    <span class="s">'''
    feautures : 이미지의 피쳐맵
    hidden : hidden state
    '''</span>
    <span class="n">hidden_with_time_axis</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">hidden</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">attention_hidden_layer</span> <span class="o">=</span> <span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">tanh</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">W1</span><span class="p">(</span><span class="n">features</span><span class="p">)</span> <span class="o">+</span>
                                         <span class="bp">self</span><span class="p">.</span><span class="n">W2</span><span class="p">(</span><span class="n">hidden_with_time_axis</span><span class="p">)))</span>
    <span class="n">score</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">V</span><span class="p">(</span><span class="n">attention_hidden_layer</span><span class="p">)</span>
    <span class="n">attention_weights</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">softmax</span><span class="p">(</span><span class="n">score</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">context_vector</span> <span class="o">=</span> <span class="n">attention_weights</span> <span class="o">*</span> <span class="n">features</span>
    <span class="n">context_vector</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_sum</span><span class="p">(</span><span class="n">context_vector</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">context_vector</span><span class="p">,</span> <span class="n">attention_weights</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CNN_Encoder</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">embedding_dim</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">CNN_Encoder</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dense</span><span class="p">(</span><span class="n">embedding_dim</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fc</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RNN_Decoder</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">embedding_dim</span><span class="p">,</span> <span class="n">units</span><span class="p">,</span> <span class="n">vocab_size</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">(</span><span class="n">RNN_Decoder</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">units</span> <span class="o">=</span> <span class="n">units</span>

    <span class="bp">self</span><span class="p">.</span><span class="n">embedding</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Embedding</span><span class="p">(</span><span class="n">vocab_size</span><span class="p">,</span><span class="n">embedding_dim</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">gru</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">GRU</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">units</span><span class="p">,</span>
                                   <span class="n">return_sequences</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                   <span class="n">return_state</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                   <span class="n">recurrent_initializer</span><span class="o">=</span><span class="s">'glorot_uniform'</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">fc1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dense</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">units</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">fc2</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dense</span><span class="p">(</span><span class="n">vocab_size</span><span class="p">)</span>

    <span class="bp">self</span><span class="p">.</span><span class="n">attention</span> <span class="o">=</span> <span class="n">BahdanauAttention</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">units</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">features</span><span class="p">,</span> <span class="n">hidden</span><span class="p">):</span>
    <span class="n">context_vector</span><span class="p">,</span> <span class="n">attention_weights</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">attention</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">hidden</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">embedding</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">context_vector</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">x</span><span class="p">],</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">output</span><span class="p">,</span> <span class="n">state</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">gru</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fc1</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fc2</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">attention_weights</span>

  <span class="k">def</span> <span class="nf">reset_state</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">batch_size</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">units</span><span class="p">))</span>
</code></pre></div></div>

<h1 id="trian-step-정의">trian step 정의</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">encoder</span> <span class="o">=</span> <span class="n">CNN_Encoder</span><span class="p">(</span><span class="n">embedding_dim</span><span class="p">)</span>
<span class="n">decoder</span> <span class="o">=</span> <span class="n">RNN_Decoder</span><span class="p">(</span><span class="n">embedding_dim</span><span class="p">,</span> <span class="n">units</span><span class="p">,</span> <span class="n">vocab_size</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">checkpoint_path</span> <span class="o">=</span> <span class="s">"./drive/MyDrive/dataset/wiki/checkpoints/train"</span>
<span class="n">ckpt</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">train</span><span class="p">.</span><span class="n">Checkpoint</span><span class="p">(</span><span class="n">encoder</span><span class="o">=</span><span class="n">encoder</span><span class="p">,</span>
                           <span class="n">decoder</span><span class="o">=</span><span class="n">decoder</span><span class="p">,</span>
                           <span class="n">optimizer</span><span class="o">=</span><span class="n">optimizer</span><span class="p">)</span>
<span class="n">ckpt_manager</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">train</span><span class="p">.</span><span class="n">CheckpointManager</span><span class="p">(</span><span class="n">ckpt</span><span class="p">,</span> <span class="n">checkpoint_path</span><span class="p">,</span> <span class="n">max_to_keep</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">start_epoch</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">if</span> <span class="n">ckpt_manager</span><span class="p">.</span><span class="n">latest_checkpoint</span><span class="p">:</span>
  <span class="n">start_epoch</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ckpt_manager</span><span class="p">.</span><span class="n">latest_checkpoint</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'-'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
  <span class="c1"># restoring the latest checkpoint in checkpoint_path
</span>  <span class="n">ckpt</span><span class="p">.</span><span class="n">restore</span><span class="p">(</span><span class="n">ckpt_manager</span><span class="p">.</span><span class="n">latest_checkpoint</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># adding this in a separate cell because if you run the training cell
# many times, the loss_plot array will be reset
</span><span class="n">loss_plot</span> <span class="o">=</span> <span class="p">[]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">tf</span><span class="p">.</span><span class="n">function</span>
<span class="k">def</span> <span class="nf">train_step</span><span class="p">(</span><span class="n">img_tensor</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
  <span class="n">loss</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="c1"># initializing the hidden state for each batch
</span>  <span class="c1"># because the captions are not related from image to image
</span>  <span class="n">hidden</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="n">reset_state</span><span class="p">(</span><span class="n">batch_size</span><span class="o">=</span><span class="n">target</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

  <span class="n">dec_input</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">([</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">word_index</span><span class="p">[</span><span class="s">'&lt;start&gt;'</span><span class="p">]]</span> <span class="o">*</span> <span class="n">target</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span>

  <span class="k">with</span> <span class="n">tf</span><span class="p">.</span><span class="n">GradientTape</span><span class="p">()</span> <span class="k">as</span> <span class="n">tape</span><span class="p">:</span>
      <span class="n">features</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">(</span><span class="n">img_tensor</span><span class="p">)</span>

      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">target</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
          <span class="c1"># passing the features through the decoder
</span>          <span class="n">predictions</span><span class="p">,</span> <span class="n">hidden</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">(</span><span class="n">dec_input</span><span class="p">,</span> <span class="n">features</span><span class="p">,</span> <span class="n">hidden</span><span class="p">)</span>

          <span class="n">loss</span> <span class="o">+=</span> <span class="n">loss_function</span><span class="p">(</span><span class="n">target</span><span class="p">[:,</span> <span class="n">i</span><span class="p">],</span> <span class="n">predictions</span><span class="p">)</span>

          <span class="c1"># using teacher forcing
</span>          <span class="n">dec_input</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">target</span><span class="p">[:,</span> <span class="n">i</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span>

  <span class="n">total_loss</span> <span class="o">=</span> <span class="p">(</span><span class="n">loss</span> <span class="o">/</span> <span class="nb">int</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>

  <span class="n">trainable_variables</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="n">trainable_variables</span> <span class="o">+</span> <span class="n">decoder</span><span class="p">.</span><span class="n">trainable_variables</span>

  <span class="n">gradients</span> <span class="o">=</span> <span class="n">tape</span><span class="p">.</span><span class="n">gradient</span><span class="p">(</span><span class="n">loss</span><span class="p">,</span> <span class="n">trainable_variables</span><span class="p">)</span>

  <span class="n">optimizer</span><span class="p">.</span><span class="n">apply_gradients</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">gradients</span><span class="p">,</span> <span class="n">trainable_variables</span><span class="p">))</span>

  <span class="k">return</span> <span class="n">loss</span><span class="p">,</span> <span class="n">total_loss</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">EPOCHS</span> <span class="o">=</span> <span class="mi">20</span>

<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">start_epoch</span><span class="p">,</span> <span class="n">EPOCHS</span><span class="p">):</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
    <span class="n">total_loss</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">batch</span><span class="p">,</span> <span class="p">(</span><span class="n">img_tensor</span><span class="p">,</span> <span class="n">target</span><span class="p">))</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dataset</span><span class="p">):</span>
        <span class="n">batch_loss</span><span class="p">,</span> <span class="n">t_loss</span> <span class="o">=</span> <span class="n">train_step</span><span class="p">(</span><span class="n">img_tensor</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="n">total_loss</span> <span class="o">+=</span> <span class="n">t_loss</span>

        <span class="k">if</span> <span class="n">batch</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">average_batch_loss</span> <span class="o">=</span> <span class="n">batch_loss</span><span class="p">.</span><span class="n">numpy</span><span class="p">()</span><span class="o">/</span><span class="nb">int</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> Batch </span><span class="si">{</span><span class="n">batch</span><span class="si">}</span><span class="s"> Loss </span><span class="si">{</span><span class="n">average_batch_loss</span><span class="p">:.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
    <span class="c1"># storing the epoch end loss value to plot later
</span>    <span class="n">loss_plot</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">total_loss</span> <span class="o">/</span> <span class="n">num_steps</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">epoch</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
      <span class="n">ckpt_manager</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>

    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> Loss </span><span class="si">{</span><span class="n">total_loss</span><span class="o">/</span><span class="n">num_steps</span><span class="p">:.</span><span class="mi">6</span><span class="n">f</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Time taken for 1 epoch </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="n">start</span><span class="p">:.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> sec</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Epoch 5 Batch 0 Loss 1.7554
Epoch 5 Loss 1.809353
Time taken for 1 epoch 157.57 sec

Epoch 6 Batch 0 Loss 1.1847
Epoch 6 Loss 1.441257
Time taken for 1 epoch 46.38 sec

Epoch 7 Batch 0 Loss 1.0604
Epoch 7 Loss 1.354600
Time taken for 1 epoch 45.60 sec

Epoch 8 Batch 0 Loss 1.2198
Epoch 8 Loss 1.334983
Time taken for 1 epoch 45.94 sec

Epoch 9 Batch 0 Loss 1.0771
Epoch 9 Loss 1.477467
Time taken for 1 epoch 46.14 sec

Epoch 10 Batch 0 Loss 1.2247
Epoch 10 Loss 1.347626
Time taken for 1 epoch 45.70 sec

Epoch 11 Batch 0 Loss 1.0726
Epoch 11 Loss 1.260275
Time taken for 1 epoch 46.71 sec

Epoch 12 Batch 0 Loss 1.2278
Epoch 12 Loss 1.200646
Time taken for 1 epoch 46.94 sec

Epoch 13 Batch 0 Loss 1.2482
Epoch 13 Loss 1.216185
Time taken for 1 epoch 46.13 sec

Epoch 14 Batch 0 Loss 1.0949
Epoch 14 Loss 1.133379
Time taken for 1 epoch 45.98 sec

Epoch 15 Batch 0 Loss 1.1599
Epoch 15 Loss 1.292254
Time taken for 1 epoch 46.25 sec

Epoch 16 Batch 0 Loss 0.9927
Epoch 16 Loss 1.213316
Time taken for 1 epoch 46.76 sec

Epoch 17 Batch 0 Loss 1.0226
Epoch 17 Loss 1.102528
Time taken for 1 epoch 46.03 sec

Epoch 18 Batch 0 Loss 0.8826
Epoch 18 Loss 1.238099
Time taken for 1 epoch 46.58 sec

Epoch 19 Batch 0 Loss 0.8167
Epoch 19 Loss 1.090817
Time taken for 1 epoch 47.73 sec

Epoch 20 Batch 0 Loss 0.8715
Epoch 20 Loss 1.050230
Time taken for 1 epoch 48.49 sec
</code></pre></div></div>

<h1 id="예측-모델">예측 모델</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calc_max_length</span><span class="p">(</span><span class="n">tensor</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tensor</span><span class="p">)</span>

<span class="n">max_length</span> <span class="o">=</span> <span class="n">max_length</span> <span class="o">=</span> <span class="n">calc_max_length</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
    <span class="n">attention_plot</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">max_length</span><span class="p">,</span> <span class="n">attention_features_shape</span><span class="p">))</span>

    <span class="n">hidden</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="n">reset_state</span><span class="p">(</span><span class="n">batch_size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">temp_input</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">url_to_image</span><span class="p">(</span><span class="n">image</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">img_tensor_val</span> <span class="o">=</span> <span class="n">image_features_extract_model</span><span class="p">(</span><span class="n">temp_input</span><span class="p">)</span>
    <span class="n">img_tensor_val</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">img_tensor_val</span><span class="p">,</span> <span class="p">(</span><span class="n">img_tensor_val</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                                                 <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
                                                 <span class="n">img_tensor_val</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span>

    <span class="n">features</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">(</span><span class="n">img_tensor_val</span><span class="p">)</span>

    <span class="n">dec_input</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">([</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">word_index</span><span class="p">[</span><span class="s">'&lt;start&gt;'</span><span class="p">]],</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_length</span><span class="p">):</span>
        <span class="n">predictions</span><span class="p">,</span> <span class="n">hidden</span><span class="p">,</span> <span class="n">attention_weights</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">(</span><span class="n">dec_input</span><span class="p">,</span>
                                                         <span class="n">features</span><span class="p">,</span>
                                                         <span class="n">hidden</span><span class="p">)</span>

        <span class="n">attention_plot</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">attention_weights</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">)).</span><span class="n">numpy</span><span class="p">()</span>

        <span class="n">predicted_id</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">categorical</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">numpy</span><span class="p">()</span>
        <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">index_word</span><span class="p">[</span><span class="n">predicted_id</span><span class="p">])</span>

        <span class="k">if</span> <span class="n">tokenizer</span><span class="p">.</span><span class="n">index_word</span><span class="p">[</span><span class="n">predicted_id</span><span class="p">]</span> <span class="o">==</span> <span class="s">'&lt;end&gt;'</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">,</span> <span class="n">attention_plot</span>

        <span class="n">dec_input</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">expand_dims</span><span class="p">([</span><span class="n">predicted_id</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>

    <span class="n">attention_plot</span> <span class="o">=</span> <span class="n">attention_plot</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="p">:]</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">,</span> <span class="n">attention_plot</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># captions on the validation set
</span><span class="n">image_url</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">'image_url'</span><span class="p">][</span><span class="mi">20</span><span class="p">]</span>
<span class="n">real_caption</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">'caption_title_and_reference_description'</span><span class="p">][</span><span class="mi">20</span><span class="p">]</span>
<span class="n">result</span><span class="p">,</span> <span class="n">attention_plot</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">image_url</span><span class="p">)</span>

<span class="n">cv2_imshow</span><span class="p">(</span><span class="n">url_to_image</span><span class="p">(</span><span class="n">image_url</span><span class="p">)</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Real Caption:'</span><span class="p">,</span> <span class="n">real_caption</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Prediction Caption:'</span><span class="p">,</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</code></pre></div></div>

<p><img src="/assets/images/project/source_3.png" width="50%" height="50%" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Real Caption: &lt;start&gt; entering a mining settlement from jamieson &lt;end&gt;
Prediction Caption: a np on either may river the wyndham's &lt;end&gt;
</code></pre></div></div>

<h1 id="결과-해석">결과 해석</h1>
<ol>
  <li>광산 입구 길에 대한 이미지를 ‘wyndham의 river’ 정도의 캡션을 생성했다.</li>
  <li>길의 색깔만 다르다면 충분히 강으로 인식할 수 있는 수준일 것. 물론 성공적인 결과라고 보긴 힘들다.</li>
</ol>

<h1 id="개선할-점">개선할 점</h1>
<ol>
  <li>kaggle의 wiki학습데이터가 너무 방대하다 보니, 일부를 쪼개어 사용하기도 했고, 캡션의 경우 너무 디테일(지명이 들어간다던가 등)한 부분을 없애는 과정이 필요했다고 생각한다. (통계적 언어모델)</li>
  <li>학습데이터의 증강이 더 필요했다고 생각한다. (색채 변경, 회전 등)</li>
  <li>전체 구조를 좀 더 쪼개서 사용할 걸 싶다. 예를 들면 training.py 으로 가중치파일을 생성한다거나, main.py result.py 등 으로 하여 가시성, 접근성을 높이는 게 필요해보인다. (이 프로젝트는 몇달 전에 시도했던 것이기 떄문에 부족한점이 많이 보이는 듯 하다.)</li>
</ol>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="pj" /><category term="attention" /><category term="RNN" /><summary type="html"><![CDATA[mac gpu 사용가능확인 (1이면 사용가능)]]></summary></entry><entry><title type="html">비행기 푯값 예측 MLP(Multi Layer Perceptron)</title><link href="http://localhost:4000/pj/airplane_price/" rel="alternate" type="text/html" title="비행기 푯값 예측 MLP(Multi Layer Perceptron)" /><published>2022-03-26T00:00:00+09:00</published><updated>2022-03-26T00:00:00+09:00</updated><id>http://localhost:4000/pj/airplane_price</id><content type="html" xml:base="http://localhost:4000/pj/airplane_price/"><![CDATA[<h1 id="판다스-프로파일링-코랩에서-작동하도록-버전지정-설치">판다스 프로파일링 코랩에서 작동하도록 버전지정 설치</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">pandas</span><span class="o">==</span><span class="mf">1.2</span><span class="p">.</span><span class="mi">1</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">pandas_profiling</span><span class="o">==</span><span class="mf">2.8</span><span class="p">.</span><span class="mi">0</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Collecting pandas==1.2.1
  Downloading pandas-1.2.1-cp37-cp37m-manylinux1_x86_64.whl (9.9 MB)
[K     |████████████████████████████████| 9.9 MB 9.8 MB/s
[?25hRequirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas==1.2.1) (2018.9)
Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas==1.2.1) (2.8.2)
Requirement already satisfied: numpy&gt;=1.16.5 in /usr/local/lib/python3.7/dist-packages (from pandas==1.2.1) (1.21.5)
Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas==1.2.1) (1.15.0)
Installing collected packages: pandas
  Attempting uninstall: pandas
    Found existing installation: pandas 1.3.5
    Uninstalling pandas-1.3.5:
      Successfully uninstalled pandas-1.3.5
[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
google-colab 1.0.0 requires requests~=2.23.0, but you have requests 2.27.1 which is incompatible.[0m
Successfully installed pandas-1.2.1




Requirement already satisfied: pandas_profiling==2.8.0 in /usr/local/lib/python3.7/dist-packages (2.8.0)
Requirement already satisfied: jinja2&gt;=2.11.1 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (2.11.3)
Requirement already satisfied: missingno&gt;=0.4.2 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (0.5.1)
Requirement already satisfied: numpy&gt;=1.16.0 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (1.21.5)
Requirement already satisfied: htmlmin&gt;=0.1.12 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (0.1.12)
Requirement already satisfied: visions[type_image_path]==0.4.4 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (0.4.4)
Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (1.0.1)
Requirement already satisfied: pandas!=1.0.0,!=1.0.1,!=1.0.2,&gt;=0.25.3 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (1.2.1)
Requirement already satisfied: scipy&gt;=1.4.1 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (1.7.3)
Requirement already satisfied: phik&gt;=0.9.10 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (0.12.2)
Requirement already satisfied: tangled-up-in-unicode&gt;=0.0.6 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (0.1.0)
Requirement already satisfied: matplotlib&gt;=3.2.0 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (3.2.2)
Requirement already satisfied: requests&gt;=2.23.0 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (2.27.1)
Requirement already satisfied: tqdm&gt;=4.43.0 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (4.63.0)
Requirement already satisfied: confuse&gt;=1.0.0 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (1.7.0)
Requirement already satisfied: astropy&gt;=4.0 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (4.3.1)
Requirement already satisfied: ipywidgets&gt;=7.5.1 in /usr/local/lib/python3.7/dist-packages (from pandas_profiling==2.8.0) (7.7.0)
Requirement already satisfied: attrs&gt;=19.3.0 in /usr/local/lib/python3.7/dist-packages (from visions[type_image_path]==0.4.4-&gt;pandas_profiling==2.8.0) (21.4.0)
Requirement already satisfied: networkx&gt;=2.4 in /usr/local/lib/python3.7/dist-packages (from visions[type_image_path]==0.4.4-&gt;pandas_profiling==2.8.0) (2.6.3)
Requirement already satisfied: imagehash in /usr/local/lib/python3.7/dist-packages (from visions[type_image_path]==0.4.4-&gt;pandas_profiling==2.8.0) (4.2.1)
Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from visions[type_image_path]==0.4.4-&gt;pandas_profiling==2.8.0) (7.1.2)
Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from astropy&gt;=4.0-&gt;pandas_profiling==2.8.0) (4.11.3)
Requirement already satisfied: pyerfa&gt;=1.7.3 in /usr/local/lib/python3.7/dist-packages (from astropy&gt;=4.0-&gt;pandas_profiling==2.8.0) (2.0.0.1)
Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from confuse&gt;=1.0.0-&gt;pandas_profiling==2.8.0) (6.0)
Requirement already satisfied: ipython&gt;=4.0.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (5.5.0)
Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (3.6.0)
Requirement already satisfied: nbformat&gt;=4.2.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (5.2.0)
Requirement already satisfied: ipykernel&gt;=4.5.1 in /usr/local/lib/python3.7/dist-packages (from ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (4.10.1)
Requirement already satisfied: traitlets&gt;=4.3.1 in /usr/local/lib/python3.7/dist-packages (from ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (5.1.1)
Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.2.0)
Requirement already satisfied: jupyterlab-widgets&gt;=1.0.0 in /usr/local/lib/python3.7/dist-packages (from ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (1.1.0)
Requirement already satisfied: tornado&gt;=4.0 in /usr/local/lib/python3.7/dist-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (5.1.1)
Requirement already satisfied: jupyter-client in /usr/local/lib/python3.7/dist-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (5.3.5)
Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (4.4.2)
Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (2.6.1)
Requirement already satisfied: prompt-toolkit&lt;2.0.0,&gt;=1.0.4 in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (1.0.18)
Requirement already satisfied: simplegeneric&gt;0.8 in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.8.1)
Requirement already satisfied: setuptools&gt;=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (57.4.0)
Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.7.5)
Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (4.8.0)
Requirement already satisfied: MarkupSafe&gt;=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2&gt;=2.11.1-&gt;pandas_profiling==2.8.0) (2.0.1)
Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib&gt;=3.2.0-&gt;pandas_profiling==2.8.0) (1.4.0)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib&gt;=3.2.0-&gt;pandas_profiling==2.8.0) (3.0.7)
Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib&gt;=3.2.0-&gt;pandas_profiling==2.8.0) (0.11.0)
Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib&gt;=3.2.0-&gt;pandas_profiling==2.8.0) (2.8.2)
Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver&gt;=1.0.1-&gt;matplotlib&gt;=3.2.0-&gt;pandas_profiling==2.8.0) (3.10.0.2)
Requirement already satisfied: seaborn in /usr/local/lib/python3.7/dist-packages (from missingno&gt;=0.4.2-&gt;pandas_profiling==2.8.0) (0.11.2)
Requirement already satisfied: jsonschema!=2.5.0,&gt;=2.4 in /usr/local/lib/python3.7/dist-packages (from nbformat&gt;=4.2.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (4.3.3)
Requirement already satisfied: jupyter-core in /usr/local/lib/python3.7/dist-packages (from nbformat&gt;=4.2.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (4.9.2)
Requirement already satisfied: importlib-resources&gt;=1.4.0 in /usr/local/lib/python3.7/dist-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (5.4.0)
Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,&gt;=0.14.0 in /usr/local/lib/python3.7/dist-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.18.1)
Requirement already satisfied: zipp&gt;=3.1.0 in /usr/local/lib/python3.7/dist-packages (from importlib-resources&gt;=1.4.0-&gt;jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (3.7.0)
Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas!=1.0.0,!=1.0.1,!=1.0.2,&gt;=0.25.3-&gt;pandas_profiling==2.8.0) (2018.9)
Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit&lt;2.0.0,&gt;=1.0.4-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.2.5)
Requirement already satisfied: six&gt;=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit&lt;2.0.0,&gt;=1.0.4-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (1.15.0)
Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.23.0-&gt;pandas_profiling==2.8.0) (2021.10.8)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.23.0-&gt;pandas_profiling==2.8.0) (2.10)
Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.23.0-&gt;pandas_profiling==2.8.0) (1.24.3)
Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.23.0-&gt;pandas_profiling==2.8.0) (2.0.12)
Requirement already satisfied: notebook&gt;=4.4.1 in /usr/local/lib/python3.7/dist-packages (from widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (5.3.1)
Requirement already satisfied: terminado&gt;=0.8.1 in /usr/local/lib/python3.7/dist-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.13.3)
Requirement already satisfied: nbconvert in /usr/local/lib/python3.7/dist-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (5.6.1)
Requirement already satisfied: Send2Trash in /usr/local/lib/python3.7/dist-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (1.8.0)
Requirement already satisfied: pyzmq&gt;=13 in /usr/local/lib/python3.7/dist-packages (from jupyter-client-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (22.3.0)
Requirement already satisfied: ptyprocess in /usr/local/lib/python3.7/dist-packages (from terminado&gt;=0.8.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.7.0)
Requirement already satisfied: PyWavelets in /usr/local/lib/python3.7/dist-packages (from imagehash-&gt;visions[type_image_path]==0.4.4-&gt;pandas_profiling==2.8.0) (1.3.0)
Requirement already satisfied: pandocfilters&gt;=1.4.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (1.5.0)
Requirement already satisfied: defusedxml in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.7.1)
Requirement already satisfied: entrypoints&gt;=0.2.2 in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.4)
Requirement already satisfied: bleach in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (4.1.0)
Requirement already satisfied: testpath in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.6.0)
Requirement already satisfied: mistune&lt;2,&gt;=0.8.1 in /usr/local/lib/python3.7/dist-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.8.4)
Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from bleach-&gt;nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (21.3)
Requirement already satisfied: webencodings in /usr/local/lib/python3.7/dist-packages (from bleach-&gt;nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&gt;=7.5.1-&gt;pandas_profiling==2.8.0) (0.5.1)
</code></pre></div></div>

<h1 id="데이터-불러오기">데이터 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 데이터 불러오기
</span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">pandas_profiling</span> <span class="kn">import</span> <span class="n">ProfileReport</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="n">CSV_PATH_1</span> <span class="o">=</span> <span class="s">'/content/drive/MyDrive/dataset/airplane/Data_Train.csv'</span>
<span class="n">CSV_PATH_2</span> <span class="o">=</span> <span class="s">'/content/drive/MyDrive/dataset/airplane/Test_set.csv'</span>
<span class="n">CSV_PATH_3</span> <span class="o">=</span> <span class="s">'/content/drive/MyDrive/dataset/airplane/Sample_submission.csv'</span>
<span class="n">target</span> <span class="o">=</span> <span class="s">'Price'</span>
</code></pre></div></div>

<h1 id="데이터-엔지니어">데이터 엔지니어</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">re</span>

<span class="c1"># feature 수 10개.
</span><span class="n">df_train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">CSV_PATH_1</span><span class="p">)</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">CSV_PATH_2</span><span class="p">)</span>
<span class="n">y_test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">CSV_PATH_3</span><span class="p">)</span>
<span class="s">"""
전처리
1. Airline : one-hot encoding
2. Date_of_Journey : 삭제
3. Source : one-hot encoding
4. Destination : one-hot encoding
5. Route : 삭제하자
6. Dep_Time : h*60 + min 으로 치환
7. Arrival_Time : 위와 동
8. Duration : 위와동
9. Total_Stops : 숫자만 남기자 non-stop은 0
10. Additional_Info : one-hot encoding
"""</span>

<span class="c1"># Route  Date_of_journey 삭제
</span><span class="n">X_train</span><span class="o">=</span><span class="n">X_train</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'Date_of_Journey'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X_test</span><span class="o">=</span><span class="n">X_test</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'Date_of_Journey'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X_train</span><span class="o">=</span><span class="n">X_train</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'Route'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X_test</span><span class="o">=</span><span class="n">X_test</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'Route'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># 탑승, 도착 시간계산
</span><span class="k">def</span> <span class="nf">hour_cal</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="n">hour</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">'(\d+):'</span><span class="p">,</span> <span class="n">a</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
    <span class="n">minute</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">':(\d+)'</span><span class="p">,</span> <span class="n">a</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">hour</span><span class="o">*</span><span class="mi">60</span><span class="o">+</span><span class="n">minute</span>
<span class="n">X_train</span><span class="p">[</span><span class="s">'Dep_Time'</span><span class="p">]</span><span class="o">=</span><span class="n">X_train</span><span class="p">[</span><span class="s">'Dep_Time'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">hour_cal</span><span class="p">)</span>
<span class="n">X_test</span><span class="p">[</span><span class="s">'Dep_Time'</span><span class="p">]</span><span class="o">=</span><span class="n">X_test</span><span class="p">[</span><span class="s">'Dep_Time'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">hour_cal</span><span class="p">)</span>
<span class="n">X_train</span><span class="p">[</span><span class="s">'Arrival_Time'</span><span class="p">]</span><span class="o">=</span><span class="n">X_train</span><span class="p">[</span><span class="s">'Arrival_Time'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">hour_cal</span><span class="p">)</span>
<span class="n">X_test</span><span class="p">[</span><span class="s">'Arrival_Time'</span><span class="p">]</span><span class="o">=</span><span class="n">X_test</span><span class="p">[</span><span class="s">'Arrival_Time'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">hour_cal</span><span class="p">)</span>

<span class="c1"># 소요시간 계산
</span><span class="k">def</span> <span class="nf">hour_cal2</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">hour</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">'(\d+)h'</span><span class="p">,</span> <span class="n">a</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">hour</span><span class="o">=</span><span class="mi">0</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">minute</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">'(\d+)m'</span><span class="p">,</span> <span class="n">a</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">minute</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">hour</span><span class="o">*</span><span class="mi">60</span><span class="o">+</span><span class="n">minute</span>
<span class="n">X_train</span><span class="p">[</span><span class="s">'Duration'</span><span class="p">]</span><span class="o">=</span><span class="n">X_train</span><span class="p">[</span><span class="s">'Duration'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">hour_cal2</span><span class="p">)</span>
<span class="n">X_test</span><span class="p">[</span><span class="s">'Duration'</span><span class="p">]</span><span class="o">=</span><span class="n">X_test</span><span class="p">[</span><span class="s">'Duration'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">hour_cal2</span><span class="p">)</span>

<span class="c1"># stop에서 숫자만 남기자
</span><span class="n">X_train</span><span class="p">[</span><span class="s">'Total_Stops'</span><span class="p">]</span><span class="o">=</span><span class="n">X_train</span><span class="p">[</span><span class="s">'Total_Stops'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">0</span> <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="s">'n'</span> <span class="k">else</span> <span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
<span class="n">X_test</span><span class="p">[</span><span class="s">'Total_Stops'</span><span class="p">]</span><span class="o">=</span><span class="n">X_train</span><span class="p">[</span><span class="s">'Total_Stops'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">0</span> <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="s">'n'</span> <span class="k">else</span> <span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">info</span><span class="p">())</span>

<span class="n">X_train</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 10683 entries, 0 to 10682
Data columns (total 8 columns):
 #   Column           Non-Null Count  Dtype
---  ------           --------------  -----
 0   Airline          10683 non-null  object
 1   Source           10683 non-null  object
 2   Destination      10683 non-null  object
 3   Dep_Time         10683 non-null  int64
 4   Arrival_Time     10683 non-null  int64
 5   Duration         10683 non-null  int64
 6   Total_Stops      10683 non-null  int64
 7   Additional_Info  10683 non-null  object
dtypes: int64(4), object(4)
memory usage: 667.8+ KB
None
</code></pre></div></div>

<div id="df-5e346ee7-84fc-40d0-874c-f1a960b92b39">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Airline</th>
      <th>Source</th>
      <th>Destination</th>
      <th>Dep_Time</th>
      <th>Arrival_Time</th>
      <th>Duration</th>
      <th>Total_Stops</th>
      <th>Additional_Info</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>IndiGo</td>
      <td>Banglore</td>
      <td>New Delhi</td>
      <td>1340</td>
      <td>70</td>
      <td>170</td>
      <td>0</td>
      <td>No info</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Air India</td>
      <td>Kolkata</td>
      <td>Banglore</td>
      <td>350</td>
      <td>795</td>
      <td>445</td>
      <td>2</td>
      <td>No info</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Jet Airways</td>
      <td>Delhi</td>
      <td>Cochin</td>
      <td>565</td>
      <td>265</td>
      <td>1140</td>
      <td>2</td>
      <td>No info</td>
    </tr>
    <tr>
      <th>3</th>
      <td>IndiGo</td>
      <td>Kolkata</td>
      <td>Banglore</td>
      <td>1085</td>
      <td>1410</td>
      <td>325</td>
      <td>1</td>
      <td>No info</td>
    </tr>
    <tr>
      <th>4</th>
      <td>IndiGo</td>
      <td>Banglore</td>
      <td>New Delhi</td>
      <td>1010</td>
      <td>1295</td>
      <td>285</td>
      <td>1</td>
      <td>No info</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-5e346ee7-84fc-40d0-874c-f1a960b92b39')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-5e346ee7-84fc-40d0-874c-f1a960b92b39 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-5e346ee7-84fc-40d0-874c-f1a960b92b39');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span> <span class="o">=</span> <span class="n">X_train</span>
<span class="n">df_train</span><span class="p">[</span><span class="s">'price'</span><span class="p">]</span> <span class="o">=</span> <span class="n">y_train</span>
<span class="n">df_train</span><span class="p">.</span><span class="n">profile_report</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Output hidden; open in https://colab.research.google.com to view.
</code></pre></div></div>

<h1 id="인코딩-one-hot-encoding-사용">인코딩 (one hot encoding 사용)</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 원핫 인코딩
</span>
<span class="c1">#X_train=pd.get_dummies(data = X_train, columns = ['Airline', 'Source', 'Destination', 'Total_Stops',  'Additional_Info'])
#X_test=pd.get_dummies(data = X_test, columns = ['Airline', 'Source', 'Destination', 'Total_Stops',  'Additional_Info'])
</span>

<span class="n">temp</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">])</span>
<span class="n">temp</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="n">temp</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Airline'</span><span class="p">,</span> <span class="s">'Source'</span><span class="p">,</span> <span class="s">'Destination'</span><span class="p">,</span> <span class="s">'Total_Stops'</span><span class="p">,</span>  <span class="s">'Additional_Info'</span><span class="p">])</span>
<span class="n">X_train_encoded</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">X_train</span><span class="p">)]</span>
<span class="n">X_test_encoded</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">X_train</span><span class="p">):]</span>

<span class="k">print</span><span class="p">(</span><span class="n">X_train_encoded</span><span class="p">.</span><span class="n">info</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">X_test_encoded</span><span class="p">.</span><span class="n">info</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 10683 entries, 0 to 10682
Data columns (total 42 columns):
 #   Column                                        Non-Null Count  Dtype  
---  ------                                        --------------  -----  
 0   Dep_Time                                      10683 non-null  int64  
 1   Arrival_Time                                  10683 non-null  int64  
 2   Duration                                      10683 non-null  int64  
 3   price                                         10683 non-null  float64
 4   Airline_Air Asia                              10683 non-null  uint8  
 5   Airline_Air India                             10683 non-null  uint8  
 6   Airline_GoAir                                 10683 non-null  uint8  
 7   Airline_IndiGo                                10683 non-null  uint8  
 8   Airline_Jet Airways                           10683 non-null  uint8  
 9   Airline_Jet Airways Business                  10683 non-null  uint8  
 10  Airline_Multiple carriers                     10683 non-null  uint8  
 11  Airline_Multiple carriers Premium economy     10683 non-null  uint8  
 12  Airline_SpiceJet                              10683 non-null  uint8  
 13  Airline_Trujet                                10683 non-null  uint8  
 14  Airline_Vistara                               10683 non-null  uint8  
 15  Airline_Vistara Premium economy               10683 non-null  uint8  
 16  Source_Banglore                               10683 non-null  uint8  
 17  Source_Chennai                                10683 non-null  uint8  
 18  Source_Delhi                                  10683 non-null  uint8  
 19  Source_Kolkata                                10683 non-null  uint8  
 20  Source_Mumbai                                 10683 non-null  uint8  
 21  Destination_Banglore                          10683 non-null  uint8  
 22  Destination_Cochin                            10683 non-null  uint8  
 23  Destination_Delhi                             10683 non-null  uint8  
 24  Destination_Hyderabad                         10683 non-null  uint8  
 25  Destination_Kolkata                           10683 non-null  uint8  
 26  Destination_New Delhi                         10683 non-null  uint8  
 27  Total_Stops_0                                 10683 non-null  uint8  
 28  Total_Stops_1                                 10683 non-null  uint8  
 29  Total_Stops_2                                 10683 non-null  uint8  
 30  Total_Stops_3                                 10683 non-null  uint8  
 31  Total_Stops_4                                 10683 non-null  uint8  
 32  Additional_Info_1 Long layover                10683 non-null  uint8  
 33  Additional_Info_1 Short layover               10683 non-null  uint8  
 34  Additional_Info_2 Long layover                10683 non-null  uint8  
 35  Additional_Info_Business class                10683 non-null  uint8  
 36  Additional_Info_Change airports               10683 non-null  uint8  
 37  Additional_Info_In-flight meal not included   10683 non-null  uint8  
 38  Additional_Info_No Info                       10683 non-null  uint8  
 39  Additional_Info_No check-in baggage included  10683 non-null  uint8  
 40  Additional_Info_No info                       10683 non-null  uint8  
 41  Additional_Info_Red-eye flight                10683 non-null  uint8  
dtypes: float64(1), int64(3), uint8(38)
memory usage: 813.7 KB
None
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 2671 entries, 0 to 2670
Data columns (total 42 columns):
 #   Column                                        Non-Null Count  Dtype  
---  ------                                        --------------  -----  
 0   Dep_Time                                      2671 non-null   int64  
 1   Arrival_Time                                  2671 non-null   int64  
 2   Duration                                      2671 non-null   int64  
 3   price                                         0 non-null      float64
 4   Airline_Air Asia                              2671 non-null   uint8  
 5   Airline_Air India                             2671 non-null   uint8  
 6   Airline_GoAir                                 2671 non-null   uint8  
 7   Airline_IndiGo                                2671 non-null   uint8  
 8   Airline_Jet Airways                           2671 non-null   uint8  
 9   Airline_Jet Airways Business                  2671 non-null   uint8  
 10  Airline_Multiple carriers                     2671 non-null   uint8  
 11  Airline_Multiple carriers Premium economy     2671 non-null   uint8  
 12  Airline_SpiceJet                              2671 non-null   uint8  
 13  Airline_Trujet                                2671 non-null   uint8  
 14  Airline_Vistara                               2671 non-null   uint8  
 15  Airline_Vistara Premium economy               2671 non-null   uint8  
 16  Source_Banglore                               2671 non-null   uint8  
 17  Source_Chennai                                2671 non-null   uint8  
 18  Source_Delhi                                  2671 non-null   uint8  
 19  Source_Kolkata                                2671 non-null   uint8  
 20  Source_Mumbai                                 2671 non-null   uint8  
 21  Destination_Banglore                          2671 non-null   uint8  
 22  Destination_Cochin                            2671 non-null   uint8  
 23  Destination_Delhi                             2671 non-null   uint8  
 24  Destination_Hyderabad                         2671 non-null   uint8  
 25  Destination_Kolkata                           2671 non-null   uint8  
 26  Destination_New Delhi                         2671 non-null   uint8  
 27  Total_Stops_0                                 2671 non-null   uint8  
 28  Total_Stops_1                                 2671 non-null   uint8  
 29  Total_Stops_2                                 2671 non-null   uint8  
 30  Total_Stops_3                                 2671 non-null   uint8  
 31  Total_Stops_4                                 2671 non-null   uint8  
 32  Additional_Info_1 Long layover                2671 non-null   uint8  
 33  Additional_Info_1 Short layover               2671 non-null   uint8  
 34  Additional_Info_2 Long layover                2671 non-null   uint8  
 35  Additional_Info_Business class                2671 non-null   uint8  
 36  Additional_Info_Change airports               2671 non-null   uint8  
 37  Additional_Info_In-flight meal not included   2671 non-null   uint8  
 38  Additional_Info_No Info                       2671 non-null   uint8  
 39  Additional_Info_No check-in baggage included  2671 non-null   uint8  
 40  Additional_Info_No info                       2671 non-null   uint8  
 41  Additional_Info_Red-eye flight                2671 non-null   uint8  
dtypes: float64(1), int64(3), uint8(38)
memory usage: 203.5 KB
None
</code></pre></div></div>

<h1 id="특성-선택-selectkbest사용">특성 선택 (SelectKBest사용)</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.feature_selection</span> <span class="kn">import</span> <span class="n">chi2</span><span class="p">,</span> <span class="n">SelectKBest</span>
<span class="n">selector1</span> <span class="o">=</span> <span class="n">SelectKBest</span><span class="p">(</span><span class="n">chi2</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">X_train1</span> <span class="o">=</span> <span class="n">selector1</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train_encoded</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">columns</span> <span class="o">=</span> <span class="n">X_train_encoded</span><span class="p">.</span><span class="n">columns</span>
<span class="n">X_train_encoded</span> <span class="o">=</span> <span class="n">X_train_encoded</span><span class="p">[</span><span class="n">columns</span><span class="p">[</span><span class="n">selector1</span><span class="p">.</span><span class="n">get_support</span><span class="p">()]]</span>
<span class="n">X_test_encoded</span> <span class="o">=</span> <span class="n">X_test_encoded</span><span class="p">[</span><span class="n">columns</span><span class="p">[</span><span class="n">selector1</span><span class="p">.</span><span class="n">get_support</span><span class="p">()]]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-33-6ef92159fc82&gt; in &lt;module&gt;()
      1 from sklearn.feature_selection import chi2, SelectKBest
      2 selector1 = SelectKBest(chi2, k=5)
----&gt; 3 X_train1 = selector1.fit_transform(X_train_encoded, y_train)
      4 columns = X_train_encoded.columns
      5 X_train_encoded = X_train_encoded[columns[selector1.get_support()]]


/usr/local/lib/python3.7/dist-packages/sklearn/base.py in fit_transform(self, X, y, **fit_params)
    853         else:
    854             # fit method of arity 2 (supervised transformation)
--&gt; 855             return self.fit(X, y, **fit_params).transform(X)
    856
    857


/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py in fit(self, X, y)
    405             )
    406
--&gt; 407         self._check_params(X, y)
    408         score_func_ret = self.score_func(X, y)
    409         if isinstance(score_func_ret, (list, tuple)):


/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py in _check_params(self, X, y)
    604             raise ValueError(
    605                 "k should be &gt;=0, &lt;= n_features = %d; got %r. "
--&gt; 606                 "Use k='all' to return all features." % (X.shape[1], self.k)
    607             )
    608


ValueError: k should be &gt;=0, &lt;= n_features = 4; got 5. Use k='all' to return all features.
</code></pre></div></div>

<h1 id="스케일링-및-모델-구성-fit">스케일링 및 모델 구성, fit</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="c1"># StandardScaler
</span><span class="n">scaler</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">X_train_scaled</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train_encoded</span><span class="p">)</span>
<span class="n">X_train_scaled</span><span class="o">=</span><span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">X_train_scaled</span><span class="p">)</span>

<span class="n">X_test_scaled</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_test_encoded</span><span class="p">)</span>
<span class="n">X_test_scaled</span><span class="o">=</span><span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">X_test_scaled</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># modeling MLP
</span><span class="kn">from</span> <span class="nn">tensorflow.keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">Dropout</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras.optimizers</span> <span class="kn">import</span> <span class="n">Adam</span><span class="p">,</span> <span class="n">SGD</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras</span> <span class="kn">import</span> <span class="n">regularizers</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">input_dim</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">kernel_initializer</span><span class="o">=</span><span class="s">'he_normal'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'tanh'</span><span class="p">,</span> <span class="n">kernel_initializer</span><span class="o">=</span><span class="s">'he_normal'</span><span class="p">,</span>
                <span class="n">kernel_regularizer</span><span class="o">=</span><span class="n">regularizers</span><span class="p">.</span><span class="n">l1</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>   
                <span class="n">activity_regularizer</span><span class="o">=</span><span class="n">regularizers</span><span class="p">.</span><span class="n">l2</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
         <span class="p">)</span>
<span class="n">Dropout</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'sigmoid'</span><span class="p">,</span> <span class="n">kernel_initializer</span><span class="o">=</span><span class="s">'he_normal'</span><span class="p">))</span>
<span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'linear'</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="s">'Adam'</span><span class="p">,</span> <span class="n">loss</span><span class="o">=</span><span class="s">'mse'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'mae'</span><span class="p">])</span>

<span class="c1"># model fit
</span><span class="n">history</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_scaled</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">256</span><span class="p">,</span> <span class="n">validation_split</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">4000</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="loss-변동-그래프로-확인">loss 변동 그래프로 확인</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">val_loss</span> <span class="o">=</span> <span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_loss'</span><span class="p">]</span>
<span class="n">val_mae</span> <span class="o">=</span> <span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_mae'</span><span class="p">]</span>
<span class="n">epochs</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">val_loss</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>


<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">epochs</span><span class="p">,</span> <span class="n">val_loss</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'val loss'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/project/source_1.png" width="90%" height="90%" /></p>

<blockquote>
  <p>..? 너무 모양 완벽한 그래프를 갖는다.. 왜지</p>
</blockquote>

<h1 id="어떤-예측값을-갖지">어떤 예측값을 갖지…?</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_encoded</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">10</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[9079.562],
       [9079.562],
       [9079.562],
       [9079.562],
       [9079.562],
       [9079.562],
       [9079.562],
       [9079.562],
       [9079.562],
       [9079.562]], dtype=float32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mae가 최소로하는 하나의 값으로 수렴해버림..
# 딥러닝까지 필요없는 데이터에 딥러닝을 써버리면..
# 복잡도만 올라가고 성능은 나오지 않는 것 같다.
</span></code></pre></div></div>

<h1 id="소잡는칼">소잡는칼…!</h1>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="pj" /><category term="MLP" /><summary type="html"><![CDATA[판다스 프로파일링 코랩에서 작동하도록 버전지정 설치]]></summary></entry><entry><title type="html">도커(docker)로 리눅스환경을 만들고 py파일을 실행해보자.</title><link href="http://localhost:4000/de/docker/" rel="alternate" type="text/html" title="도커(docker)로 리눅스환경을 만들고 py파일을 실행해보자." /><published>2022-03-25T00:00:00+09:00</published><updated>2022-03-25T00:00:00+09:00</updated><id>http://localhost:4000/de/docker</id><content type="html" xml:base="http://localhost:4000/de/docker/"><![CDATA[<h2 id="도커가-뭐">도커가 뭐?</h2>
<p>컨테이너를 사용하게 해주는 플랫폼이며, 이 컨테이너는 VM(Virtual Machine) 과 가장 비교를 많이한다.<br />
OS 먼저 정확히 말하면, 컴퓨터를 사용자가 편하게 쓸 수 있도록 하는 소프트웨어이며, 안드로이드, iOS, 윈도우, macOS 등이 있다.<br />
VM은 사용자 OS의 각종 소스들을 각각 전용으로 할당하여 가상OS를 만드는 방식이라면,<br />
컨테이너는 docker라는 툴을 이용하여, 그 위에서 이미지(어플리케이션)을 실행하는 방식이다. (소스를 할당하는 개념이아님, 각각 제한은 할 수 있음)</p>

<blockquote>
  <p>목적<br />
다른 OS에서도 작동하는 서비스를 이미지로 만들고 배포하게 한다.</p>
</blockquote>

<blockquote>
  <p>장점<br />
VM보다 가볍고 빠르다.<br />
배포가 용이하다.<br />
적은 용량의 이미지로 관리 가능하다.</p>
</blockquote>

<h2 id="도커파일dockerfile">도커파일(Dockerfile)</h2>
<p>각각 독립으로 작동하는 파일을 이미지(image)라고 하는데, 이 이미지를 어떻게 빌드할 것인지 적어놓는 문서. (이름이 무조건 Dockerfile)</p>
<blockquote>
  <blockquote>
    <p>간단 명령어 <br />
FROM : 베이스 이미지<br />
RUN : 컨테이너 생성 전 명령어를 실행한다.<br />
COPY a b: a 파일을 함께 컨테이너 b경로에 이미지로 빌드한다.  (..은 dockerfile과 같은경로내 전부)<br />
ENV : 환경변수 설정
ENTRYPOINT : 컨테이너를 실행하면서 수행하는 명령<br />
CMD : ENTRYPOINT처럼 실행하면서 수행하는 명령인데 docker run 수행시(이미지 실행) 인자값을 추가해서 다른값을 넣을 수 있다.<br />
WORKDIR : 작업 디렉토리 설정</p>
  </blockquote>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM ubuntu:18.04

RUN apt update -y
RUN apt install python3.6 -y
RUN apt install python3-pip -y

RUN apt update -y

# requirements 있으면 아래꺼 실행
# COPY ./ubuntu1804/requirements.txt /requirements.txt
# RUN pip3 install -r /requirements.txt
# RUN apt update -y
# 같은 폴더내 파일 복사
COPY . .

# test.py 파이썬으로 실행

RUN apt update -y


# 각종 한글 폰트 설치
RUN apt install language-pack-ko -y
RUN apt install fonts-nanum -y
RUN apt install fonts-nanum-coding -y
RUN apt install fonts-noto-cjk -y

# 환경변수 지정
ENV LANG ko_KR.UTF-8
ENV LANGUAGE ko_KR.UTF-8
ENV LC_ALL ko_KR.UTF-8

# 컨테이너를 실행할 때 수행하는 명령어
CMD ["test.py"]

ENTRYPOINT ["python3"]
WORKDIR /root
RUN echo 'alias python=python3.6' &gt;&gt; .bashrc

WORKDIR /
</code></pre></div></div>

<blockquote>
  <p>위 내용의 Dockerfile 문서와 함께 있는 test.py가 실행됨과 동시에 리눅스 환경 컨테이너가 생성된다.</p>
</blockquote>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="de" /><summary type="html"><![CDATA[도커가 뭐? 컨테이너를 사용하게 해주는 플랫폼이며, 이 컨테이너는 VM(Virtual Machine) 과 가장 비교를 많이한다. OS 먼저 정확히 말하면, 컴퓨터를 사용자가 편하게 쓸 수 있도록 하는 소프트웨어이며, 안드로이드, iOS, 윈도우, macOS 등이 있다. VM은 사용자 OS의 각종 소스들을 각각 전용으로 할당하여 가상OS를 만드는 방식이라면, 컨테이너는 docker라는 툴을 이용하여, 그 위에서 이미지(어플리케이션)을 실행하는 방식이다. (소스를 할당하는 개념이아님, 각각 제한은 할 수 있음)]]></summary></entry><entry><title type="html">CNN 구조 이해</title><link href="http://localhost:4000/ds/CNN/" rel="alternate" type="text/html" title="CNN 구조 이해" /><published>2022-03-19T00:00:00+09:00</published><updated>2020-03-19T00:00:00+09:00</updated><id>http://localhost:4000/ds/CNN</id><content type="html" xml:base="http://localhost:4000/ds/CNN/"><![CDATA[<h2 id="cnn-의-목적">CNN 의 목적</h2>
<p>컴퓨터에 이미지를 이해시키는 방법을 생각해보자.<br />
이미지는 RGB, BGR의 3자리 숫자가 모든 점들을 구성한다.<br />
그렇다면 강아지 사진 1의 모든 RGB 숫자들을 그대로 컴퓨터에게 알려준다면,<br />
컴퓨터는 구도만 살짝 바뀐 강아지 사진 2는 전혀 다른 사진이라고 생각할 것이다.</p>

<p>이를 위해 CNN에서는 ‘필터’라는 개념을 이용하여 ‘특징’을 추출한다.</p>

<h2 id="이것만-이해하자-no1">이것만 이해하자. No.1</h2>
<p><img src="/assets/images/ds/source_0.png" width="60%" height="60%" /><br />
필터는 위와같이 적용된다. 필터 하나하나가 가중치의 역할을 하며, 필터의 모양에 따라 이미지의 어떤 특징들을 추출하는지 결정된다.</p>

<h2 id="이것만-이해하자-no2">이것만 이해하자. No.2</h2>
<p><img src="/assets/images/ds/source_1.png" width="60%" height="60%" /><br />
—————————————————————————-<br />
CNN의 Layer를 하나씩 쌓고 있다.<br />
첫번째 Conv2D 코드를 보자,  (32,32) 사이즈의 3겹(rgb, bgr) 이미지를 3by3 필터 가중치를 이용하여 32개의 feature map을 만들겠다고 되어있다.<br />
그 결과, (30,30) 사이즈의 32겹 피쳐맵을 만들었고, param수는 896개이다.<br />
가중치의 갯수는 신경망의 원리에서 각 가중치를 필터로 갖는다고 생각하면 쉽다.<br />
3 (=input) x 32(=output) x 9(=3*3필터) + 32(퍼셉트론 신경망 node와 같이 각 feature맵 가중치)<br />
=896</p>

<h2 id="이것만-이해하자-no3">이것만 이해하자. No.3</h2>
<p><img src="/assets/images/ds/source_2.png" width="40%" height="40%" /><br />
No.2의 예시에서 (32,32)가 (30,30)으로 되는 건 3*3필터를 대입해보면 얼추 바로 알 수 있는데,<br />
stride나 padding이 들어가면 헷갈릴 수 있다. 위 식에 대입해서 정확히 구할 수 있다.</p>

<h2 id="키워드-정리">키워드 정리</h2>
<ol>
  <li>필터 (kernel, filter)</li>
  <li>피쳐맵 (feature map)</li>
  <li>패딩 (padding, zero padding) : 가장자리에서 필터때문에 소실되는 데이터를 막기 위해 사용, 이미지를 한번 0으로 감싸는 것.
    <ul>
      <li>사이즈에 따라 분류 : valid padding(패딩안함),<br />
 full padding (필터사이즈-1 만큼두께로 모두 감싸는 것, edge의 데이터 손실을 막는다는 의의를 가진다),<br />
 same padding(input이미지와 output이미지 사이즈가 같도록 패딩, 사이즈가 점점 작아지는 현상을 막는 다는 의미가 있음.)</li>
    </ul>
  </li>
  <li>스트라이드 (stride) : 커널을 대입할 때, 이동하는 칸 수를 말한다. (1이면 한칸씩 이동)</li>
  <li>풀링(pulling) :  이미지, 피쳐맵의 사이즈를 줄임. 내부의 정보 등을 줄이기 때문에 오버피팅 효과 및 메모리 절약</li>
</ol>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="ds" /><summary type="html"><![CDATA[CNN 의 목적 컴퓨터에 이미지를 이해시키는 방법을 생각해보자. 이미지는 RGB, BGR의 3자리 숫자가 모든 점들을 구성한다. 그렇다면 강아지 사진 1의 모든 RGB 숫자들을 그대로 컴퓨터에게 알려준다면, 컴퓨터는 구도만 살짝 바뀐 강아지 사진 2는 전혀 다른 사진이라고 생각할 것이다.]]></summary></entry><entry><title type="html">사람얼굴에 스타일 바꿔보기</title><link href="http://localhost:4000/pj/stylegan/" rel="alternate" type="text/html" title="사람얼굴에 스타일 바꿔보기" /><published>2022-03-10T00:00:00+09:00</published><updated>2022-03-13T00:00:00+09:00</updated><id>http://localhost:4000/pj/stylegan</id><content type="html" xml:base="http://localhost:4000/pj/stylegan/"><![CDATA[<h2 id="목표">목표</h2>
<p>임의의 초상권 없는 얼굴을 특정 스타일을 입혀 만들기.</p>

<h2 id="방법">방법</h2>
<p>임시로 생성한 사람얼굴(실존x) 이미지에 원하는 특정 스타일을 가진 사람(실존o)의 이미지를 적용하여 새롭게 생성.</p>

<ol>
  <li>styleGAN2-ada 모델의 ffhq preTrained 가중치를 사용하여 얼굴생성.</li>
  <li>원하는 스타일의 사람사진의 스타일 벡터들을 추출 (PSP 모델의 일부 사용)</li>
  <li>1번에서 생성한 이미지를 inversion하여 다시 이미지를 생성하는 과정에서 2번의 스타일 벡터들을 inject하여 최종 생성.</li>
</ol>

<p><img src="/assets/images/source_26.png" width="100%" height="60%" title="제목" alt="아무거나" /></p>

<h2 id="stylegan2---ada-간단-요약">StyleGAN2 - ada 간단 요약</h2>
<p>GAN (latent vector로 부터 이미지 생성) 모델 중에서<br />
styleGAN (latent vector를 style 별로 생성된 여러 w-vector로 만들어 이미지 생성) 이 있다.</p>

<p>ada는 데이터 증강기법(적은 데이터로 다양한 데이터생성, 일반화 효과 + 데이터 수 늘리는 효과)</p>

<h2 id="psppixel2style2pixel-간단-요약">PSP(pixel2style2pixel) 간단 요약</h2>
<p>구조를 두 부분으로 나눌 수 있는데,</p>
<ol>
  <li>psp encoder : 이미지를 매핑하여 w-vector를 생성함.</li>
  <li>styleGAN generator  : w-vector를 사용하여 이미지를 생성(styleGAN 방식과 같이 해상도를 올리면서 이미지 생성.)</li>
</ol>

<p>이 구조를 이용해서 여러 기능으로 사용가능 (ffhq_encode, celeb_seg_to_face, toonify 등)</p>

<h2 id="test-이미지">test 이미지</h2>
<p>styleGAN2-ada, ffhq-pretrained 로 생성한 이미지 들<br />
<img src="/assets/images/project/test_img0.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/test_img10.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/test_img19.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/test_img4.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/test_img12.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/test_img16.png" width="20%" height="60%" title="제목" alt="아무거나" /></p>

<h2 id="결과-이미지">결과 이미지</h2>
<blockquote>
  <p>스타일이미지</p>
</blockquote>

<p><img src="/assets/images/project/단발.png" width="20%" height="60%" title="제목" alt="아무거나" /></p>
<blockquote>
  <p>결과 이미지<br />
순서대로 <strong>“스타일 적용전”</strong> ::::::: <strong>“w벡터 중 랜덤으로 1 개만 적용”</strong> ::::::: <strong>“모든 w벡터를 적용한 경우”</strong></p>
</blockquote>

<p><img src="/assets/images/project/test_img0.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/0/mask_some.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/0/mask_all.png" width="20%" height="60%" title="제목" alt="아무거나" /></p>

<p><img src="/assets/images/project/test_img10.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/10/mask_some.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/10/mask_all.png" width="20%" height="60%" title="제목" alt="아무거나" /></p>

<p><img src="/assets/images/project/test_img19.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/19/mask_some.png" width="20%" height="60%" title="제목" alt="아무거나" />
<img src="/assets/images/project/19/mask_all.png" width="20%" height="60%" title="제목" alt="아무거나" /></p>

<h2 id="결론">결론</h2>

<p>결과를 해석하자면</p>
<ol>
  <li>스타일이미지의 얼굴형, 머리스타일 등에 원본이미지의 눈코입, 피부 등을 적용시켜 이미지를 생성한다.</li>
  <li>랜덤한 w벡터를 적용했을 때, 스타일 이미지의 정확히 어떤 특징을 담은 w벡터가 적용된 것인지 알기 힘들다..<br />
(물론 스타일이미지와 무언가 닮아지긴 한다.)</li>
</ol>

<p>성공적인가의 여부는 스타일 이라는 애매한 단어에 어떤 걸 포함시키느냐에 따라 해석이 다를 것 같다.<br />
얼굴형, 머리스타일을 ‘스타일’이라고 한다면, 성공에 가깝다고 볼 수 있겠다!<br />
다만 원하는 스타일(머리스타일, 얼굴형 중 하나를 택하고 싶은 경우)을 적용하는데에는 실험적인 시도가 필요해 보인다.</p>

<h2 id="레포지토리-링크">레포지토리 링크</h2>
<p><a href="https://github.com/chan9480/Style_image_GAN">https://github.com/chan9480/Style_image_GAN</a></p>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="pj" /><category term="styleGAN2" /><category term="PSP" /><summary type="html"><![CDATA[목표 임의의 초상권 없는 얼굴을 특정 스타일을 입혀 만들기.]]></summary></entry><entry><title type="html">데이터 인코딩(encoding)</title><link href="http://localhost:4000/ds/encoding/" rel="alternate" type="text/html" title="데이터 인코딩(encoding)" /><published>2022-03-06T00:00:00+09:00</published><updated>2022-03-06T00:00:00+09:00</updated><id>http://localhost:4000/ds/encoding</id><content type="html" xml:base="http://localhost:4000/ds/encoding/"><![CDATA[<h2 id="인코딩은-왜-하는거">인코딩은 왜 하는거?</h2>
<p>데이터에는 연속적인 숫자만 있는게 아니다.<br />
문자열의 카테고리형 feature일 수도,<br />
숫자라 하더라도 비연속적인 카테고리형 feature도 있다.<br />
(예: 사는지역(“수유동”, “인수동” …), 평점(“매우별로”,”별로”, … , “매우좋음”))</p>

<p>인코딩은 이러한 카테고리형 feature들에 대하여 ‘데이터’로써 유의미하도록 숫자로 바꿔주는 역할을 한다.</p>

<h2 id="인코딩의-종류와-간단-정리">인코딩의 종류와 간단 정리</h2>
<p>본래 데이터<br />
<img src="/assets/images/source_27.png" width="30%" height="60%" title="제목" alt="아무거나" /></p>

<ol>
  <li>One Hot Encoding<br />
하나의 feature가 갖는 범주 전체에 대하여 ‘이다’, ‘아니다’로 분류하여 0, 1을 갖는 feature를 생성.<br />
(사는지역의 종류가 “수유동”, “쌍문동” 등 16개의 동이 있다면, 16개의 feature (사는지역_수유동, 사는지역_쌍문동… 등)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pd.get_dummies(df, prefix=["지  "], columns=["사는지역"])
#또는 아래처럼 sklern.preprocessing의 함수 사용
from sklearn.preprocessing import OneHotEncoder
</code></pre></div>    </div>
    <p><img src="/assets/images/source_28.png" width="60%" height="60%" title="제목" alt="아무거나" /></p>
  </li>
  <li>Ordinal Encoding
categorical_feature의 값들이 어떤 <strong>‘순서’</strong>를 갖고있을 때 사용한다.<br />
(‘매우 그렇다’, ‘그렇다’, ‘보통’, ‘아니다’, ‘매우 아니다’) 같은거!
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from sklearn.preprocessing import OrdinalEncoder
enc = OrdinalEncoder(categories = [['불만족', '보통', '만족']])
df['선호도_enc']=enc.fit_transform(df[['선호도']])
</code></pre></div>    </div>
    <p><img src="/assets/images/source_29.png" width="20%" height="60%" title="제목" alt="아무거나" /></p>
  </li>
  <li>Binary Encoding
OneHotEncoding의 이진수 버전이라고 이해했다.<br />
사는지역의 종류가 16개의 동이 있다면. 4자리 이진수로 표현이 가능하므로 <strong>4개의 feature를 생성</strong> 한다.(cardinality가 너무 큰 특성에 대해서 사용하면 장점일 듯!)<br />
‘수유동은’ 4개의 feature에 0이나 1이 채워져 0000부터 1111중 하나의 형태를 가질 것!
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import category_encoders as ce
encoder = ce.BinaryEncoder(cols=['사는지역'])
dfbin = encoder.fit_transform(df['사는지역'])
df = pd.concat([df, dfbin], axis=1)
df.drop(['선호도','성별(1남, 0여)'], axis=1)
</code></pre></div>    </div>
    <p><img src="/assets/images/source_30.png" width="30%" height="60%" title="제목" alt="아무거나" /></p>
  </li>
  <li>Frequency Encoding
빈도로써 표현하는 방법<br />
‘수유동’이 10개 데이터중 2번있다면 0.2로 매핑됨.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Frequency Encoding
fe = df.groupby("사는지역").size()/len(df)
df.loc[:, "사는지역_freq_encode"] = df["사는지역"].map(fe)
df
</code></pre></div>    </div>
    <p><img src="/assets/images/source_31.png" width="30%" height="60%" title="제목" alt="아무거나" /></p>
  </li>
  <li>
    <p>Mean Encoding<br />
여기부터는 지도학습에만 해당하는 내용이라고 생각한다. <strong>‘target’</strong> 이 존재할 때만 가능하기 때문!<br />
어떻게 인코딩을 시킬 지를 ‘타겟의 평균값’에 따라 결정한다.</p>

    <p>먼저, 단순하게 target의 평균자체로 매핑을 하는 방법이 있는데,<br />
(target을 gender라 하면, 수유동에사는 사람들의 target평균을 수유동의 인코딩 매핑값으로 삼는다.)<br />
과적합이 되기 쉽다.<br />
————————————————————————————–</p>

    <p>두번째로, smoothing mean target encoding은 과적합을 좀더 방지한다.<br />
(수유동 사람들의 target평균 / weight) + (전체 target평균 / 수유동의 갯수)<br />
 의미 : weight로 개별평균을 분산시켜주고, 수유동의 갯수가 클수록 수유동평균에 힘을, 수유동 갯수가 적다면 전체평균의 힘을 실어준다.<br />
weight가 클수록 편차가 작아진다!</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # smoothing target encoding
 # 1. 평균을 계산
 mean = df['성별(1남, 0여)'].mean()
 # 2. 각 그룹에 대한 값들의 빈도와 평균을 계산
 Agg = df.groupby('사는지역')['성별(1남, 0여)'].agg(['count', 'mean'])
 counts = Agg['count']
 means = Agg['mean']
 weight = 10
 # 3. “smooth”한 평균을 계산
 smooth = (counts * means + weight * mean) / (counts + weight)
 # smooth한 평균에 따라 각 값을 대체하는 것
 print(smooth)
 df.loc[:, '사는지역_smean_enc'] = df['사는지역'].map(smooth)
 df
</code></pre></div>    </div>
    <p><img src="/assets/images/source_32.png" width="60%" height="60%" title="제목" alt="아무거나" /></p>
  </li>
  <li>Probability Ratio Encoding (확률비율 인코딩)<br />
(target이 1인 확률 / target이 0인 확률) 의 비율로 매핑을 하는 방법이다.<br />
주의할 점은 0으로나뉘는걸 꼭 방지하자!  <br />
(예 : ‘수유동’들 중에 target이 1인갯수는 3개, 0인갯수는 1개라면, ‘수유동’은 3으로 매핑됨.)</li>
  <li>Weight of Evidence Encoding<br />
위 PRE의 비율에 log_2를 취하고 weight을 곱해준 것으로 인코딩하는 방법.<br />
(6번 인코딩 예시에서 ‘수유동’은 w*ln(3)의 값으로 매핑 될 것.)</li>
</ol>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="ds" /><summary type="html"><![CDATA[인코딩은 왜 하는거? 데이터에는 연속적인 숫자만 있는게 아니다. 문자열의 카테고리형 feature일 수도, 숫자라 하더라도 비연속적인 카테고리형 feature도 있다. (예: 사는지역(“수유동”, “인수동” …), 평점(“매우별로”,”별로”, … , “매우좋음”))]]></summary></entry><entry><title type="html">크롤링(Crawling)</title><link href="http://localhost:4000/de/crawling/" rel="alternate" type="text/html" title="크롤링(Crawling)" /><published>2022-03-05T00:00:00+09:00</published><updated>2022-03-20T00:00:00+09:00</updated><id>http://localhost:4000/de/crawling</id><content type="html" xml:base="http://localhost:4000/de/crawling/"><![CDATA[<h2 id="크롤링이란-">크롤링이란 ?</h2>
<p>web에 있는 데이터들을 긁어모으는 것을 말한다.<br />
크게 두 종류로 먼저 나눌 수 있다.</p>
<ol>
  <li>정적크롤링 : 항상 같은 값을 주는 HTML로 부터 파싱을 해서 크롤링.</li>
  <li>동적크롤링 : 같은 HTML이라도 동작, 명령을 통해 변화된 상태에서 데이터들을 크롤링.</li>
</ol>

<p>정적크롤링은 멈춰있는 페이지에서 정보를 찾아 긁어모은다면,<br />
동적크롤링은 검색, 스크롤, 페이지 클릭 등을 해서 나오는 정보를 긁어모을 수 있다.</p>

<p>대표적으로 정적크롤링 관련 라이브러리로 beautifulsoup(bs4)가 있다.<br />
그리고 동적크롤링의 방법에도 여러 종류가 있는데 그 중 2가지를 적어보자면 다음과 같다.</p>
<ol>
  <li>openAPI를 이용하여 명령 후, response된 정보로부터 크롤링.</li>
  <li>selenium을 통해 webdriver (크롬, 사파리 등)를 제어한 후 나온 페이지(HTML)로부터 크롤링.</li>
</ol>

<h2 id="크롤링-예시">크롤링 예시</h2>
<p>먼저 아래 함수 두개를 지정하겠다.</p>
<ol>
  <li>diScrollDown : 특정 시간동안 스크롤을 내리는 함수.</li>
  <li>createDirectory : 입력값으로 받은 문자열(경로)에 해당하는 폴더를 생성한다.</li>
  <li>crawling_img : 입력값으로 받은 문자열을 크롬에서 검색해서 함수내에 지정되어 있는(직접변경) 경로로 이미지를 저장. (이름은 번호순으로 증가)</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time
import urllib.request
import os

def doScrollDown(driver, whileSeconds):
    start = datetime.datetime.now()
    end = start + datetime.timedelta(seconds=whileSeconds)
    while True:
        driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
        time.sleep(1)
        if datetime.datetime.now() &gt; end:
            break

def createDirectory(directory):
    try:
        if not os.path.exists(directory):
            os.makedirs(directory)
    except OSError:
        print("Error: Failed to create the directory.")

def crawling_img(name):
    ## 입력값 name 문자열을 검색하여 나오는 이미지를 저장하는 함수.
    ## 저장하는 경로는 함수 내에서 별도로 지정해야함.

    # 크롬을 드라이버로 채택. 버전오류가 날 수 있다.
    # 사파리는 webdriver.Safari()를 사용하면 된다.
    driver = webdriver.Chrome()
    driver.get("https://www.google.co.kr/imghp?hl=ko&amp;tab=wi&amp;authuser=0&amp;ogbl")

    # q로 태그되어 있는 곳이 구글홈페이지의 검색창이다.
    # driver.set_window_size(a,b) 로 창 크기 지정 가능
    elem = driver.find_element_by_name("q")
    elem.send_keys(name)
    elem.send_keys(Keys.RETURN)


    SCROLL_PAUSE_TIME = 1   # 1초씩 기다렸다가 내렸다를 반복할거임.  
    # Get scroll height
    last_height = driver.execute_script("return document.body.scrollHeight")  # 브라우저의 높이를 자바스크립트로 찾음
    while True:
        # Scroll down to bottom
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")  # 브라우저 끝까지 스크롤을 내림
        # Wait to load page
        time.sleep(SCROLL_PAUSE_TIME)
        # Calculate new scroll height and compare with last scroll height
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            try:
                # 더보기 버튼을 클릭할 거임.
                driver.find_element_by_css_selector(".mye4qd").click()
            except:
                # 더보기 버튼이 없어서 클릭을 못하면 끝.
                break
        last_height = new_height

    imgs = driver.find_elements_by_css_selector(".rg_i.Q4LuWd")

    # 경로와 폴더 명 지정.
    dir = ".\tree_flower_dog_cat" + "\\" + name

    createDirectory(dir) #폴더 생성
    count = 1
    for img in imgs:
        try:
            img.click()
            time.sleep(3)
            imgUrl = driver.find_element_by_xpath(
                '//*[@id="Sva75c"]/div/div/div[3]/div[2]/c-wiz/div/div[1]/div[1]/div[2]/div/a/img').get_attribute(
                "src")
            path = ".\idols\\" + name + "\\"
            urllib.request.urlretrieve(imgUrl, path + name + "_"+ str(count) + ".jpg")

            # 이 아래는 관련이미지 저장
            imgUrl = driver.find_element_by_xpath(
                '//*[@id="Sva75c"]/div/div/div[3]/div[2]/c-wiz/div/div[1]/div[3]/div[3]/c-wiz/div/div/div/div[3]/div[1]/div[1]/a[1]/div[1]/img').get_attribute(
                "src")
            urllib.request.urlretrieve(imgUrl, path + name + "_"+ str(count) + "_1" + ".jpg")
            imgUrl = driver.find_element_by_xpath(
                '//*[@id="Sva75c"]/div/div/div[3]/div[2]/c-wiz/div/div[1]/div[3]/div[3]/c-wiz/div/div/div/div[3]/div[1]/div[2]/a[1]/div[1]/img').get_attribute(
                "src")
            urllib.request.urlretrieve(imgUrl, path + name + "_"+ str(count) + "_2" + ".jpg")

            imgUrl = driver.find_element_by_xpath(
                '//*[@id="Sva75c"]/div/div/div[3]/div[2]/c-wiz/div/div[1]/div[3]/div[3]/c-wiz/div/div/div/div[3]/div[1]/div[3]/a[1]/div[1]/img').get_attribute(
                "src")
            urllib.request.urlretrieve(imgUrl, path + name + "_"+ str(count) + "_3" + ".jpg")

            count = count + 1
            if count &gt;= 500:
                break
        except:
            pass
    driver.close()
</code></pre></div></div>

<p>이제 위 함수를 사용하여 for문을통해 검색 및 저장을 동시에 해주면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>searching_keyword = ["나무", "꽃", "강아지얼굴", "고양이얼굴"]

for i in range(len(searching_keyword)) :
    searching_keyword[i] += '_사진' # 사진을 뒤에 붙이면 검색이 잘될 것 같아!

for keyword in searching_keyword:
    crawling_img(keyword)
</code></pre></div></div>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>🌜 개인 공부 기록용 블로그입니다. 오류나 틀린 부분이 있을 경우
언제든지 댓글 혹은 메일로 지적해주시면 감사하겠습니다! 😄
</code></pre></div></div>

<p><a href="#" class="btn btn--primary align-right">맨 위로 이동하기</a></p>]]></content><author><name>옹달샘👱🏼‍♂️</name></author><category term="de" /><summary type="html"><![CDATA[크롤링이란 ? web에 있는 데이터들을 긁어모으는 것을 말한다. 크게 두 종류로 먼저 나눌 수 있다. 정적크롤링 : 항상 같은 값을 주는 HTML로 부터 파싱을 해서 크롤링. 동적크롤링 : 같은 HTML이라도 동작, 명령을 통해 변화된 상태에서 데이터들을 크롤링.]]></summary></entry></feed>